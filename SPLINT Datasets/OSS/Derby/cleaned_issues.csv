resolved_date,issue_id,resolution,description,priority,assignee,assignee_username,created_date,summary,status,mapped_type,type
2016-08-09T00:04:32.000+0000,DERBY-6879,Fixed,"Deadlock between XA timer cleanup task and the ContextManager.cleanupOnError

Found one Java-level deadlock:
=============================
""DRDAConnThread_34"":
  waiting to lock monitor 0x0000000104b14d18 (object 0xfffffffd9090f058, a org.apache.derby.jdbc.XATransactionState),
  which is held by ""Timer-0""
""Timer-0"":
  waiting to lock monitor 0x00000001038b96e8 (object 0xfffffffd9090d8b0, a org.apache.derby.impl.jdbc.EmbedConnection40),
  which is held by ""DRDAConnThread_34""
 
Java stack information for the threads listed above:
===================================================
""DRDAConnThread_34"":
     at org.apache.derby.jdbc.XATransactionState.cleanupOnError(Unknown Source)
     - waiting to lock <0xfffffffd9090f058> (a org.apache.derby.jdbc.XATransactionState)
     at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)
     at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Unknown Source)
     at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
     at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
     at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
     at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
     - locked <0xfffffffd9090d8b0> (a org.apache.derby.impl.jdbc.EmbedConnection40)
     at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
     at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
     at org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.execute(Unknown Source)
     at org.apache.derby.impl.drda.DRDAStatement.execute(Unknown Source)
     at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(Unknown Source)
     at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(Unknown Source)
     at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)
     at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)
""Timer-0"":
     at org.apache.derby.impl.jdbc.EmbedConnection.xa_rollback(Unknown Source)
     - waiting to lock <0xfffffffd9090d8b0> (a org.apache.derby.impl.jdbc.EmbedConnection40)
     at org.apache.derby.jdbc.XATransactionState.cancel(Unknown Source)
     - locked <0xfffffffd9090f058> (a org.apache.derby.jdbc.XATransactionState)
     at org.apache.derby.jdbc.XATransactionState$CancelXATransactionTask.run(Unknown Source)
     at java.util.TimerThread.mainLoop(Timer.java:555)
     at java.util.TimerThread.run(Timer.java:505)
 
Found 1 deadlock.


This deadlock caused Derby to create 18000 transaction recovery logs because of the XA transaction that did not cleanup in the timeout.  Rebooting the system would cause a 50 hour boot up time to process the transaction logs so recovery had to be done by going to a backup database before the issue occurred.


",Major,Brett Bergquist,,2016-03-29T11:04:08.000+0000,Engine deadlock between XA timeout handling and cleanupOnError,Resolved,bug,Bug
2016-02-25T03:47:10.000+0000,DERBY-6861,Fixed,"The KEYS file is missing from http://www.apache.org/dist/db/derby/.

The KEYS file is needed for the archives server as well as for current releases, so the KEYS file must be served from the ASF mirror hosts, rather than a location in the SVN source tree.

Please move the KEYS file to 

https://dist.apache.org/repos/dist/release/db/derby/

making sure that it contains all the keys previously used to sign releases.

Also please change the KEYS link(s) on download pages accordingly.",Major,None,,2016-01-31T23:22:37.000+0000,Missing KEYS file,Closed,bug,Bug
2016-02-04T10:15:31.000+0000,DERBY-6860,Fixed,"Automatic download of junit.jar seems to be broken. If you don't already have a copy in tools/java, ""ant all"" fails like this:

{noformat}
junit_check:

BUILD FAILED
/code/derby/trunk/build.xml:66: The following error occurred while executing this line:
/code/derby/trunk/build.xml:177: junit property is set to /code/derby/trunk/tools/java/junit.jar, but there is no junit.jar there.
{noformat}

The problem seems to be that junit_check refuses to continue if the junit property is set, but does not point to an existing file. This property is set when the setCompilerProperties target, which runs before junit_check, loads tools/ant/properties/extrapath.properties, as extrapath.properties contains the following line:

{noformat}
junit=${javatools.dir}/junit.jar
{noformat}

Since the install_junit target depends on the check_junit target, this prevents the build script from downloading junit.jar automatically.

Workaround: run ""ant install_junit"" before ""ant all""",Major,Knut Anders Hatlen,,2016-01-28T14:52:24.000+0000,Automatic download of junit.jar broken,Closed,bug,Bug
2016-02-04T20:09:08.000+0000,DERBY-6864,Fixed,"RawDBReaderTest fails on Windows with the following output:

{noformat}
.<assertDirectoryDeleted> attempt 1 left 2 files/dirs behind: 0=extinout\recovery.sql 1=extinout
<assertDirectoryDeleted> attempt 2 left 2 files/dirs behind: 0=extinout\recovery.sql 1=extinout
<assertDirectoryDeleted> attempt 3 left 2 files/dirs behind: 0=extinout\recovery.sql 1=extinout
<assertDirectoryDeleted> attempt 4 left 2 files/dirs behind: 0=extinout\recovery.sql 1=extinout
F
Time: 39,498
There was 1 failure:
1) RawDBReaderTest:embeddedjunit.framework.AssertionFailedError: Failed to delete 2 files (root=C:\cygwin64\tmp\derbytst\extinout): C:\cygwin64\tmp\derbytst\extinout\recovery.sql (isDir=false, canRead=true, canWrite=true, size=801), C:\cygwin64\tmp\derbytst\extinout (isDir=true, canRead=true, canWrite=true, size=0)
        at org.apache.derbyTesting.junit.BaseTestCase.assertDirectoryDeleted(BaseTestCase.java:1125)
        at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:128)
        at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:118)
        at org.apache.derbyTesting.junit.SupportFilesSetup.tearDown(SupportFilesSetup.java:130)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:24)
        at junit.extensions.TestSetup.run(TestSetup.java:27)

FAILURES!!!
Tests run: 1,  Failures: 1,  Errors: 0
{noformat}",Major,Knut Anders Hatlen,,2016-02-03T17:56:50.000+0000,RawDBReaderTest fails on Windows,Closed,bug,Bug
2016-02-25T03:47:51.000+0000,DERBY-6862,Fixed,"The links to archive releases have been fixed for the archives themselves, but the ASC and MD5 files still point to www.apache.org instead of archive.apache.org.",Major,None,,2016-01-31T23:28:28.000+0000,Broken links to non-current release hashes and sigs,Closed,bug,Bug
2016-06-18T16:02:08.000+0000,DERBY-6890,Fixed,"For a database with ""collation=/territory="" information configured via
the JDBC Connection URL at database connection time, individual
columns in tables and indexes in the database have collation identification
which is stored as part of the table/index conglomerate.

When an ALTER TABLE DROP COLUMN statement is run against
such a database, the drop column processing performs logic which
re-builds all of the (remaining) secondary indexes for that table
to reflect their new state following the removal of that column.

This index rebuild process does not properly re-configure the
collation information for column(s) in those index(es), leaving
the indexes in a corrupt state.

As a workaround, following the ALTER TABLE DROP COLUMN, the
damaged secondary indexes can be dropped and recreated explicitly.

== Original issue description below ==

After issue https://issues.apache.org/jira/browse/DERBY-3888 was fixed, we want to use the 'GENERATED BY DEFAULT' feature 
for our tables.  

To migrate our tables, we use this sql: 
     ALTER TABLE MODULE ADD COLUMN ID_TEMP BIGINT GENERATED BY DEFAULT AS IDENTITY;
     UPDATE MODULE SET ID_TEMP = ID;
     ALTER TABLE MODULE ALTER COLUMN ID_TEMP NOT NULL;
     ALTER TABLE MODULE DROP ID;
     RENAME COLUMN MODULE.ID_TEMP TO ID;

But after I applied it, I started to get this exception:
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.CollatorSQLVarchartype of template column[0] = org.apache.derby.iapi.types.SQLVarchar
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)
	at org.apache.derby.impl.store.access.btree.OpenBTree.isIndexableRowConsistent(OpenBTree.java:519)
	at org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:679)
	at org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1372)
	at org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:210)
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:565)
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:393)
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:713)
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268)
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:458)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:881)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:452)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:473)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:352)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1340)
	... 30 more

I attached Test.groovy class which shows this issue. 

also I found this workaround: 
we need to drop all indexes and create them again, after we applied this pk column update.





",Major,Bryan Pendleton,,2016-05-27T06:57:31.000+0000,ALTER TABLE DROP COLUMN corrupts secondary index collation information,Resolved,bug,Bug
2016-05-03T03:22:34.000+0000,DERBY-6884,Fixed,"Using SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE to export a table containing a blob column, SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE  will fail with a NumberFormatException if the offset for a blob record is > Integer.MAX_VALUE.  This is because ImportReadData.initExternalLobFile() is parsing the offset as an Integer.

The stack trace and a program to reproduce are below.

java.lang.NumberFormatException: For input string: ""2147483770""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.8.0_45]
	at java.lang.Integer.parseInt(Integer.java:583) ~[na:1.8.0_45]
	at java.lang.Integer.parseInt(Integer.java:615) ~[na:1.8.0_45]
	at org.apache.derby.impl.load.ImportReadData.initExternalLobFile(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.load.ImportReadData.getBlobColumnFromExtFile(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.load.ImportAbstract.getBlob(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.load.Import.getBlob(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.iapi.types.SQLBlob.setValueFromResultSet(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getNextRowFromRowSource(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.store.access.heap.HeapController.load(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.store.access.heap.Heap.load(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.store.access.RAMTransaction.loadConglomerate(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.store.access.RAMTransaction.recreateAndLoadConglomerate(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) ~[derby-10.11.1.1.jar:na]
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ~[derby-10.11.1.1.jar:na]
	... 36 common frames omitted

==================================
package blob;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;

public final class DerbyIssue {
    // derby url
    public static final String DBURL = ""jdbc:derby:testdb;create=true"";
    // any random binary file such as a large image or document
    public static final String BLOB_DATA_FILE = ""..."";
    public static final String EXPORT_TABLE_FILE = ""table-data"";
    public static final String EXPORT_BLOB_FILE = ""blob-data"";

    public static void main(String... args) throws Exception {
        final DerbyIssue test = new DerbyIssue();
        test.run();
    }

    public void run() throws Exception {
        Class.forName(""org.apache.derby.jdbc.ClientDriver"").getConstructor().newInstance();

        try(final Connection con = DriverManager.getConnection(DBURL)) {
            try (final Statement stmt = con.createStatement()) {
                stmt.execute(""CREATE TABLE TESTBLOB(id BIGINT, content BLOB)"");
            }

            System.out.printf(""inserting test data%n"");

            try (final PreparedStatement pstmt = con.prepareStatement(""INSERT INTO TESTBLOB (id, content) VALUES (?, ?)"")) {
                long id = 1;
                long byteCount = 0;
                final File content = new File(BLOB_DATA_FILE);
                while (byteCount < Integer.MAX_VALUE) {
                    insertBlob(pstmt, id, content);
                    id++;
                    byteCount += content.length();
                    if (id % 100 == 0) {
                        System.out.printf(""%d%n"", byteCount);
                    }
                }
                insertBlob(pstmt, id, content);
                byteCount += content.length();

                System.out.printf(""%d bytes written to testblob table%n"", byteCount);
            }

            final File exportFile = new File(EXPORT_TABLE_FILE);
            final File blobFile = new File(EXPORT_BLOB_FILE);
            try (final CallableStatement stmt = con.prepareCall(
                    ""CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE (null, ?, ?, null, null, null, ?)"")) {
                stmt.setString(1, ""TESTBLOB"");
                stmt.setString(2, exportFile.toString());
                stmt.setString(3, blobFile.toString());
                stmt.execute();
            }

            System.out.printf(""testblob table exported%n"");

            try (final Statement stmt = con.createStatement()) {
                stmt.execute(""TRUNCATE TABLE TESTBLOB"");
            }

            System.out.printf(""testblob table truncated%n"");

            try (final CallableStatement stmt = con.prepareCall(
                    ""CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE (null, ?, ?, null, null, null, 0)"")) {
                stmt.setString(1, ""TESTBLOB"");
                stmt.setString(2, exportFile.toString());
                stmt.execute();
            }

            System.out.printf(""testblob data imported%n"");
        }
    }

    private void insertBlob(PreparedStatement pstmt, long id, File content) throws IOException, SQLException {
        try(BufferedInputStream contentStream = new BufferedInputStream(new FileInputStream(content))) {
            pstmt.setLong(1, id);
            pstmt.setBinaryStream(2, contentStream);
            pstmt.executeUpdate();
        }
    }
}",Major,Bryan Pendleton,,2016-04-18T14:37:15.000+0000,SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE can't import more than Integer.MAX_VALUE bytes of blob data,Resolved,bug,Bug
2016-04-28T02:44:54.000+0000,DERBY-6880,Fixed,"When updating a single column in a table using executeUpdate() via Vert.x I am receiving the following exception:

java.sql.SQLDataException: Invalid character string format for type long.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:84)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2405)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:88)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1432)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:410)
	at io.vertx.ext.jdbc.impl.actions.JDBCUpdate.execute(JDBCUpdate.java:50)
	at io.vertx.ext.jdbc.impl.actions.JDBCUpdate.execute(JDBCUpdate.java:34)
	at io.vertx.ext.jdbc.impl.actions.AbstractJDBCAction.handle(AbstractJDBCAction.java:48)
	at io.vertx.ext.jdbc.impl.actions.AbstractJDBCAction.handle(AbstractJDBCAction.java:33)
	at io.vertx.core.impl.ContextImpl.lambda$executeBlocking$15(ContextImpl.java:296)
	at io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor.lambda$new$261(OrderedExecutorFactory.java:91)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: ERROR 22018: Invalid character string format for type long.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.iapi.types.SQLChar.getLong(SQLChar.java:447)
	at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:534)
	at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:272)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:473)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:352)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1340)
	... 13 more

Further details and discussion can be found here:

https://mail-archives.apache.org/mod_mbox/db-derby-user/201603.mbox/%3CCAHbUnCXkHMKE1u9R3D-z9Njp8goAV7%2B0vPOmgafH8DCqG8mSpQ%40mail.gmail.com%3E

Notably, I have tried executing the same update via other means (for example, manually via SquirrelSQL, and via the ORMLite framework) and the update succeeds. This may be due to the exact JDBC APIs they are using (for example, SquirrelSQL is not using a prepared statement, and ORMLite updates all the columns when it updates a table rather than just some of them).

I have created a complete but minimal example that illustrates the problem in the following GitHub project:

https://github.com/ssadedin/DerbyDebug

My derby / system information is as follows:

$ java -cp 'lib/*' org.apache.derby.tools.sysinfo
------------------ Java Information ------------------
Java Version:    1.8.0_72
Java Vendor:     Oracle Corporation
Java home:       /Library/Java/JavaVirtualMachines/jdk1.8.0_72.jdk/Contents/Home/jre
Java classpath:  lib/derby.jar:lib/derbyclient.jar
OS name:         Mac OS X
OS architecture: x86_64
OS version:      10.11.1
Java user name:  simon
Java user home:  /Users/simon
Java user dir:   /Users/simon/Documents/workspace/BrokenDerby
java.specification.name: Java Platform API Specification
java.specification.version: 1.8
java.runtime.version: 1.8.0_72-b15
--------- Derby Information --------
[/Users/simon/Documents/workspace/BrokenDerby/lib/derby.jar] 10.12.1.1 - (Unversioned directory)
[/Users/simon/Documents/workspace/BrokenDerby/lib/derbyclient.jar] 10.12.1.1 - (Unversioned directory)
------------------------------------------------------
----------------- Locale Information -----------------
------------------------------------------------------
------------------------------------------------------
",Major,Bryan Pendleton,,2016-03-29T23:19:39.000+0000,Update failing with java.sql.SQLDataException ,Resolved,bug,Bug
2016-04-11T10:41:51.000+0000,DERBY-6881,Fixed,"With JDK 9-ea b111 there are a number of test failures.

Tests that use ClassLoaderTestSetup fail because the context class loader no longer is a URLClassLoader, which causes a ClassCastException in the class loader magic performed by the test setup:

{noformat}
java.lang.ClassCastException: jdk.internal.loader.ClassLoaders$AppClassLoader (in module: java.base) cannot be cast to java.net.URLClassLoader (in module: java.base)
	at org.apache.derbyTesting.junit.ClassLoaderTestSetup$1.run(ClassLoaderTestSetup.java:53)
	at org.apache.derbyTesting.junit.ClassLoaderTestSetup$1.run(ClassLoaderTestSetup.java:50)
	at java.security.AccessController.doPrivileged(java.base@9-ea/Native Method)
	at org.apache.derbyTesting.junit.ClassLoaderTestSetup.makeClassLoader(ClassLoaderTestSetup.java:49)
	at org.apache.derbyTesting.junit.ClassLoaderTestSetup.setUp(ClassLoaderTestSetup.java:64)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
{noformat}

CollationTest, CollationTest2, LocalizedAttributeScriptTest and LocalizedDisplayScriptTest have failures, for example:

{noformat}
junit.framework.AssertionFailedError: Column value mismatch @ column 'ID', row 1:
    Expected: >4<
    Found:    >6<

    ID,NAME
    -- ----
   [6, aacorn]
   [4, Acorn]
   [2, Ącorn]
   [0, Smith]
   [5, Śmith]
   [1, Zebra]
   [3, Żebra]

	at org.apache.derbyTesting.junit.BaseTestCase.newAssertionFailedError(BaseTestCase.java:1177)
	at org.apache.derbyTesting.junit.JDBC.addRsToReport(JDBC.java:1998)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1497)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1395)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1257)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1168)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1125)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1083)
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.checkLangBasedQuery(CollationTest.java:2055)
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testNorwayCollation(CollationTest.java:482)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: junit.framework.AssertionFailedError: Column value mismatch @ column 'ID', row 1:
    Expected: >4<
    Found:    >6<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1492)
{noformat}

And the stack trace deletion patterns in the Sed class seem to be missing out on some stack frames now, causing failures like this one in dblook_test and dblook_test_territory:

{noformat}
********* Diff file derbyall/derbytools/dblook_test.diff
*** Start: dblook_test jdk9-ea derbyall:derbytools 2016-03-29 14:16:38 ***
6511a6512
> 	at java.io.FileInputStream.open0(java.base@9-ea/Native Method)
Test Failed.
{noformat}",Major,Knut Anders Hatlen,,2016-03-30T11:44:34.000+0000,Test failures with JDK 9-ea b111,Closed,bug,Bug
2016-02-28T17:32:36.000+0000,DERBY-6875,Fixed,"The download pages have a box for choosing a mirror.

However this is broken - it does not contain a list of mirrors.
This is because the HTML pages are broken.

They should contain something like the following from

http://tomcat.apache.org/download-90.html

{code}
<form action=""[location]"" method=""get"" id=""SelectMirror"">
<p>
       Other mirrors: <select name=""Preferred"">
         [if-any http]
           [for http]<option value=""[http]"">[http]</option>[end]
         [end]
         [if-any ftp]
           [for ftp]<option value=""[ftp]"">[ftp]</option>[end]
         [end]
         [if-any backup]
           [for backup]<option value=""[backup]"">[backup] (backup)</option>[end]
           [end]
         </select><input type=""submit"" value=""Change"">
</p>
</form>
{code}

However they contain:

{code}
<form action=""[location]"" method=""get"" id=""SelectMirror"">Other mirrors: <select name=""Preferred"">
<!--[if-any http] [for http]--><option value=""[http]"">[http]</option>
<!--[end] [end]-->
<!--[if-any ftp] [for ftp]--><option value=""[ftp]"">[ftp]</option>
<!--[end] [end]-->
<!--[if-any backup] [for backup]--><option value=""[backup]"">[backup] (backup)</option>
<!--[end] [end]--></select> <input type=""submit"" value=""Change"">
</form>
{code}

The required templating code has been commented out, so does not work.",Major,Bryan Pendleton,,2016-02-25T19:04:46.000+0000,Partially broken download pages,Closed,bug,Bug
2014-05-30T14:32:20.000+0000,DERBY-6545,Fixed,"According to the 2011 edition of the SQL Standard, the only alterations allowed on identity columns are the following:

1) changing the identity properties of the column

2) causing the column to cease to be an identity column

This is described in part 2, section 11.2 (alter column definition), syntax rule 6. However, Derby allows you to add a default to an identity column. It's clear from the CREATE TABLE syntax that a column can't both have a default and be an identity column. A side-effect of using ALTER TABLE to add a default to an identity column is this: the column ceases to be an identity column. The following script output shows this Derby behavior:

{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t1_01
(
    a int generated always as identity ( start with 10, increment by 20 ),
    b int
);
0 rows inserted/updated/deleted
ij> -- should not succeed but does
alter table t1_01 alter column a default 99;
0 rows inserted/updated/deleted
ij> mainline (1.8) > runsql zzz
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t1_01
(
    a int generated always as identity ( start with 10, increment by 20 )
);
0 rows inserted/updated/deleted
ij> select c.autoincrementvalue, c.autoincrementstart, c.autoincrementinc, c.columndefault
from sys.syscolumns c, sys.systables t
where c.referenceid = t.tableid
and t.tablename = 'T1_01';
AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |COLUMNDEFAULT  
------------------------------------------------------------------------------
10                  |10                  |20                  |NULL           

1 row selected
ij> -- should not succeed but does
alter table t1_01 alter column a default 99;
0 rows inserted/updated/deleted
ij> select c.autoincrementvalue, c.autoincrementstart, c.autoincrementinc, c.columndefault
from sys.syscolumns c, sys.systables t
where c.referenceid = t.tableid
and t.tablename = 'T1_01';
AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |COLUMNDEFAULT  
------------------------------------------------------------------------------
NULL                |NULL                |NULL                |99             

1 row selected
{noformat}

Fixing this deviation from the Standard will create a backward incompatibility. However, it is hard to imagine that any production application relies on this deviation. This is the sort of schema evolution which one tests out in the laboratory or resorts to during an application upgrade. A judicious use of RENAME COLUMN and ALTER TABLE should provide a usable workaround.

For that reason, I think that we should correct this deviation.",Major,Richard N. Hillegas,,2014-04-17T19:16:36.000+0000,Should not be able to add a default to an identity column,Closed,bug,Bug
2014-06-06T20:07:01.000+0000,DERBY-6504,Fixed,"Users have reported databases that will not boot with stack traces showing:
Caused by: java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at org.apache.derby.impl.store.raw.data.AllocPage.ReadContainerInfo(Unknown Source)
at org.apache.derby.impl.store.raw.data.FileContainer.readHeader(Unknown Source)

I suggest the code be changed to catch the out of bounds and turn it
into a StandardException and include as much runtime information as
possible so that the underlying problem can be diagnosed.  Information
should include sizes of both arrays, the amount of data being copied (""N""),
and possibly a hex dump of the source array.
",Major,Myrna van Lunteren,,2014-03-10T23:54:57.000+0000,change AllocPage.ReadContainerInfo to catch ArrayIndexOutOfBoundsException and turn it into Derby error.,Closed,bug,Bug
2014-05-19T17:53:19.000+0000,DERBY-6553,Fixed,"I'm seeing this on trunk:

{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t1(x int, y int, z int);
0 rows inserted/updated/deleted
ij> create table t2(x int, y int, z int);
0 rows inserted/updated/deleted
ij> create sequence seq;
0 rows inserted/updated/deleted
ij> values next value for seq;
1          
-----------
-2147483648

1 row selected
ij> create trigger tr1 after insert on t1 insert into t2(x) values (next value for seq);
ERROR 40XT8: An internal error was identified by RawStore module. Internal state detail from the transaction is as follows: savedEndStatus = 0
needSync = false
justCreated = false
myGlobalId = null
myId = null
state = 0
inComplete = null
seenUpdates = false
inPostCommitProcessing = false
logStart = null
logLast = null
recoveryTransaction = false
postCompleteMode = false
sanityCheck_xaclosed = false
transName = UserTransaction
readOnly = false
flush_log_on_xact_end = true
backupBlocked = false
dontWaitForLocks = false
{noformat}",Major,None,,2014-04-25T10:15:55.000+0000,Sequence generator makes CREATE TRIGGER fail with internal error,Closed,bug,Bug
2014-10-06T16:40:34.000+0000,DERBY-6247,Fixed,"updatelocksJDBC30 test failed intermittently  in nightly regression tests, trunk, ibm16
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1488447-derbyall_diff.txt

********* Diff file derbyall/encryptionAll/storemats/storemats/updatelocksJDBC30.diff
*** Start: updatelocksJDBC30 jdk1.6.0 storemats:storemats 2013-05-31 19:48:20 ***
15110d15109
< APP     |UserTransaction|ROW     |1   |U   |A           |(1,7)     |GRANT|ACTIVE  
15112a15112
> APP     |UserTransaction|ROW     |2   |U   |A           |(1,7)     |GRANT|ACTIVE  
15125d15124
< APP     |UserTransaction|ROW     |1   |U   |A           |(1,7)     |GRANT|ACTIVE  
15129a15129
> APP     |UserTransaction|ROW     |2   |U   |A           |(1,7)     |GRANT|ACTIVE  
15138d15137
< APP     |UserTransaction|ROW     |1   |U   |A           |(1,7)     |GRANT|ACTIVE  
15142a15142
> APP     |UserTransaction|ROW     |2   |U   |A           |(1,7)     |GRANT|ACTIVE  
Test Failed.
*** End:   updatelocksJDBC30 jdk1.6.0 storemats:storemats 2013-05-31 19:48:32 ***

",Major,Myrna van Lunteren,,2013-06-05T17:04:39.000+0000,updatelocksJDBC30 test failing in nightly regression tests,Closed,bug,Bug
2014-10-03T19:35:45.000+0000,DERBY-6342,Fixed,"Don't think this failure has been reported before.

The url for failure is http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/weme6.2/1520721-suites.All_diff.txt

1) testConstraintDrops(org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest)junit.framework.AssertionFailedError: Error 23505 should have been caused by index/constraint 'DROPC_UIX2' but 'DROPC_UIX2' did not appear in the following error message: ""The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'DROPC_UC1' defined on 'DROPC_T2'.""
	at org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.checkStatementError(ConglomerateSharingTest.java:762)
	at org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.testConstraintDrops(ConglomerateSharingTest.java:272)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Knut Anders Hatlen,,2013-09-09T18:33:30.000+0000,failure in testConstraintDrops(org.apache.derbyTesting.functionTests.lang.ConglomerateSharingTest)junit.framework.AssertionFailedError: Error 23505 should have been caused by index/constraint...,Closed,bug,Bug
2014-06-26T21:18:15.000+0000,DERBY-6552,Fixed,"We simplified and cleaned up the public api in 10.11. Now, however, we've lost the javadoc for methods which customers may need to use. For instance, ClientDataSource contains a method called setSsl() which is inherited from ClientBaseDataSourceRoot. But since ClientBaseDataSourceRoot doesn't appear in the public api, there's no method header comment to consult.",Major,Dag H. Wanvik,,2014-04-24T15:05:25.000+0000,The public api includes methods inherited from superclasses which aren't in the public api and so have no javadoc comments,Closed,bug,Bug
2014-10-10T17:50:37.000+0000,DERBY-6440,Fixed,"I noticed during a run of suites.All that one database instance never got garbage collected, even after it had been shut down. It turned out it could not get garbage collected because it was still referenced from the static HashMap _connections in ForeignTableVTI. Looking closer at ForeignTableVTI, it looks as if it only calls put() and get() on the HashMap, never remove(), so its memory footprint will keep increasing as it is used.

It would be good to have some way (preferably automatic) of releasing the resources held by ForeignTableVTI when they are no longer needed.",Major,Richard N. Hillegas,,2013-12-23T18:25:18.000+0000,Connections opened by ForeignTableVTI never get released,Closed,bug,Bug
2014-05-05T13:15:36.000+0000,DERBY-6544,Fixed,"The following error surfaced in the nightly tests on a windows machine with a Swedish locale. See http://download.java.net/javadesktop/derby/request_5589934/

{noformat}
    junit.framework.AssertionFailedError: Column value mismatch @ column '1', row 1:
    Expected: >en<
    Found:    >sv<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testCreateAndQueryIndex(LuceneSupportTest.java:75)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}
",Major,Richard N. Hillegas,,2014-04-16T12:10:50.000+0000,Non-english locale flunks LuceneSupportTest,Closed,bug,Bug
2014-10-14T02:07:44.000+0000,DERBY-6227,Fixed," When working on DERBY-5840, I noticed that GroupedAggregateResultSet would do duplicate elimination by comparing the java.lang.String representation of the values. With territory-based collation, it is possible that two values that have different java.lang.String representation should be considered duplicates, and this logic will produce incorrect results.

Example:

ij version 10.10
ij> connect 'jdbc:derby:memory:db;territory=en_US;collation=TERRITORY_BASED:PRIMARY;create=true';
ij> create table t(i int, s varchar(10));
0 rows inserted/updated/deleted
ij> insert into t values (1, 'a'), (1, 'a'), (2, 'b'), (2, 'B'), (3, 'a'), (3, 'A'), (3, 'b'), (3, 'B'), (3, 'c');
9 rows inserted/updated/deleted
ij> select distinct s from t;
S         
----------
b         
a         
c         

3 rows selected
ij> select i, count(distinct s) from t group by i;
I          |2          
-----------------------
1          |1          
2          |2          
3          |5          

3 rows selected

I would have expected the last query to return

(1, 1)
(2, 1)
(3, 3)",Major,Knut Anders Hatlen,,2013-05-24T11:26:12.000+0000,Distinct aggregates don't work well with territory-based collation,Closed,bug,Bug
2014-10-07T16:29:41.000+0000,DERBY-6543,Fixed,"If a trigger action references a transition variable and has whitespace around the period sign that separates the transition variable name from the column name, it fails with a syntax error.

For example:

{noformat}
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create table t2(x int);
0 rows inserted/updated/deleted
ij> --fails
create trigger tr1 after insert on t1 referencing new as new
for each row insert into t1 select x from t2 where x = new . x;
ERROR 42X01: Syntax error: Encountered ""x"" at line 1, column 150.
Issue the 'help' command for general information on IJ command syntax.
Any unrecognized commands are treated as potential SQL commands and executed directly.
Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.
ij> --succeeds
create trigger tr2 after insert on t1 referencing new as new
for each row insert into t1 select x from t2 where x = new.x;
0 rows inserted/updated/deleted
{noformat}

The only difference between the failing trigger definition and the successful one, is that the former says ""new . x"" and the latter ""new.x"".

Both should succeed.",Major,Knut Anders Hatlen,,2014-04-16T09:25:01.000+0000,Syntax error when reference to transition variable has whitespace around it,Closed,bug,Bug
2014-10-08T18:06:00.000+0000,DERBY-6502,Fixed,"The following error in OnlineCompressTest appeared in the nightly test run on the 10.11 trunk. See http://download.java.net/javadesktop/derby/request_5588473/javadb-task-3816823.html

********* Diff file derbyall/storeall/storemore/OnlineCompressTest.diff
*** Start: OnlineCompressTest jdk1.8.0_05 storeall:storemore 2014-03-07 13:25:17 ***
34 del
< Executing test: delete all rows case succeeded.
35 del
< Executing test: end deleteAllRows,4000 row test.
36 del
< Executing test: begin deleteAllRows,4000 row test, create = false.
37 del
< Executing test: no delete case complete.
38 del
< Executing test: delete all rows case succeeded.
39 del
< Executing test: end deleteAllRows,4000 row test.
40 del
< Executing test: begin checkPurgePhase4000 row test, create = false.
41 del
< Executing test: end checkPurgePhase4000 row test.
42 del
< Ending test: test1
43 del
< Beginning test: test3
44 del
< Executing test: begin deleteAllRows,1 row test, create = true.
45 del
< Executing test: no delete case complete.
46 del
< Executing test: delete all rows case succeeded.
47 del
< Executing test: end deleteAllRows,1 row test.
48 del
< Executing test: begin deleteAllRows,1 row test, create = false.
49 del
< Executing test: no delete case complete.
50 del
< Executing test: delete all rows case succeeded.
51 del
< Executing test: end deleteAllRows,1 row test.
52 del
< Executing test: begin checkPurgePhase1 row test, create = false.
53 del
< Executing test: end checkPurgePhase1 row test.
54 del
< Executing test: begin deleteAllRows,2 row test, create = true.
55 del
< Executing test: no delete case complete.
56 del
< Executing test: delete all rows case succeeded.
57 del
< Executing test: end deleteAllRows,2 row test.
58 del
< Executing test: begin deleteAllRows,2 row test, create = false.
59 del
< Executing test: no delete case complete.
60 del
< Executing test: delete all rows case succeeded.
61 del
< Executing test: end deleteAllRows,2 row test.
62 del
< Executing test: begin checkPurgePhase2 row test, create = false.
63 del
< Executing test: end checkPurgePhase2 row test.
64 del
< Executing test: begin deleteAllRows,50 row test, create = true.
65 del
< Executing test: no delete case complete.
66 del
< Executing test: delete all rows case succeeded.
67 del
< Executing test: end deleteAllRows,50 row test.
68 del
< Executing test: begin deleteAllRows,50 row test, create = false.
69 del
< Executing test: no delete case complete.
70 del
< Executing test: delete all rows case succeeded.
71 del
< Executing test: end deleteAllRows,50 row test.
72 del
< Executing test: begin checkPurgePhase50 row test, create = false.
73 del
< Executing test: end checkPurgePhase50 row test.
74 del
< Ending test: test3
75 del
< Beginning test: test5
76 del
< Executing test: begin test5: 2000 row test.
77 del
< Executing test: end test5: 2000 row test.
78 del
< Executing test: begin test5: 10000 row test.
79 del
< Executing test: end test5: 10000 row test.
80 del
< Ending test: test5
81 del
< Beginning test: test6
82 del
< Executing test: no delete case complete.
83 del
< Executing test: delete all rows case succeeded.
84 del
< Executing test: end simple deleteAllRows,104000 row test.
85 del
< Ending test: test6
86 del
< Beginning test: test7
87 del
< Executing test: delete rows case succeeded.
88 del
< Ending test: test7
88 add
> ERROR 38000: The exception 'java.sql.SQLException: A lock could not be obtained within the time requested' was thrown while evaluating an expression.
> ERROR 40XL1: A lock could not be obtained within the time requested
> java.sql.SQLException: The exception 'java.sql.SQLException: A lock could not be obtained within the time requested' was thrown while evaluating an expression.
> Caused by: ERROR 38000: The exception 'java.sql.SQLException: A lock could not be obtained within the time requested' was thrown while evaluating an expression.
> 	... 15 more
> Caused by: java.sql.SQLException: A lock could not be obtained within the time requested
> 	... 8 more
> Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
> 	... 21 more
Test Failed.
*** End:   OnlineCompressTest jdk1.8.0_05 storeall:storemore 2014-03-07 13:25:35 ***
------------------------------------------------------

",Major,Myrna van Lunteren,,2014-03-07T13:33:18.000+0000,Failure in OnlineCompressTest,Closed,bug,Bug
2014-05-05T11:37:18.000+0000,DERBY-6410,Fixed,"When launching derby bundled with glassfish4 on a substed drive derby fails to startup and logs the following into the derby.log:

{code}
Fri Nov 08 10:30:34 CET 2013 : Sicherheitsmanager mit einfacher Server-Sicherheitsrichtlinie installiert.
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at com.sun.enterprise.admin.cli.optional.DerbyControl.invokeNetworkServerControl(DerbyControl.java:158)
	at com.sun.enterprise.admin.cli.optional.DerbyControl.main(DerbyControl.java:245)
Caused by: java.lang.ExceptionInInitializerError
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.main(Unknown Source)
	... 6 more
Caused by: java.lang.ClassCastException: java.nio.file.FileSystemException cannot be cast to java.lang.RuntimeException
	at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(Unknown Source)
	at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(Unknown Source)
	at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(Unknown Source)
	at org.apache.derby.impl.services.stream.SingleStream.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(Unknown Source)
	at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(Unknown Source)
	at org.apache.derby.impl.services.stream.SingleStream.makeStream(Unknown Source)
	at org.apache.derby.impl.services.stream.SingleStream.boot(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)
	at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Unknown Source)
	at org.apache.derby.impl.services.monitor.FileMonitor.<init>(Unknown Source)
	at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Unknown Source)
	at org.apache.derby.iapi.jdbc.JDBCBoot.boot(Unknown Source)
	at org.apache.derby.jdbc.EmbeddedDriver.boot(Unknown Source)
	at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(Unknown Source)
	... 12 more
{code}

Derby was started via the glassfish command:
{code}
$ asadmin start-database
{code}

The asadmin command only fails if it is launched from a substed windows drive. The substed drive was created with the following command:
{code}
$ subst d: c:\d
{code}

When derby is started from drive 'C' everything is fine.",Minor,Knut Anders Hatlen,,2013-11-08T10:02:18.000+0000,ClassCastException when launching derby from windows subst drive,Closed,bug,Bug
2014-05-05T13:12:22.000+0000,DERBY-6538,Fixed,"We're seeing the following error in this test case during the nightly run on windows machines:

    junit.framework.ComparisonFailure: expected:<[John Milto]n> but was:<[Walt Whitma]n>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertResults(BaseJDBCTestCase.java:1741)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertResults(BaseJDBCTestCase.java:1705)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_006_changeAnalyzer(LuceneSupportPermsTest.java:550)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
",Major,None,,2014-04-03T12:14:42.000+0000,Error in LuceneSupportPermsTest.test_006_changeAnalyzer on windows,Closed,bug,Bug
2014-10-08T18:19:37.000+0000,DERBY-6518,Fixed,"JVMInfo uses parseFloat() to parse the java.specification.version property. That won't work correctly if the minor version has more than one digit. It should order the versions like this:

1.7 < 1.8 < 1.9 < 1.10 < 1.11

With parseFloat(), they are ordered like this instead:

1.10 < 1.11 < 1.7 < 1.8 < 1.9

The result is that newer Java versions will be classified as older, less capable ones, and some functionality might be disabled because Derby thinks the platform is not capable of providing it.",Major,Knut Anders Hatlen,,2014-03-18T10:08:55.000+0000,JVMInfo should not use parseFloat() to parse java.specification.version,Closed,bug,Bug
2014-10-21T14:35:04.000+0000,DERBY-6305,Fixed,"The topic ""Optimizer overrides"" in the Tuning Derby manual talks about using the ""-- DERBY-PROPERTIES"" clause to specify overrides but doesn't include a link to the topic later in the manual, ""Overriding the default optimizer behavior"", that explains how to use the clause. This undoubtedly results in user confusion.

The first topic is http://db.apache.org/derby/docs/10.10/tuning/ctundepthoptover.html; the second is http://db.apache.org/derby/docs/10.10/tuning/ctunoptimzoverride.html.

I'll add the link, and I welcome additional suggestions on how to improve these topics.",Major,Camilla Haase,,2013-07-25T15:49:24.000+0000,Tuning Derby information on optimizer overrides needs improvement,Closed,bug,Bug
2014-05-05T13:14:02.000+0000,DERBY-6539,Fixed,"See http://download.java.net/javadesktop/derby/request_5589457/. The tests passed cleanly on the same platform with Java 7 and Java 8 but there are diffs on Java 6. The first error in LuceneSupportTest has this stack trace:

{noformat}
    junit.framework.AssertionFailedError: Column value mismatch @ column 'RANK', row 1:
    Expected: >0.8048013<
    Found:    >0.643841<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testCreateAndQueryIndex(LuceneSupportTest.java:72)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}

The first error in LuceneSupportPermsTest has this stack trace:

{noformat}
    junit.framework.ComparisonFailure: expected:<0.[22933942]> but was:<0.[19111618]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertResults(BaseJDBCTestCase.java:1741)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertResults(BaseJDBCTestCase.java:1705)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_001_basicNoGrant(LuceneSupportPermsTest.java:197)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}
",Major,None,,2014-04-06T13:01:37.000+0000,Wrong rank value in LuceneSupportTest and LuceneSupportPermsTest,Closed,bug,Bug
2014-04-30T21:05:15.000+0000,DERBY-6352,Fixed,"I got a report of the following intermittent (6/60) exception in store.RecoveryAfterBackupTest.
Exception in thread ""main"" java.security.AccessControlException: Access denied (""java.lang.RuntimePermission"" ""modifyThread"")
		 at java.security.AccessController.throwACE(AccessController.java:100)
		 at java.security.AccessController.checkPermission(AccessController.java:174)
		 at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
		 at java.lang.SecurityManager.checkAccess(SecurityManager.java:676)
		 at java.lang.Thread.checkAccess(Thread.java:459)
		 at java.lang.Thread.interrupt(Thread.java:588)
		 at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)
		 at java.security.AccessController.doPrivileged(AccessController.java:274)
		 at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)
		 at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Unknown Source)
		 at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)
		 at org.apache.derby.jdbc.Driver20.connect(Unknown Source)
		 at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)
		 at java.sql.DriverManager.getConnection(DriverManager.java:571)
		 at java.sql.DriverManager.getConnection(DriverManager.java:233)
		 at org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(TestUtil.java:836)
		 at org.apache.derbyTesting.functionTests.tests.store.RecoveryAfterBackup.main(RecoveryAfterBackup.java:82)


modifyThread is a necessary permission if interrupting a thread other than the current thread but is not in our policy file for derby.jar.

The relevant code in ContextService is:
           for (ContextManager cm : allContexts) {

				Thread active = cm.activeThread;

				if (active == me)
					continue;

				if (active == null)
					continue;

                final Thread fActive = active;
				if (cm.setInterrupted(c))
                {
                    AccessController.doPrivileged(
                            new PrivilegedAction<Void>() {
                                public Void run()  {
                                    fActive.interrupt();
                                    return null;
                                }
                            });
                }
		
I am not sure why this has never come up before.  Are we expecting in this context that fActive is the current thread?

 ",Major,Myrna van Lunteren,,2013-09-25T12:55:25.000+0000,"Access denied (""java.lang.RuntimePermission"" ""modifyThread"") highly intermittent, but e.g. in store.RecoveryAfterBackup test",Closed,bug,Bug
2014-05-19T17:32:05.000+0000,DERBY-6554,Fixed,"{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true' as c1;
ij> autocommit off;
ij> create sequence seq;
0 rows inserted/updated/deleted
ij> values next value for seq;
1          
-----------
ERROR X0Y84: Too much contention on sequence SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a query generator.
ij> rollback;
ERROR 08003: No current connection.
ij> connect 'jdbc:derby:memory:db' as c2;
ij(C2)> autocommit off;
ij(C2)> create sequence seq;
0 rows inserted/updated/deleted
ij(C2)> values next value for seq;
1          
-----------
ERROR 38000: The exception 'org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Identity being changed on a live cacheable. Old uuidString = 0ddd00a9-0145-98ba-79df-000007d88b08' was thrown while evaluating an expression.
ERROR XJ001: Java exception: 'ASSERT FAILED Identity being changed on a live cacheable. Old uuidString = 0ddd00a9-0145-98ba-79df-000007d88b08: org.apache.derby.shared.common.sanity.AssertFailure'.
{noformat}",Major,None,,2014-04-25T11:53:41.000+0000,Too much contention followed by assert failure when accessing sequence in transaction that created it,Closed,bug,Bug
2014-11-18T22:37:23.000+0000,DERBY-6503,Fixed,"Starting a network server on a network drive with JDK 7 on Windows fails. The reported exception is a ClassCastException, but the underlying exception is the following:

java.nio.file.AccessDeniedException: \\host\path\derby.log
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)
	at sun.nio.fs.WindowsAclFileAttributeView.setAcl(WindowsAclFileAttributeView.java:221)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(FileUtil.java:897)
	at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(FileUtil.java:747)
	at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(SingleStream.java:205)
	at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:401)
	at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:72)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(SingleStream.java:394)
	at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(SingleStream.java:356)
	at org.apache.derby.impl.services.stream.SingleStream.makeStream(SingleStream.java:132)
	at org.apache.derby.impl.services.stream.SingleStream.boot(SingleStream.java:92)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)
	at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:362)
	at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:343)
	at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58)
	at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285)
	at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67)
	at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:199)
	at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:95)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:188)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1032)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:732)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2277)
	at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:353)",Major,Knut Anders Hatlen,,2014-03-07T15:26:30.000+0000,Starting network server on a network drive fails with JDK 7 on Windows,Closed,bug,Bug
2014-09-29T18:53:29.000+0000,DERBY-6515,Fixed,"ij has a command to set the default holdability for a connection:

Connection#setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT)

called ""noholdforconnection"". I think it should be documented and included in the inline help menu.
",Minor,Myrna van Lunteren,,2014-03-17T15:05:51.000+0000,ij doesn't list its command NoHoldForConnection in the help menu,Closed,bug,Bug
2014-09-18T22:16:40.000+0000,DERBY-6112,Fixed,"In starting a server with SSL as in SSLTest if serverSocket.accept() fails for some reason other than an IOException  it may just print the error to console and hang.  In this case it was:
java.security.AccessControlException: Access denied (java.util.PropertyPermission


I saw this when debugging a java  issue in serverSocket.accept() but I think it could be simulated by adding an unwrapped System.getProperty() of some sort before serverSocket.accept() to force a  permission error. e.g. 

         System.getProperty(""derby.system.home"");
         return serverSocket.accept();
                            } catch (IOException acceptE) {

I have not verified that would work.
",Major,Myrna van Lunteren,,2013-03-18T20:47:25.000+0000,SSL Test (and network server )  can hang if serverSocket.accept() fails for something other than an IOException,Closed,bug,Bug
2014-11-12T20:29:21.000+0000,DERBY-5615,Fixed,"I get an NPE trying to select from a table on which I don't have select privilege. The database is stored in a jar file accessed via the classpath protocol. BUILTIN authentication and sql authorization are turned on in the database. Running under a Java security manager. I will attach a repro. Here is the NPE:

Failed Statement is: select * from KIWI.t
java.lang.NullPointerException
	at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:661)
	at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:591)
	at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Xact.java:1316)
	at org.apache.derby.impl.store.access.btree.OpenBTree.init(OpenBTree.java:380)
	at org.apache.derby.impl.store.access.btree.BTreeController.init(BTreeController.java:1250)
	at org.apache.derby.impl.store.access.btree.index.B2IController.init(B2IController.java:140)
	at org.apache.derby.impl.store.access.btree.index.B2I.open(B2I.java:821)
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:476)
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1308)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(DataDictionaryImpl.java:9584)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndexMinion(DataDictionaryImpl.java:9492)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:9303)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2887)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2851)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.finishTableDescriptor(DataDictionaryImpl.java:2408)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex1Scan(DataDictionaryImpl.java:2277)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(DataDictionaryImpl.java:2293)
	at org.apache.derby.impl.sql.catalog.NameTDCacheable.setIdentity(NameTDCacheable.java:110)
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(DataDictionaryImpl.java:2224)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(DataDictionaryImpl.java:9905)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getNonCoreTI(DataDictionaryImpl.java:9702)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermissionsDescriptor(DataDictionaryImpl.java:13712)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTablePermsDescriptor(DataDictionaryImpl.java:13660)
	at org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(PermissionsCacheable.java:71)
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissions(DataDictionaryImpl.java:13364)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTablePermissions(DataDictionaryImpl.java:13350)
	at org.apache.derby.iapi.sql.dictionary.StatementTablePermission.oneAuthHasPermissionOnTable(StatementTablePermission.java:239)
	at org.apache.derby.iapi.sql.dictionary.StatementTablePermission.hasPermissionOnTable(StatementTablePermission.java:160)
	at org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(StatementColumnPermission.java:99)
	at org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(GenericAuthorizer.java:183)
	at org.apache.derby.exe.ac40348015x0135x7cc7x4621x0000040700000.fillResultSet(Unknown Source)
	at org.apache.derby.exe.ac40348015x0135x7cc7x4621x0000040700000.execute(Unknown Source)
	at org.apache.derby.impl.sql.GenericActivationHolder.execute(GenericActivationHolder.java:353)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:441)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:372)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
Cleanup action completed
",Major,Knut Anders Hatlen,,2012-02-14T17:02:56.000+0000,"NPE in Store  when running SELECT in a read-only database accessed via the classpath subprotocol when authentication, authorization, and Java security are turned on",Closed,bug,Bug
2014-10-13T18:44:07.000+0000,DERBY-6370,Fixed,"dblook doesn't qualify identifiers in the trigger action if they weren't explicitly qualified in the original CREATE TRIGGER statement.

Example:

ij version 10.10
ij> connect 'jdbc:derby:db;create=true';  
ij> create table s1.t1(x int);
0 rows inserted/updated/deleted
ij> create table s2.t2(x int);
0 rows inserted/updated/deleted
ij> set schema s1;
0 rows inserted/updated/deleted
ij> create trigger tr1 after insert on t1 insert into s2.t2 select * from t1;
0 rows inserted/updated/deleted
ij> set schema s2;
0 rows inserted/updated/deleted
ij> create trigger tr2 after insert on s1.t1 insert into t2 select * from s1.t1;
0 rows inserted/updated/deleted
ij> exit;

Then run dblook on the created database:

-- Timestamp: 2013-10-04 12:46:14.974
-- Source database is: db
-- Connection URL is: jdbc:derby:db
-- appendLogs: false

-- ----------------------------------------------
-- DDL Statements for schemas
-- ----------------------------------------------

CREATE SCHEMA ""S1"";

CREATE SCHEMA ""S2"";

-- ----------------------------------------------
-- DDL Statements for tables
-- ----------------------------------------------

CREATE TABLE ""S1"".""T1"" (""X"" INTEGER);

CREATE TABLE ""S2"".""T2"" (""X"" INTEGER);

-- ----------------------------------------------
-- DDL Statements for triggers
-- ----------------------------------------------

CREATE TRIGGER ""S1"".""TR1"" AFTER INSERT ON ""S1"".""T1"" FOR EACH STATEMENT insert into s2.t2 select * from t1;

CREATE TRIGGER ""S2"".""TR2"" AFTER INSERT ON ""S1"".""T1"" FOR EACH STATEMENT insert into t2 select * from s1.t1;


dblook should either qualify all identifiers in the trigger actions, or contain SET SCHEMA statements before each of the CREATE TRIGGER statements to ensure the correct implicit schema is chosen.",Major,Knut Anders Hatlen,,2013-10-04T10:55:36.000+0000,dblook doesn't schema-qualify identifiers in trigger actions,Closed,bug,Bug
2014-05-15T14:53:55.000+0000,DERBY-6537,Fixed,"The javadoc for StringUtil.fromHexString states that its intended use is to ""Convert a hexidecimal string generated by toHexString() back into a byte array"", and that null is returned if the length of the hex-string is not even. 

But in JCECipherFactory.init() it is being used to convert the encryptionKey property string to byte[]. For this usage such a restriction makes no sense, and is confusing as it is not documented (at least not in the dev guide chapter about encrypting databases).

For this usage it would be better to use 
new BigInt(encryptionKey,16).toByteArray() which would not have this restriction. But even with this change the documentation should probably be updated to state that the value for the key must be a valid hex-string, as that is what it will be interpreted as. The first section of the doc should probably also mention that DES is the default algo, and what its minimum key length requirements are (now you need to look at the section about specifying an alternate algo, to find that).",Minor,Camilla Haase,,2014-04-02T13:45:38.000+0000,StringUtil.fromHexString is used to convert encryptionKey to byte[],Closed,bug,Bug
2014-10-14T21:52:22.000+0000,DERBY-6540,Fixed,"ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table new(x int);
0 rows inserted/updated/deleted
ij> create table t(y int);
0 rows inserted/updated/deleted
ij> create trigger tr1 after insert on t referencing new table as new select x from app.new;
ERROR 42X04: Column 'X' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then 'X' is not a column in the target table.

The error message here is wrong. Column X does exist in APP.NEW, so the CREATE TRIGGER statement should have succeeded.",Major,Knut Anders Hatlen,,2014-04-09T09:45:57.000+0000,Schema-qualified table names could be mistaken for transition tables,Closed,bug,Bug
2014-06-11T08:04:00.000+0000,DERBY-6025,Fixed,"The sequence below shows that a query returns 1 row when there is no index on the table, and it returns 0 rows when an index is created. It should return 1 row regardless of the index's presence.

ij version 10.9
ij> connect 'jdbc:derby:memory:colldb;create=true;territory=no;collation=TERRITORY_BASED';
ij> create table t(x varchar(40));
0 rows inserted/updated/deleted
ij> insert into t values 'Stranda Idrottslag', 'Aalesunds Fotballklubb';
2 rows inserted/updated/deleted
ij> select * from t where x in ('Aalesunds Fotballklubb', cast('xyz' as char(3)));
X                                       
----------------------------------------
Aalesunds Fotballklubb                  

1 row selected
ij> create index i on t(x);
0 rows inserted/updated/deleted
ij> select * from t where x in ('Aalesunds Fotballklubb', cast('xyz' as char(3)));
X                                       
----------------------------------------

0 rows selected",Major,Mamta A. Satoor,,2012-12-21T11:00:35.000+0000,Wrong results with IN lists and indexes in territory based collation,Closed,bug,Bug
2014-06-12T08:56:24.000+0000,DERBY-5824,Fixed,"This failure was reported running suites.All on HP. Read only database is apparently not read only.


1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: expected an error indicating the db is readonly
        at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.assertExpectedInsertBehaviour(OSReadOnlyTest.java:261)
        at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:139)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to copy directory from /local1/derbytest/test/system/singleUse/oneuse4b to /local1/derbytest/test/system/singleUse/readOnly
        at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.copyDatabaseOnOS(OSReadOnlyTest.java:282)
        at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:131)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)

FAILURES!!!
Tests run: 11145,  Failures: 2,  Errors: 0

bash-4.0#",Major,Knut Anders Hatlen,,2012-06-20T18:00:57.000+0000,testOSReadOnly fails with k.AssertionFailedError: expected an error indicating the db is readonly on HP java 1.6,Closed,bug,Bug
2014-05-30T14:54:42.000+0000,DERBY-6434,Fixed,"This issue is a place to address problems with INSERT and DELETE statements similar to the problems affecting UPDATE statements recorded on DERBY-6429. In particular, DERBY-6432 and DERBY-6433 list some of the problems with INSERT statements.",Major,Richard N. Hillegas,,2013-12-12T20:25:59.000+0000,Incorrect privileges may be required for INSERT and DELETE statements.,Closed,bug,Bug
2014-10-22T18:15:04.000+0000,DERBY-6496,Fixed,"For reasons which elude me, the CompilerContext is sometimes available at execution time and sometimes not. When the CompilerContext is not available at execution time, optional tool loading fails on an NPE:

Caused by: java.lang.NullPointerException
	at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Java5SystemProcedures.java:104)
	at org.apache.derby.exe.ac4d3680a5x0144x93adx0136xffffe1d7aa3e0.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
",Major,Richard N. Hillegas,,2014-03-05T19:24:22.000+0000,Optional tool registration may fail because the CompilerContext is not always available at execution time.,Closed,bug,Bug
2014-11-13T02:48:05.000+0000,DERBY-6228,Fixed,"Here's a minimal program to reproduce the issue:

        Connection c = DriverManager.getConnection(
            ""jdbc:derby://localhost:1527/test;create=true"", ""TEST"", ""TEST"");
        Statement s = c.createStatement();
        s.executeUpdate(
            ""CREATE TABLE t("" +
                ""id INT NOT NULL, "" +
                ""c CLOB"" +
            "")"");
        s.executeUpdate(""INSERT INTO t VALUES (1, null)"");
        s.executeUpdate(""INSERT INTO t VALUES (2, null)"");
        PreparedStatement stmt = c.prepareStatement(
            ""SELECT * FROM t ORDER BY id"",
            ResultSet.TYPE_SCROLL_INSENSITIVE,
            ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = stmt.executeQuery();
        rs.next();

The above leads to this exception:

java.sql.SQLNonTransientConnectionException: Netzwerkprotokollausnahme: DSS-Länge ist beim Beenden des Parsing-Vorgangs der ID-Kette größer als 0. Die Verbindung wurde beendet.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.ResultSet.next(Unknown Source)
	at org.jooq.test._.testcases.KeepResultSetTests.testKeepRSWithUpdateOnChangeLazy(KeepResultSetTests.java:330)
	at org.jooq.test.jOOQAbstractTest.testKeepRSWithUpdateOnChangeLazy(jOOQAbstractTest.java:2240)
        ...
Caused by: org.apache.derby.client.am.DisconnectException: Netzwerkprotokollausnahme: DSS-Länge ist beim Beenden des Parsing-Vorgangs der ID-Kette größer als 0. Die Verbindung wurde beendet.
	at org.apache.derby.client.net.Reply.endOfSameIdChainData(Unknown Source)
	at org.apache.derby.client.net.NetResultSetReply.readPositioningFetch(Unknown Source)
	at org.apache.derby.client.net.ResultSetReply.readPositioningFetch(Unknown Source)
	at org.apache.derby.client.net.NetResultSet.readPositioningFetch_(Unknown Source)
	at org.apache.derby.client.am.ResultSet.getRowCount(Unknown Source)
	at org.apache.derby.client.am.ResultSet.resultSetContainsNoRows(Unknown Source)
	at org.apache.derby.client.am.ResultSet.getNextRowset(Unknown Source)
	at org.apache.derby.client.am.ResultSet.nextX(Unknown Source)
	... 30 more

To reproduce the above, all of the following things seem relevant:

1. There is at least one BLOB or CLOB column being selected
2. An ORDER BY clause is added
3. ResultSet.TYPE_SCROLL_SENSITIVE or ResultSet.TYPE_SCROLL_INSENSITIVE is set
4. ResultSet.CONCUR_UPDATABLE is set",Major,Dyre Tjeldvoll,,2013-05-24T16:36:37.000+0000,DisconnectException when executing an SELECT [LOB column] ORDER BY [...] statement with TYPE_SCROLL_[IN]SENSITIVE and CONCUR_UPDATABLE,Closed,bug,Bug
2014-10-01T04:20:14.000+0000,DERBY-6414,Fixed,"Derby violates the SQL Standard when an UPDATE statement SETs an identity column to the value DEFAULT. Derby does the right thing for INSERTs, however.

For INSERTs, the 2011 Standard defines the meaning of DEFAULT in part 2, section 15.10 (Effect of inserting tables into base tables), general rule 2. For INSERTs, the DEFAULT value is the next value of the sequence generator which defines the identity column.

For UPDATEs, the 2011 Standard defines the meaning of DEFAULT in part 2, section 15.13 (Effect of replacing rows in base tables), general rule 5. For UPDATEs, the DEFAULT value is also the next value of the sequence generator which defines the identity column.

Note also that the 2011 Standard says that a GENERATED ALWAYS identity column can be SET to DEFAULT. Furthermore, that is the only explicit value accepted. See the 2011 Standard, part 2, section 14.15 (set clause list), syntax rule 5:

{
""If <set clause> SC specifies an <object column> that references a column of which some underlying column is either a generated column or an identity column whose descriptor indicates that values are always generated, then the <update source> specified in SC shall consist of a <default specification>.""
}

What Derby actually does for UPDATEs is the following:

1) If the column was declared GENERATED ALWAYS, then Derby raises a compile-time error saying that the value of an identity column can't be overridden.

2) If the column was declared GENERATED BY DEFAULT, then Derby raises an execution time-error when trying to stuff a null into the column.

Correcting this bug would result in backwardly incompatible behavior. However, I think that the incompatibility is minor: it would mean the successful run of statements which previously raised errors.

I tripped across this problem while implementing the UPDATE action of the MERGE statement (DERBY-3155). If we decide to fix this bug, we will want to make sure that the UPDATE actions of MERGE statements also correctly handle DEFAULT values for identity columns.

The following script shows this problem:

connect 'jdbc:derby:memory:db;create=true';

create table t1( a int generated always as identity, b int );
create table t2( a int generated by default as identity, b int );

insert into t1( a, b ) values ( default, 100 );
insert into t2( a, b ) values ( default, 100 );

update t1 set a = default;
update t2 set a = default;

select * from t1;
select * from t2;
",Major,Mamta A. Satoor,,2013-11-12T15:48:11.000+0000,Incorrect handling when using an UPDATE to SET an identity column to DEFAULT,Closed,bug,Bug
2014-10-06T18:35:56.000+0000,DERBY-6269,Fixed,"If you try to create an index on a column which defines a unique constraint, the index is not created. That's fine. But you get a misleading warning suggesting that the index was created. We should correct the warning text so that it says that an index was not created. We should also consider making this situation an error, not a warning.

This issue is probably related to DERBY-655 and DERBY-1343.

Here is a script which shows this problem:

ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t( a int unique, b int );
0 rows inserted/updated/deleted
ij> -- raises a warning suggesting that a new index has been created
create index t_1 on t( a );
0 rows inserted/updated/deleted
WARNING 01504: The new index is a duplicate of an existing index: SQL130618085719940.
ij> -- only the heap and the constraint exist
select isIndex, conglomerateName, conglomerateID from sys.sysconglomerates c, sys.systables t
where t.tableid = c.tableid and t.tablename = 'T';
ISIN&|CONGLOMERATENAME                                                                                                                |CONGLOMERATEID                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
false|45b300a8-013f-5801-226b-000003b53310                                                                                            |0ddd00a9-013f-5801-226b-000003b53310
true |SQL130618085719940                                                                                                              |f55fc0a6-013f-5801-226b-000003b53310

2 rows selected
ij> -- fails because a new index wasn't really created
drop index t_1;
ERROR 42X65: Index 'T_1' does not exist.
ij> select isIndex, conglomerateName, conglomerateID from sys.sysconglomerates c, sys.systables t
where t.tableid = c.tableid and t.tablename = 'T';
ISIN&|CONGLOMERATENAME                                                                                                                |CONGLOMERATEID                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
false|45b300a8-013f-5801-226b-000003b53310                                                                                            |0ddd00a9-013f-5801-226b-000003b53310
true |SQL130618085719940                                                                                                              |f55fc0a6-013f-5801-226b-000003b53310

2 rows selected
",Major,Mamta A. Satoor,,2013-06-18T16:02:29.000+0000,Misleading warning text if you create an index duplicating a constraint.,Closed,bug,Bug
2014-05-27T20:32:45.000+0000,DERBY-6547,Fixed,"When I run the upgrade tests with 10.10.2.0 as the starting point, I see the following error. I don't see this error when the starting point is 10.10.1.1. This may suggest that 10.10.2.0 has not been added as a starting point for the upgrade tests in the nightly/continuous-integration test runs.

{noformat}
1) testDERBY5120NumRowsInSydependsForTrigger(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.AssertionFailedError: Expected error(s) ' 42802' but no error was thrown.
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementErrorMinion(BaseJDBCTestCase.java:1194)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1145)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1228)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testDERBY5120NumRowsInSydependsForTrigger(BasicSetup.java:514)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}
",Major,Mamta A. Satoor,,2014-04-22T15:52:57.000+0000,testDERBY5120NumRowsInSydependsForTrigger fails when the starting version of the upgrade trajectory is 10.10.2.0,Closed,bug,Bug
2014-05-30T14:34:26.000+0000,DERBY-6511,Fixed,java.lang.NoSuchMethodError is raised when calling a procedure which takes an Integer argument and passing it the result of a function which returns an int. The error is raised in generated code.,Major,Richard N. Hillegas,,2014-03-14T17:53:45.000+0000,java.lang.NoSuchMethodError chaining a function and procedure,Closed,bug,Bug
2014-05-24T05:46:41.000+0000,DERBY-6337,Fixed,"On Windows on IBM JVM with 
IBM_JAVA_OPTIONS=-Xgcpolicy:optthruput -Xjit:count=0 -Xnocompressedrefs

derbynet.ServerPropertiesTest prints the exception:
(net)derbynet.ServerPropertiesTest.ttestSetPortPriority java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f
rom network server: Insufficient data.
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
        at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
        at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:613)
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.
java:280)
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerProperti
esTest.java:476)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:607)
        at junit.framework.TestCase.runTest(TestCase.java:164)
        at junit.framework.TestCase.runBare(TestCase.java:130)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
        at junit.framework.TestResult$1.protect(TestResult.java:106)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.framework.TestResult.run(TestResult.java:109)
        at junit.framework.TestCase.run(TestCase.java:120)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.framework.TestSuite.runTest(TestSuite.java:230)
        at junit.framework.TestSuite.run(TestSuite.java:225)
        at junit.textui.TestRunner.doRun(TestRunner.java:121)
        at junit.textui.TestRunner.start(TestRunner.java:185)
        at junit.textui.TestRunner.main(TestRunner.java:143)
java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
        at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
        at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
        at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:613)
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.
java:280)
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest
.java:309)
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerProperti
esTest.java:483)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:607)
        at junit.framework.TestCase.runTest(TestCase.java:164)
        at junit.framework.TestCase.runBare(TestCase.java:130)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
        at junit.framework.TestResult$1.protect(TestResult.java:106)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.framework.TestResult.run(TestResult.java:109)
        at junit.framework.TestCase.run(TestCase.java:120)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.framework.TestSuite.runTest(TestSuite.java:230)
        at junit.framework.TestSuite.run(TestSuite.java:225)
        at junit.textui.TestRunner.doRun(TestRunner.java:121)
        at junit.textui.TestRunner.start(TestRunner.java:185)
        at junit.textui.TestRunner.main(TestRunner.java:143)
used 53367 ms .
(net)derbynet.ServerPropertiesTest.ttestDefaultProperties used 387 ms .
(net)derbynet.ServerPropertiesTest.testToggleTrace used 34428 ms .
(net)derbynet.ServerPropertiesTest.testToggleLogConnections used 34064 ms
Time: 157.034

OK (4 tests)

but the test passes.


",Major,Mamta A. Satoor,,2013-09-05T19:32:28.000+0000,derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception  java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes,Closed,bug,Bug
2014-05-15T14:29:53.000+0000,DERBY-6527,Fixed,"Cf this email thread: http://apache-database.10148.n7.nabble.com/Foreign-key-semantics-as-documented-td138227.html

Our documentation in the reference manual on foreign keys/referential actions has errors.",Major,Camilla Haase,,2014-03-24T23:14:57.000+0000,Fix errors in foreign keys documentation,Closed,bug,Bug
2014-05-15T14:11:58.000+0000,DERBY-6462,Fixed,"Except for initial Windows drive letters (e.g. K:/derby), colons break Derby.
Windows can't have colons in directory of file names, so this is a Unix issue.
[http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx#file_and_directory_names]

",Major,Camilla Haase,,2014-01-30T19:16:36.000+0000,Provide more information about database name and path syntax,Closed,bug,Bug
2014-10-10T17:48:28.000+0000,DERBY-6423,Fixed,"This syntax gives an error:

{noformat}
> VALUES CASE WHEN 1=1 THEN (1=2) OR (3!=4) ELSE true END;
ERROR 42X01: Syntax error: Encountered ""OR"" at line 1, column 33.
{noformat}

However, this works:

{noformat}
> VALUES CASE WHEN 1=1 THEN ((1=2) OR (3!=4)) ELSE true END;
1    
-----
true 
1 row selected
{noformat}

According to the standard, the syntax after THEN should be <result>:

{noformat}
<result> ::=
   <result expression>
   | NULL

<result expression> ::=
   <value expression>
{noformat}

which should give us the full value syntax. sqlgrammar.jj uses the corresponding production ""thenElseExpression"" which allows NULL or aditiveExpression. I believe it should be orExpression.",Major,Knut Anders Hatlen,,2013-11-27T14:54:19.000+0000,The expression syntax in CASE's THEN clause doesn't accept boolean value expression,Closed,bug,Bug
2014-03-05T13:49:39.000+0000,DERBY-6378,Fixed,"ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t(x int);
0 rows inserted/updated/deleted
ij> insert into t values 1,2,3;
3 rows inserted/updated/deleted
ij> select * from t offset 1 row fetch first 1 row only;
X          
-----------
2          

1 row selected
ij> (select * from t offset 1 row fetch first 1 row only);
X          
-----------
1          
2          
3          

3 rows selected

I would have expected that both of the queries had returned a single row.",Major,Dag H. Wanvik,,2013-10-15T14:12:45.000+0000,OFFSET/FETCH NEXT ignored when query is enclosed in parentheses,Closed,bug,Bug
2014-02-06T17:58:04.000+0000,DERBY-6437,Fixed,"Following failure on junit test runs on trunk(revision 1551810) with IBM jdk 1.7. Didn't find it logged in jira so might be a new failure
testLockingWithRollback(org.apache.derbyTesting.functionTests.tests.lang.ConstraintCharacteristicsTest)junit.framework.AssertionFailedError: isolation levels: 4 2

1) testLockingWithRollback(org.apache.derbyTesting.functionTests.tests.lang.ConstraintCharacteristicsTest)junit.framework.AssertionFailedError: isolation levels: 4 2
	at org.apache.derbyTesting.functionTests.tests.lang.ConstraintCharacteristicsTest.executeThreads(ConstraintCharacteristicsTest.java:1329)
	at org.apache.derbyTesting.functionTests.tests.lang.ConstraintCharacteristicsTest.testLockingWithRollback(ConstraintCharacteristicsTest.java:1276)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)",Major,Myrna van Lunteren,,2013-12-19T01:53:39.000+0000,ConstraintCharachteristicsTest testLockingWithRollback or testLockingWithCommit failing on trunk with AssertionFailedError - isolation levels ...,Closed,bug,Bug
2014-02-10T16:10:50.000+0000,DERBY-5866,Fixed,"I saw this failure in the IBM nightlies on 7/15. The subsequent night did not fail, so appears intermittent

http://cloudsoft.usca.ibm.com/intranet/nightlies/derbywinvm/JarResults.2012-07-15/ibm16_suites.All/suites.All.out

1) testFiringConstraintOrder(org.apache.derbyTesting.functionTests.tests.lang.TriggerTest)junit.framework.AssertionFailedError: matching triggers need to be fired in order creation:1,NO CASCADE BEFORE,DELETE,ROW
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.assertFiringOrder(TriggerTest.java:560)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testFiringConstraintOrder(TriggerTest.java:500)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Knut Anders Hatlen,,2012-07-19T13:41:39.000+0000," testFiringConstraintOrder(org.apache.derbyTesting.functionTests.tests.lang.TriggerTest)junit.framework.AssertionFailedError: matching triggers need to be fired in order creation:1,NO CASCADE BEFORE,DELETE,ROW",Closed,bug,Bug
2014-02-10T18:57:46.000+0000,DERBY-5630,Fixed,"I've seen this test fail twice recently, once with ibm 1.6, once with 1.4.2, both times on the same machine (which is running 10.8 nightly testing):

The diff is as follows:
51a52,61
> ij(C1)> commit;
> ij(C1)> call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.locks.waitTimeout', '180');
> 0 rows inserted/updated/deleted
> ij(C1)> commit;
> ij(C1)> set connection c2 ;
> ij(C2)> wait for C2S1;
> 3 rows inserted/updated/deleted
> ij(C2)> select state from syscs_diag.lock_table order by state;
> STATE
> -----
53,63d62
< WAIT 
< ij(C1)> commit;
< ij(C1)> call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.locks.waitTimeout', '180');
< 0 rows inserted/updated/deleted
< ij(C1)> commit;
< ij(C1)> set connection c2 ;
< ij(C2)> wait for C2S1;
< 3 rows inserted/updated/deleted
< ij(C2)> select state from syscs_diag.lock_table order by state;
< STATE
< -----
67d65
< GRANT",Major,Myrna van Lunteren,,2012-02-24T18:58:16.000+0000,intermittent test failure in store/lockTableVTI.sql,Closed,bug,Bug
2014-03-20T21:04:23.000+0000,DERBY-6374,Fixed,"The constraint can be subverted using e.g. call SYSCS_UTIL.SYSCS_IMPORT_TABLE, cf. the below script:

test.sql:
   connect 'jdbc:derby:memory:wombat;create=true';
   create table t_unique_nullable(i int, j int, constraint c_unique_n unique(i));
   call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('APP', 'T_UNIQUE_NULLABLE', 'test.data', '|', '`', null, 1);
   select * from t_unique_nullable;
   create table t_unique(i int not null, j int, constraint c_unique unique(i));
   call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('APP', 'T_UNIQUE', 'test.data', '|', '`', null, 1);

which fails in the second import, but not the first one, given this data file:

test.data
   1 | 1
   1 | 1
   2 | 2


run:
   ij version 10.11
   ij> connect 'jdbc:derby:memory:wombat;create=true';
   ij> autocommit off;
   ij> create table t_unique_nullable(i int, j int, constraint c_unique_n unique(i));
   0 rows inserted/updated/deleted
   ij> call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('APP', 'T_UNIQUE_NULLABLE', 'test.data',
        				    '|', '`', null, 1);
   0 rows inserted/updated/deleted
   ij> select * from t_unique_nullable;
   I          |J          
   -----------------------
   1          |1          
   1          |1          
   2          |2          
   
   3 rows selected
   ij> create table t_unique(i int not null, j int, constraint c_unique unique(i));
   0 rows inserted/updated/deleted
   ij> call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('APP', 'T_UNIQUE', 'test.data',
        				    '|', '`', null, 1);
   ERROR XIE0R: Import error on line 2 of file test.data: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'. 
   java.sql.SQLException: Import error on line 2 of file test.data: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'. 
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:103)
   	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)
   	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:310)
   	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)
   	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
   	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2395)
   	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1429)
   	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
   	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
   	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
   	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
   	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
   	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
   	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
   	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
   	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
   	at org.apache.derby.tools.ij.main(ij.java:59)
   	at ij.Ij.main(Ij.java:19)
   Caused by: java.sql.SQLException: Import error on line 2 of file test.data: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'. 
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
   	... 18 more
   Caused by: java.sql.SQLException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'.
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
   	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:288)
   	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
   	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
   	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2395)
   	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1429)
   	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
   	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
   	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
   	at org.apache.derby.impl.load.Import.performImport(Import.java:289)
   	at org.apache.derby.impl.load.Import.importTable(Import.java:126)
   	at org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_TABLE(SystemProcedures.java:1571)
   	at org.apache.derby.exe.ac4d3680a5x0141x937dxb945x000006a67bf04.g0(Unknown Source)
   	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
   	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
   	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
   	at java.lang.reflect.Method.invoke(Method.java:606)
   	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
   	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:438)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1337)
   	... 11 more
   Caused by: ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'.
   	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)
   	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:260)
   	at org.apache.derby.impl.sql.execute.UniqueIndexSortObserver.insertDuplicateKey(UniqueIndexSortObserver.java:72)
   	at org.apache.derby.impl.store.access.sort.SortBuffer.insert(SortBuffer.java:245)
   	at org.apache.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:103)
   	at org.apache.derby.impl.sql.execute.InsertResultSet.changedRow(InsertResultSet.java:234)
   	at org.apache.derby.impl.sql.execute.NoPutResultSetImpl.rowLocation(NoPutResultSetImpl.java:285)
   	at org.apache.derby.impl.store.access.heap.HeapController.load(HeapController.java:450)
   	at org.apache.derby.impl.store.access.heap.Heap.load(Heap.java:651)
   	at org.apache.derby.impl.store.access.RAMTransaction.loadConglomerate(RAMTransaction.java:1216)
   	at org.apache.derby.impl.store.access.RAMTransaction.recreateAndLoadConglomerate(RAMTransaction.java:885)
   	at org.apache.derby.impl.store.access.RAMTransaction.createAndLoadConglomerate(RAMTransaction.java:844)
   	at org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(InsertResultSet.java:1331)
   	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:467)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:438)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1337)
   	... 27 more
   ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'.
   java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'.
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:83)
   	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:288)
   	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
   	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
   	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2395)
   	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1429)
   	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
   	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
   	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
   	at org.apache.derby.impl.load.Import.performImport(Import.java:289)
   	at org.apache.derby.impl.load.Import.importTable(Import.java:126)
   	at org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_TABLE(SystemProcedures.java:1571)
   	at org.apache.derby.exe.ac4d3680a5x0141x937dxb945x000006a67bf04.g0(Unknown Source)
   	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
   	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
   	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
   	at java.lang.reflect.Method.invoke(Method.java:606)
   	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
   	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:438)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1337)
   	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
   	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
   	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
   	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
   	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
   	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
   	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
   	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
   	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
   	at org.apache.derby.tools.ij.main(ij.java:59)
   	at ij.Ij.main(Ij.java:19)
   Caused by: java.sql.SQLException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'.
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)
   	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
   	... 33 more
   Caused by: ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'C_UNIQUE' defined on 'T_UNIQUE'.
   	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)
   	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:260)
   	at org.apache.derby.impl.sql.execute.UniqueIndexSortObserver.insertDuplicateKey(UniqueIndexSortObserver.java:72)
   	at org.apache.derby.impl.store.access.sort.SortBuffer.insert(SortBuffer.java:245)
   	at org.apache.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:103)
   	at org.apache.derby.impl.sql.execute.InsertResultSet.changedRow(InsertResultSet.java:234)
   	at org.apache.derby.impl.sql.execute.NoPutResultSetImpl.rowLocation(NoPutResultSetImpl.java:285)
   	at org.apache.derby.impl.store.access.heap.HeapController.load(HeapController.java:450)
   	at org.apache.derby.impl.store.access.heap.Heap.load(Heap.java:651)
   	at org.apache.derby.impl.store.access.RAMTransaction.loadConglomerate(RAMTransaction.java:1216)
   	at org.apache.derby.impl.store.access.RAMTransaction.recreateAndLoadConglomerate(RAMTransaction.java:885)
   	at org.apache.derby.impl.store.access.RAMTransaction.createAndLoadConglomerate(RAMTransaction.java:844)
   	at org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(InsertResultSet.java:1331)
   	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:467)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:438)
   	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)
   	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1337)
   	... 27 more
   ij> BUILD SUCCESSFUL (total time: 2 seconds)
   
",Major,Dag H. Wanvik,,2013-10-07T15:23:49.000+0000,Bulk insert of data with nullable UNIQUE constraint fails to detect duplicates,Closed,bug,Bug
2014-03-03T18:39:34.000+0000,DERBY-6386,Fixed,"I see the following errors in jdbc4.LobStreamTest if derbyclient.jar is before derby.jar on trunk 10.11 Rev: 1533320


There were 2 errors:
1) testWriteWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)java.lang.NoClass
DefFoundError: org/apache/derby/iapi/error/ExceptionUtil
        at org.apache.derby.impl.jdbc.LOBStreamControl.write(LOBStreamControl.java:237)
        at org.apache.derby.impl.jdbc.LOBOutputStream.write(LOBOutputStream.java:108)
        at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues(LobStream
Test.java:302)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testReadWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)java.lang.NoClassD
efFoundError: org/apache/derby/iapi/error/ExceptionUtil
        at org.apache.derby.impl.jdbc.LOBInputStream.read(LOBInputStream.java:133)
        at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues(LobStreamT
est.java:384)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
There were 2 failures:
1) testWriteWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)junit.framework.A
ssertionFailedError: Expected IndexOutOfBoundException
        at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues(LobStream
Test.java:305)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
2) testReadWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)junit.framework.As
sertionFailedError: Expected IndexOutOfBoundException
        at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues(LobStreamT
est.java:387)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)

I notice derbyclient.jar contains 
Mon Oct 21 13:30:14 PDT 2013 org/apache/derby/iapi/error/ExceptionUtil$1.class
Mon Oct 21 13:30:14 PDT 2013 org/apache/derby/iapi/error/ExceptionUtil.class

which I think is only supposed to be in derby.jar
",Major,Katherine Marsden,,2013-10-21T21:11:34.000+0000,Errors in jdbc4.LobStreamTest if derbyclient.jar is first in the classpath,Closed,bug,Bug
2014-03-05T19:28:36.000+0000,DERBY-6216,Fixed,"I am running Derby 10.9.1.0 and am trying to figure out a  performance problem with query taking too long.   I don’t actually want to run the query so from the documentation, I try:

call syscs_util.syscs_set_runtimestatistics(1);
call syscs_util.syscs_set_xplain_schema('STATS');
call syscs_util.syscs_set_xplain_mode(1);
--- my query here
call syscs_util.syscs_set_runtimestatistics(0);
call syscs_util.syscs_set_xplain_schema('');
call syscs_util.syscs_set_xplain_mode(0);

When it runs my query, I get:

ERROR XCL16: ResultSet not open. Operation 'getMetaData' not permitted. Verify that autocommit is OFF.

I try the following with IJ just to see:

call syscs_util.syscs_set_runtimestatistics(1);
call syscs_util.syscs_set_xplain_schema('STATS');
call syscs_util.syscs_set_xplain_mode(1);
select sql_text from syscs_diag.transaction_table where status != 'IDLE';
call syscs_util.syscs_set_runtimestatistics(0);
call syscs_util.syscs_set_xplain_schema('');
call syscs_util.syscs_set_xplain_mode(0);

Note I have tried this with real tables as apposed to the syscs_diag.transaction_table with the same result.  The only reason that I posted this with this table is that it is a table that is accessible for any database.",Major,Bryan Pendleton,,2013-05-08T12:15:40.000+0000,XPLAIN feature does not work and gives ERROR XCL16: ResultSet not open,Closed,bug,Bug
2014-03-06T17:26:21.000+0000,DERBY-6387,Fixed,"The order in which triggers fire, is partly determined by the order in which they are created.

See here:

http://db.apache.org/derby/docs/10.10/ref/rrefsqlj43125.html

|   When multiple triggers are defined for the same database event for
|   the same table for the same trigger time (before or after), triggers
|   are fired in the order in which they were created.

And here:

SQL:2003, part 2, section 4.38.1 General description of triggers:

|   The order of execution of a set of triggers is ascending by value of
|   their timestamp of creation in their descriptors, such that the
|   oldest trigger executes first.

Since the order of creation matters, dblook should generate CREATE TRIGGER statements in an order that preserves the original order of execution.

dblook currently generates CREATE TRIGGER statements in the order returned by a SELECT query against SYS.SYSTRIGGERS. The SELECT query does not have an ORDER BY clause, so it is not guaranteed to return the rows in a specific order.",Major,Knut Anders Hatlen,,2013-10-22T12:48:37.000+0000,Incorrect ordering of triggers in dblook,Closed,bug,Bug
2014-03-31T11:43:08.000+0000,DERBY-6107,Fixed,See DERBY-6094 for the details of this problem.,Major,Knut Anders Hatlen,,2013-03-13T13:16:18.000+0000,Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite,Closed,bug,Bug
2014-01-15T17:54:38.000+0000,DERBY-6432,Fixed,"According to the discussion on DERBY-6429, CHECK constraints run under the aegis of the constraint owner and their privileges do not need to be checked when running INSERT/UPDATE statements. However, Derby requires the INSERTer/UPDATEr to have EXECUTE privilege on functions invoked by CHECK constraints and USAGE privilege on types mentioned by CHECK constraints.

Hopefully, this bug will be fixed by the work on DERBY-6429.

The following script shows this behavior:

connect 'jdbc:derby:memory:db;user=test_dbo;create=true';

call syscs_util.syscs_create_user( 'TEST_DBO', 'test_dbopassword' );
call syscs_util.syscs_create_user( 'RUTH', 'ruthpassword' );

-- bounce database to turn on authentication and authorization
connect 'jdbc:derby:memory:db;shutdown=true';
connect 'jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword' as dbo;

-- schema
create function absoluteValue( inputValue int ) returns int
language java parameter style java deterministic no sql
external name 'java.lang.Math.abs';

create type hashmap external name 'java.util.HashMap' language java;

create function makeHashMap() returns hashmap
language java parameter style java no sql
external name 'org.apache.derbyTesting.functionTests.tests.lang.UDTTest.makeHashMap';

create table t1_check_function
(
    a int check ( absoluteValue( a ) > 100 )
);

create table t1_check_type
(
    a hashmap check( (a is not null) or (a is not null) )
);

-- data
insert into t1_check_function( a ) values -101;

insert into t1_check_type( a ) values ( makeHashMap() );

-- privileges
grant insert on t1_check_function to ruth;
grant update on t1_check_function to ruth;

grant insert on t1_check_type to ruth;
grant update on t1_check_type to ruth;

connect 'jdbc:derby:memory:db;user=ruth;password=ruthpassword' as ruth;

-- incorrectly fails because ruth does not have EXECUTE privilege on absoluteValue()
insert into test_dbo.t1_check_function values ( -102 );
update test_dbo.t1_check_function set a = -103;

-- incorrectly fails because ruth does not have USAGE privilege on hashmap
insert into test_dbo.t1_check_type values ( null );
update test_dbo.t1_check_type set a = null;
",Major,None,,2013-12-12T19:17:54.000+0000,INSERT/UPDATE incorrectly require user to have privilege to execute CHECK constraints on the target table.,Closed,bug,Bug
2014-01-13T20:43:54.000+0000,DERBY-6388,Fixed,"The Reference Guide section titled ""WHERE CURRENT OF clause"" provides some sample code. The code doesn't even compile. It has a number of defects:

1) Autocommit needs to be turned on.

2) The cursor name needs to be ALL CAPS in the s.setCursorName() statement.

3) The ResultSet needs to be created from the statement and can't be created directly from the connection.

4) The ResultSet needs to be positioned before the UPDATE is run.

The following cleaned-up code compiles and runs correctly:

        conn.setAutoCommit( false );

        Statement s = conn.createStatement();
        s.setCursorName(""AIRLINESRESULTS"");
        ResultSet rs = s.executeQuery(
                                         ""SELECT Airline, basic_rate "" +
                                         ""FROM Airlines FOR UPDATE OF basic_rate"");
        rs.next();
        Statement s2 = conn.createStatement();
        s2.executeUpdate(""UPDATE Airlines SET basic_rate = basic_rate "" +
                         ""+ .25 WHERE CURRENT OF AirlinesResults"");
",Major,Camilla Haase,,2013-10-22T13:17:54.000+0000,Example WHERE CURRENT OF clause in Reference Guide is nonsense,Closed,bug,Bug
2014-03-03T12:50:35.000+0000,DERBY-6408,Fixed,"The reference manual topic on Boolean expressions - http://db.apache.org/derby/docs/10.10/ref/rrefsqlj23075.html - says that EXISTS should return FALSE if the subquery returns no rows. In reality, it returns NULL:

ij> create table t(x int);
0 rows inserted/updated/deleted
ij> values exists(select * from t);
1    
-----
NULL 

1 row selected

SQL:2011, part 2, 8.10 <exists predicate> also says that FALSE is the correct result if the cardinality is 0.",Major,Knut Anders Hatlen,,2013-11-08T09:27:51.000+0000,EXISTS returns NULL instead of FALSE,Closed,bug,Bug
2014-01-15T20:27:24.000+0000,DERBY-6433,Fixed,"According to the discussion on DERBY-6429, generation expressions run under the aegis of the table owner and their privileges do not need to be checked when running INSERT/UPDATE statements. However, Derby requires the INSERTer/UPDATEr to have EXECUTE privilege on functions invoked by generation expressions and USAGE privilege on types mentioned by generation expressions.

Hopefully, this bug will be fixed by the work on DERBY-6429.

The following script shows this behavior:

connect 'jdbc:derby:memory:db;user=test_dbo;create=true';

call syscs_util.syscs_create_user( 'TEST_DBO', 'test_dbopassword' );
call syscs_util.syscs_create_user( 'RUTH', 'ruthpassword' );

-- bounce database to turn on authentication and authorization
connect 'jdbc:derby:memory:db;shutdown=true';
connect 'jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword' as dbo;

-- schema
create function absoluteValue( inputValue int ) returns int
language java parameter style java deterministic no sql
external name 'java.lang.Math.abs';

create type hashmap external name 'java.util.HashMap' language java;

create function makeHashMap() returns hashmap
language java parameter style java no sql
external name 'org.apache.derbyTesting.functionTests.tests.lang.UDTTest.makeHashMap';

create table t1_generated_function
(
    a int,
    b int generated always as ( absoluteValue( a ) )
);

create table t1_generated_type
(
    a hashmap,
    b boolean generated always as ( a is null )
);

-- data
insert into t1_generated_function( a ) values -101;

insert into t1_generated_type( a ) values ( makeHashMap() );

-- privileges
grant insert on t1_generated_function to ruth;
grant update on t1_generated_function to ruth;

grant insert on t1_generated_type to ruth;
grant update on t1_generated_type to ruth;

connect 'jdbc:derby:memory:db;user=ruth;password=ruthpassword' as ruth;

-- incorrectly fails because ruth does not have EXECUTE privilege on absoluteValue()
insert into test_dbo.t1_generated_function( a ) values ( -102 );
update test_dbo.t1_generated_function set a = -103;

-- incorrectly fails because ruth does not have USAGE privilege on hashmap
insert into test_dbo.t1_generated_type( a ) values ( null );
update test_dbo.t1_generated_type set a = null;
",Major,None,,2013-12-12T19:38:11.000+0000,INSERT/UPDATE incorrectly require user to have privilege to run generation expressions.,Closed,bug,Bug
2014-01-16T15:50:54.000+0000,DERBY-6429,Fixed,"UPDATE statements confuse SELECT and UPDATE privileges. Consider the following SET clause:

   SET updateColumn = selectColumn

According to part 2 of the 2011 edition of the SQL Standard, that SET clause requires the following privileges:

1) UPDATE privilege on updateColumn. Privileges for the left side of a SET clause are described by section 14.14 (update statement: searched), access rule 1b.

2) SELECT privilege on selectColumn. Privileges for the right side of a SET clause are described by section 14.15 (set clause list) and the various productions underneath value expression. In this case, we have a column reference, whose privileges are governed by section 6.7 (column reference), access rule 2.

However, Derby requires the following:

1') UPDATE privilege on both updateColumn and selectColumn

When we address this bug, we should make corresponding changes to the MERGE statement.

The following script shows the current behavior:

connect 'jdbc:derby:memory:db;user=test_dbo;create=true';

call syscs_util.syscs_create_user( 'TEST_DBO', 'test_dbopassword' );
call syscs_util.syscs_create_user( 'RUTH', 'ruthpassword' );

connect 'jdbc:derby:memory:db;shutdown=true';

connect 'jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword' as dbo;

create table t1_025
(
    a int primary key,
    updateColumn int,
    selectColumn int,
    privateColumn int
);

grant update ( updateColumn ) on t1_025 to ruth;
grant select ( selectColumn ) on t1_025 to ruth;

insert into t1_025 values ( 1, 100, 1000, 10000 );

connect 'jdbc:derby:memory:db;user=ruth;password=ruthpassword' as ruth;

-- correctly succeeds because ruth has UPDATE privilege on updateColumn
update test_dbo.t1_025 set updateColumn = 17;

-- the error message incorrectly states that the missing privilege
-- is UPDATE privilege on privateColumn
update test_dbo.t1_025 set updateColumn = privateColumn;

-- incorrectly fails.
-- ruth does have UPDATE privilege on updateColumn
-- and SELECT privilege on selectColumn, which should be good enough.
-- however, the error message incorrectly states that the missing privilege
-- is UPDATE privilege on selectColumn.
update test_dbo.t1_025 set updateColumn = selectColumn;

-- incorrectly succeeds even though ruth does not have SELECT privilege on updateColumn
update test_dbo.t1_025 set updateColumn = 2 * updateColumn;

set connection dbo;

select * from t1_025 order by a;
",Major,Richard N. Hillegas,,2013-12-09T17:49:29.000+0000,Privilege checks for UPDATE statements are wrong.,Closed,bug,Bug
2014-03-06T00:11:40.000+0000,DERBY-6361,Fixed,"There are many examples of statements failing because Derby has not implicitly created the schema associated with the current user. You don't see this if the schema is the default APP schema. But if the user is anyone other than APP, then various statements can fail. Maybe we should implicitly create a schema even if the user isn't APP. Right now, you get an error like this:

ERROR 42Y07: Schema 'ROOT' does not exist

The following script shows an example of this problem:

connect 'jdbc:derby:memory:db;create=true;user=esq';

create table licreq( domain varchar( 10 ) );

connect 'jdbc:derby:memory:db;user=root';

-- fails
ALTER TABLE esq.licreq ADD COLUMN u_domain GENERATED ALWAYS AS (UPPER(domain));

connect 'jdbc:derby:memory:db;user=app';

-- succeeds
ALTER TABLE esq.licreq ADD COLUMN u_domain GENERATED ALWAYS AS (UPPER(domain));



",Major,Richard N. Hillegas,,2013-10-01T16:43:55.000+0000,Valid statements rejected if Derby has not implicitly created the current user's schema.,Closed,bug,Bug
2014-04-23T20:46:29.000+0000,DERBY-6248,Fixed,"intermittent nightly regression test failure in trunk, linux, ibm16
only happened once in may on this machine environment.
http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm16/1488444-suites.All_diff.txt

There was 1 error:
1) testDerby966(org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest)java.sql.SQLFeatureNotSupportedException: The DDM object 0x2408 is not supported.  The connection has been terminated.
	at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.LogicalConnection.close(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.testDerby966(XATest.java:1079)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
Caused by: org.apache.derby.client.am.DisconnectException: The DDM object 0x2408 is not supported.  The connection has been terminated.
	at org.apache.derby.client.net.NetConnectionReply.doObjnsprmSemantics(Unknown Source)
	at org.apache.derby.client.net.NetConnectionReply.parseSYNCCTLError(Unknown Source)
	at org.apache.derby.client.net.NetXAConnectionReply.parseSYNCCTLreply(Unknown Source)
	at org.apache.derby.client.net.NetXAConnectionReply.readLocalXACommit(Unknown Source)
	at org.apache.derby.client.net.NetXAConnection.readLocalXACommit_(Unknown Source)
	at org.apache.derby.client.net.NetXAConnection.readCommit(Unknown Source)
	at org.apache.derby.client.net.NetConnection.readXACommit_(Unknown Source)
	at org.apache.derby.client.am.ClientConnection.readCommit(Unknown Source)
	at org.apache.derby.client.am.ClientConnection.readAutoCommit(Unknown Source)
	at org.apache.derby.client.am.ClientConnection.flowClose(Unknown Source)
	at org.apache.derby.client.am.ClientConnection.closeForReuse(Unknown Source)
	... 49 more

FAILURES!!!
Tests run: 17341,  Failures: 0,  Errors: 1
",Major,Myrna van Lunteren,,2013-06-05T17:26:21.000+0000,nightly regression test failure: testDerby966(org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest)java.sql.SQLFeatureNotSupportedException: The DDM object 0x2408 is not supported.  The connection has been terminated.,Closed,bug,Bug
2014-01-15T20:58:23.000+0000,DERBY-6446,Fixed,"Work on DERBY-6429 added a new schema to GrantRevokeDDLTest. If the new test runs before testGrantRevokeDDL(), then that test case will raise an error because of the presence of the extra schema. This turned up in the nightly tests: http://download.java.net/javadesktop/derby/request_5586046/javadb-task-3782065.html",Major,Richard N. Hillegas,,2014-01-06T16:23:48.000+0000,Test ordering problem in GrantRevokeDDLTest,Closed,bug,Bug
2014-02-05T12:15:02.000+0000,DERBY-6443,Fixed,"I'm having problems will calling functions from within a trigger.
The problem seems to be with the outer function call (FLOOR() in this case, but it also happens with other functions). It works fine in the SELECT statement, but when used in the trigger it throws a ArrayIndexOutOfBoundsException.
Remove the FLOOR() part from the trigger and it works fine.

{code}
-- create source table and some data
CREATE TABLE foo (name VARCHAR(20), val DOUBLE);
INSERT INTO foo (name, val) VALUES ('A', 10), ('A', 20), ('B', 30), ('C', 40);

-- calling the function works fine here
SELECT name, FLOOR(AVG(LOG10(val))), COUNT(*)
FROM foo
GROUP BY name;

-- create target table for trigger
CREATE TABLE summary (name VARCHAR(20), aver DOUBLE, size INT);

-- create the trigger
CREATE TRIGGER trg_foo AFTER INSERT ON foo
REFERENCING NEW TABLE AS changed FOR EACH STATEMENT MODE DB2SQL
INSERT INTO summary (name, aver, size)
SELECT name, FLOOR(AVG(LOG10(val))), COUNT(*)
FROM changed
GROUP BY name;

-- insert rows to cause trigger to fire
INSERT INTO foo (name, val) VALUES ('A', 10), ('A', 20), ('B', 30), ('C', 40);

SELECT * FROM foo;
SELECT * FROM summary;
{code}",Major,Knut Anders Hatlen,,2013-12-31T09:37:49.000+0000,ArrayIndexOutOfBoundsException when calling function from trigger,Closed,bug,Bug
2013-06-14T16:41:37.000+0000,DERBY-5888,Fixed,"1) testToggleLogConnections(org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest)
   junit.framework.AssertionFailedError:
   Could not find expectedString:Log Connections changed to on. in output:
   <STDOUT>Wed Aug 01 15:48:32 CEST 2012 : Log Connections turned on.",Major,Richard N. Hillegas,,2012-08-02T08:24:27.000+0000,ServerPropertiesTest.testToggleLogConnections fails because of unexpected output,Closed,bug,Bug
2013-11-01T09:52:16.000+0000,DERBY-5806,Fixed,"I accidentally stumbled into a rather awkward bit of error handling.

On an IJ session running client/server, I tried:

ij> connect 'jdbc:derby://localhost:1527/brydb';
ij> prepare seeMenu as '';
ERROR 08006: A network protocol error was encountered and the connection has been terminated: A PROTOCOL Data Stream Syntax Error was detected.  Reason: 0x9,236. Plaintext connection attempt to an SSL enabled server?

On the Network Server side, I see:

Sat Jun 09 09:28:51 PDT 2012 : Execution failed because of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM; CODPNT arg  = 2414; Error Code Value = e. Plaintext connection attempt from an SSL enabled client?
org.apache.derby.impl.drda.DRDAProtocolException: Execution failed because of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM; CODPNT arg  = 2414; Error Code Value = e. Plaintext connection attempt from an SSL enabled client?
	at org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(DRDAConnThread.java:537)
	at org.apache.derby.impl.drda.DRDAConnThread.missingCodePoint(DRDAConnThread.java:567)
	at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTTobjects(DRDAConnThread.java:3858)
	at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT(DRDAConnThread.java:3788)
	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:831)
	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:295)

It seems like the error handling could be improved here, for what is essentially a syntax error on my part.",Minor,Dyre Tjeldvoll,,2012-06-09T16:33:59.000+0000,Trying to prepare statement with no text causes DRDA protocol exception,Closed,bug,Bug
2013-04-22T07:47:10.000+0000,DERBY-6011,Fixed,"The Apache ManifoldCF project supports Derby as one of its underlying databases.  Simple tests, however, demonstrate that Derby is apparently deadlocking and timing out repeatedly under multi-thread conditions.  This problem is long-standing, and is not exhibited by any other database ManifoldCF supports, and makes a simple test take between 6x and 12x as long.

There is a trivial test with demonstrates the problem vs. other databases.  Please do the following (once you have java 1.6+, svn 1.7+, and ant 1.7+ available):

(1) Check out https://svn.apache.org/repos/asf/manifoldcf/trunk
(2) Run the following ant target to download the dependencies: ""ant make-core-deps""
(3) Run the Derby test: ""ant run-rss-tests-derby"" . Note the time required - at least 180 seconds, can be up to 360 seconds.
(4) Run the equivalent HSQLDB test: ""ant run-rss-tests-HSQLDB"".  This test takes about 31 seconds to run.

The output of the Derby test can be found in the directory ""tests/rss/test-derby-output"".  Have a look at manifoldcf.log, where all long-running queries are reported.  Derby.log is also included, which shows only that during the test's cleanup phase the database is deleted before it is shutdown, which is not pertinent to the performance issue.

I am available to assist with ManifoldCF, if that seems to be required.
",Major,Knut Anders Hatlen,,2012-12-08T11:14:32.000+0000,Derby performs very badly (seems to deadlock and timeout) in very simple multi-threaded tests,Closed,bug,Bug
2013-07-03T11:25:25.000+0000,DERBY-5979,Fixed,"The ant release target  on Windows  creates release.properties with inconsistent line endings that prevent checkin.


This may be a configuration issue.  I have *.properties = svn:eol-style=native which I think is correct but I could not diff or checkin the file until I removed the dos line endings.  There are similar issues with the release notes but because they are not checked in as part of the a script we document how to fix them up.

",Major,Dyre Tjeldvoll,,2012-11-02T23:34:39.000+0000,ant release target creates a release.properties that has conflicting line endings so automatic checkin fails,Closed,bug,Bug
2013-06-14T16:50:48.000+0000,DERBY-5607,Fixed,"A deadlock in the Java 5 VM hangs connection attempts if you are using NATIVE authentication with a client which runs in the same VM as the server. I will attach a test case which demonstrates this. This bug is implicated in the failures being discussed on https://issues.apache.org/jira/browse/DERBY-5601 and was disclosed by the discussion on this email thread: http://old.nabble.com/-URGENT--Critical-test-situation-on-trunk-to33259629.html#a33259629

The bug arises when NativeAuthenticationServiceImpl attempts a nested connection to the Credentials database during database creation. The nested connection is attempted in order to dertermine whether the user has system-wide privilege to create databases.",Critical,Richard N. Hillegas,,2012-02-08T19:32:31.000+0000,Deadlock in Java 5 VM when using NATIVE authentication with a client running in the same VM as the server,Closed,bug,Bug
2013-10-09T16:25:07.000+0000,DERBY-5610,Fixed,"ServerPropertiesTest showed the below output when running. The ping retries and the test passes. 
I am not sure if in fact a Connection reset is a valid response if the server is not fully up and the test is just being too verbose or if it is real problem that we get this Error.

.....................java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:168)
	at java.net.SocketInputStream.read(SocketInputStream.java:90)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest.java:309)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:484)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:600)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.textui.TestRunner.doRun(TestRunner.java:116)
	at junit.textui.TestRunner.start(TestRunner.java:172)
	at junit.textui.TestRunner.main(TestRunner.java:138)
java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:168)
	at java.net.SocketInputStream.read(SocketInputStream.java:90)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest.java:309)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:484)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:600)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.textui.TestRunner.doRun(TestRunner.java:116)
	at junit.textui.TestRunner.start(TestRunner.java:172)
	at junit.textui.TestRunner.main(TestRunner.java:138)
....................",Minor,Katherine Marsden,,2012-02-08T23:30:53.000+0000,ServerPropertiesTest prints .java.net.SocketException: Connection reset to console but test passes,Closed,bug,Bug
2013-06-14T16:38:00.000+0000,DERBY-6047,Fixed,"The following repro shows the problem (provided by Holger Rehn, cf. issue DERBY-5945).

        sta.execute( ""create procedure PROC( inout x int ) "" + 
            ""parameter style java modifies sql data language java "" + 
            ""external name 'DUMMY.PROC'"" );
        sta.execute( ""{call PROC(1)}"" );

gives NPE on trunk (even before the fixes introduced for DERBY-5945), but not on 10.9, so I believe it's a regression:

:
Caused by: java.lang.NullPointerException
...sql.compile.StaticMethodCallNode.coerceMethodParameter(StaticMethodCallNode.java:702)
...sql.compile.StaticMethodCallNode.resolveRoutine(StaticMethodCallNode.java:620)
...sql.compile.StaticMethodCallNode.bindExpression(StaticMethodCallNode.java:210)
...sql.compile.JavaToSQLValueNode.bindExpression(JavaToSQLValueNode.java:237)
...sql.compile.CallStatementNode.bindStatement(CallStatementNode.java:126)
...sql.GenericStatement.prepMinion(GenericStatement.java:400)
:
",Major,Richard N. Hillegas,,2013-01-18T03:38:16.000+0000,NPE in StaticCallMethod#coerceMethodParameter with a constant argument to INOUT parameter,Closed,bug,Bug
2013-06-27T23:02:15.000+0000,DERBY-5779,Fixed,"Derby lets you invoke a table function in the FROM list of a query, passing in arguments built out of columns in other tables in the FROM list. This syntax is illegal and the resulting queries have no meaning under the SQL Standard. See the discussion on DERBY-5554. We should forbid this syntax. Similar syntax involving correlated subqueries in the FROM list is already forbidden. Fixing this will create a backward incompatibility which requires a release note.",Major,Richard N. Hillegas,,2012-05-23T13:55:59.000+0000,Table functions should only accept arguments which are constant in their query block.,Closed,bug,Bug
2013-06-14T16:54:41.000+0000,DERBY-5554,Fixed,"With the latest 10.8.2.2 binary distribution, the following short script produces a NullPointerException:

java -Dij.exceptionTrace=true org.apache.derby.tools.ij
ij> connect 'jdbc:derby:brydb;create=true';
ij> create table t1 (a int);
ij> SELECT T2.*, systabs.*, syscgs.conglomeratenumber
    FROM 
        SYS.SYSTABLES systabs, sys.sysconglomerates syscgs,
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2
    WHERE systabs.tabletype = 'T' and systabs.tableid = syscgs.tableid;


The exception trace is pasted below:

ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.
java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)
	at org.apache.derby.tools.ij.main(Unknown Source)
Caused by: java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 18 more
Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	... 15 more
Caused by: java.lang.NullPointerException
	at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source)
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 11 more
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)
	at org.apache.derby.tools.ij.main(Unknown Source)
Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source)
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 11 more
",Major,Richard N. Hillegas,,2011-12-23T05:49:41.000+0000,NullPointerException in generated VTI code,Closed,bug,Bug
2013-09-04T19:20:06.000+0000,DERBY-5553,Fixed,"The client system property -Dderby.client.traceDirectory does not work with ClientXADataSource. No trace files are created if this property is set when making XA Connections.

I am sure it works fine with DriverManager connections and also checked tracing works fine using connection attributes and XA with.  ds.setConnectionAttributes(""traceDirectory=./traceDir"");

I have not checked  ClientDataSource or ClientConnectionPoolDataSource.

Attached is a reproduction for this issue.
mkdir ./traceDir

javac -g XATemplate.java  utilXid.java
java -Dderby.client.traceDirectory=""./traceDir"" XATemplate

You will see that traceDir is empty.
This came up when debugging DERBY-5552
",Major,Katherine Marsden,,2011-12-23T00:59:17.000+0000,System property for client tracing -Dderby.client.traceDirectory does not work with XADataSource,Closed,bug,Bug
2013-03-04T13:47:14.000+0000,DERBY-6017,Fixed,"Given this table:

ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t(x bigint);
0 rows inserted/updated/deleted
ij> insert into t values 9223372036854775805, 9223372036854775806, 9223372036854775807;
3 rows inserted/updated/deleted

A query that uses an IN list that contains all the three values actually stored in the table, returns all three rows as expected:

ij> select * from t where x in (9223372036854775805, 9223372036854775806, 9223372036854775807);
X                   
--------------------
9223372036854775805 
9223372036854775806 
9223372036854775807 

3 rows selected

However, if we add a value whose type precedence is higher, like a DOUBLE value, and that value happens to be equal to the approximation of the other values in the IN list when they are cast from BIGINT to DOUBLE, only one row is returned:

ij> select * from t where x in (9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18);
X                   
--------------------
9223372036854775805 

1 row selected

I believe this query should return all three rows too.",Major,Knut Anders Hatlen,,2012-12-18T13:27:34.000+0000,IN lists with mixed types may return wrong results,Closed,bug,Bug
2013-06-14T17:10:46.000+0000,DERBY-6040,Fixed,"Using the metadata table functions introduced by DERBY-6022, I get the wrong row order on this query:

select t.table_name c2, c.column_name c3
from table( getTables( null, '%', '%' ) ) t,
        table( getColumns( null, '%', '%', '%') ) c
where c.table_name = t.table_name
and t.table_type = 'TABLE'
and c.table_schem = t.table_schem
order by c2, c3;

However, I get the correct order on the following query. The good query returns the same rows but in the correct order. The only difference between the queries is that the bad one has an extra, NOP join clause.

Here is the full result of a script showing the problem:

ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t( d int, u varchar( 30 ) );
0 rows inserted/updated/deleted
ij> create table s( d int, u varchar( 30 ) );
0 rows inserted/updated/deleted
ij> call syscs_util.syscs_register_tool( 'databaseMetaData', true );
0 rows inserted/updated/deleted
ij> -- columns are ordered correctly
select t.table_name c2, c.column_name c3
from table( getTables( null, '%', '%' ) ) t,
        table( getColumns( null, '%', '%', '%') ) c
where c.table_name = t.table_name
and t.table_type = 'TABLE'
order by c2, c3;
C2                                                                                                                              |C3                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
S                                                                                                                               |D                                                                                                                               
S                                                                                                                               |U                                                                                                                               
T                                                                                                                               |D                                                                                                                               
T                                                                                                                               |U                                                                                                                               

4 rows selected
ij> -- columns are ordered incorrectly
select t.table_name c2, c.column_name c3
from table( getTables( null, '%', '%' ) ) t,
        table( getColumns( null, '%', '%', '%') ) c
where c.table_name = t.table_name
and t.table_type = 'TABLE'
and c.table_schem = t.table_schem
order by c2, c3;
C2                                                                                                                              |C3                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
T                                                                                                                               |D                                                                                                                               
S                                                                                                                               |D                                                                                                                               
T                                                                                                                               |U                                                                                                                               
S                                                                                                                               |U                                                                                                                               

4 rows selected
",Major,Richard N. Hillegas,,2013-01-10T20:59:21.000+0000,Incorrect row order returned for an ORDER BY on a join of two table functions,Closed,bug,Bug
2013-06-27T22:42:34.000+0000,DERBY-5969,Fixed,"If the database is already booted, then the DBO's attempt to re-encrypt or un-encrypt the database will silently fail. It will appear to the DBO that the re(un)encryption succeeded but in fact the database will not be changed. Derby should raise an error if the database is already booted when the DBO attempts re(un)encryption.",Major,Richard N. Hillegas,,2012-10-29T17:54:26.000+0000,"Encryption, re-encryption, and un-encryption silently fail if the database is already booted.",Closed,bug,Bug
2013-11-01T09:30:06.000+0000,DERBY-5908,Fixed,"As reported by Knut Anders on DERBY-5889:
---
But I'm wondering if this might be a product issue and not a test issue. For example, when I try to start the network server on Windows using a derbynet.jar located on a network drive, it refuses to start unless I specify -noSecurityManager: 

C:\cygwin\home\lroot\test> java -jar \\yme\cluwin\usr\local\share\java\derby\lib\10.9.1.0\derbynet.jar start 
Tue Aug 14 22:23:33 CEST 2012 : Security manager installed using the Basic server security policy. 
Startup failed due to missing functionality for org.apache.derby.iapi.services.stream.InfoStreams. Please ensure your classpath includes the correct Derby software. 
ERROR XBM02: Startup failed due to missing functionality for org.apache.derby.iapi.services.stream.InfoStreams. Please ensure your classpath includes the correct Derby software. 
at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) 
at org.apache.derby.iapi.services.monitor.Monitor.missingImplementation(Unknown Source) 
at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) 
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) 
at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Unknown Source) 
at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Unknown Source) 
at org.apache.derby.impl.services.monitor.FileMonitor.<init>(Unknown Source) 
at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Unknown Source) 
at org.apache.derby.iapi.jdbc.JDBCBoot.boot(Unknown Source) 
at org.apache.derby.jdbc.EmbeddedDriver.boot(Unknown Source) 
at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(Unknown Source) 
at java.lang.Class.forName0(Native Method) 
at java.lang.Class.forName(Unknown Source) 
at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(Unknown Source) 
at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(Unknown Source) 
at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(Unknown Source) 
at org.apache.derby.drda.NetworkServerControl.main(Unknown Source) 
---

The workaround is to use ""-noSecurityManager"", but this is not recommended due to the security implications. A better option is to move the Derby installation off the network drive / share if possible and run the Derby server with the security manager.",Minor,Kristian Waagan,,2012-08-21T09:24:00.000+0000,Network server fails to start when JARs are located on a Windows share / network drive,Closed,bug,Bug
2013-02-27T18:59:57.000+0000,DERBY-6076,Fixed,"When I go to:

http://db.apache.org/derby/docs/10.9/

my browser displays ""broken icon"" symbols for the ""icons/folder.gif"" icon that's displayed next to each icon.

I think this is a new problem; last time I visited this URL (a few weeks ago?) I don't recall seeing this problem.

It appears to affect all the doc version (10.8, 10.7, etc.)

Note also that if I provide the index.html on the URL, as in

http://db.apache.org/derby/docs/10.9/ref/index.html

then the docs themselves are displayed correctly.

Perhaps this is part of the basic web server configuration, and not part of the Derby documentation proper, and indicates that something in the web server itself has recently been re-configured?
",Minor,Knut Anders Hatlen,,2013-02-18T16:22:28.000+0000,Folder.gif icon missing from derby documentation website,Closed,bug,Bug
2013-04-15T17:01:35.000+0000,DERBY-5932,Fixed,"I saw this issue in the IBM Nightlies ibm1.6
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1387435-suites.All_diff.txt
and on 

http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1387435-suites.All_diff.txt

Only on Windows. Linux was fine.  
1) testAutoNetworkServerBoot(org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest)java.sql.SQLException: Connection authentication failure occurred.  Reason: Invalid authentication..
	at org.apache.derby.impl.drda.NetworkServerControlImpl.throwSQLException(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.wrapSQLError(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.shutdown(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.shutdown(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testAutoNetworkServerBoot(AutoloadTest.java:521)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)",Major,Mike Matrigali,,2012-09-19T20:04:59.000+0000,testAutoNetworkServerBoot fails with Invalid authentication,Closed,bug,Bug
2013-06-27T23:06:30.000+0000,DERBY-5749,Fixed,"Cf the attached repro SilentVarcharArgTruncation.
It seem implicit casts are inserted here, cf discussion on derby-dev thread starting here: http://mail-archives.apache.org/mod_mbox/db-derby-dev/201205.mbox/%3Cx67gwm7hir.fsf%40oracle.com%3E ",Major,Dag H. Wanvik,,2012-05-08T19:25:55.000+0000,"Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long",Closed,bug,Bug
2013-02-26T22:58:59.000+0000,DERBY-6077,Fixed,"The Derby website could use a little improvement on the following issues:

- The Apache Brand Requirements suggest that all (Top Level) projects and subproject pages include a reference back to 5 apache pages. The DB project pages have this, but the Derby pages don't.
- The page describing forrest updates has some dead links in it (e.g. the link to the forrest tutorial, the link to install & download, forrest jedit instructions... And we could change the link to download 0.8 directly to the archive location where this version is now found).
- Nit: the Community tab refers to BUGS in caps, we can make this Bugs to match other references.
- The Main/New page refers to ApacheCon Europe of 2012 - this can be removed.
",Minor,Myrna van Lunteren,,2013-02-19T01:08:06.000+0000,web site needs updating on a few points,Closed,bug,Bug
2013-02-20T16:27:29.000+0000,DERBY-6081,Fixed,"If the SQLType argument to the new JDBC 4.2 methods in PreparedStatement and ResultSet is null, the call will fail with a NullPointerException. It should fail with an SQLException.

Stack trace on embedded:

java.lang.NullPointerException
        at org.apache.derby.impl.jdbc.Util42.getTypeAsInt(Util42.java:57)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.setObject(EmbedPreparedStatement42.java:57)

Stack trace on client:

java.lang.NullPointerException
        at org.apache.derby.client.am.Utils42.getTypeAsInt(Utils42.java:55)
        at org.apache.derby.client.am.PreparedStatement42.setObject(PreparedStatement42.java:78)",Major,Knut Anders Hatlen,,2013-02-20T13:08:06.000+0000,JDBC 4.2 setObject() and updateObject() methods throw NPE when type is null,Closed,bug,Bug
2013-11-04T12:08:39.000+0000,DERBY-5823,Fixed,"Exeuting an insert that results in multiple rows being inserted into a table without any generated keys defined fails if the JDBC statement is configured to return generated keys. Example stack trace:

Caused by: ERROR XSCH4: Conglomerate could not be created.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:268)
        at org.apache.derby.impl.store.access.heap.Heap.create(Heap.java:296)
        at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(HeapConglomerateFactory.java:206)
        at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(RAMTransaction.java:820)
        at org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insert(TemporaryRowHolderImpl.java:302)
        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1007)
        at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:508)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
        ... 30 more

This happens only with multi-row inserts, and only with the embedded driver (the client driver uses IDENTITY_VAL_LOCAL).
The problem is that Derby tries to create a temporary conglomerate with a zero-length row template. A guard against this scenario is probably missing.

FYI, the transition threshold (from in-memory to on-disk) is currently five rows.
I marked versions back to 10.7 as affected, but this bug probably goes back all the way.",Minor,Knut Anders Hatlen,,2012-06-20T12:10:05.000+0000,Multi-row insert fails on table without generated keys with RETURN_GENERATED_KEYS,Closed,bug,Bug
2013-06-27T23:13:18.000+0000,DERBY-5679,Fixed,"Rolling back a transaction can leave a table in an inconsistent state if the table has been previously altered through the addition of new columns. It appears that if newly added columns have not been changed from their default value, then when a transaction which sets new values for these columns is rolled back the new columns are not restored to their previous values.

Attached is an ij script with fairly minimal steps to reproduce the problem on Derby 10.6.2.0 and 10.8.2.2 (Win7 x64, Sun 32-bit JRE 1.6.0.26). Expected and observed output also attached.

Would appreciate any suggestions as to a workaround for this issue. Running SYSCS_UTIL.SYSCS_COMPRESS_TABLE on the table after adding the columns seems to avoid the problem but may be just masking the issue.",Critical,Richard N. Hillegas,,2012-03-29T20:21:32.000+0000,Rolling back a transaction leads to an inconsistent state,Closed,bug,Bug
2013-06-28T18:25:41.000+0000,DERBY-5680,Fixed,"I think there is something wrong with the indexStats.     

The problem happens on many tables in the database.   
None of these tables are changing however, no inserts or deletes or updates.  They are being queried, however.  

Here is one such table.

Here is the statistics for this table:

Table (Index)     2              3
ACCOUNTTABLE_CONFIG_BUNDLE (SQL081029110443810)          numunique= 38390 numrows= 38390     2012-03-30 13:00:26.84
ACCOUNTTABLE_CONFIG_BUNDLE (SQL100922215819290)          numunique= 38390 numrows= 38390     2012-03-30 13:00:26.917

There are in fact 38390 rows in the table.

Here is some of the indexStat trace:

Fri Mar 30 12:47:12 EDT 2012 Thread[DRDAConnThread_43,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": update scheduled, reason=[t-est=38390, i-est=2355 => cmp=2.7912562815443245] (queueSize=12)
Fri Mar 30 12:47:48 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL081029110443810 (fc33890d-011d-491f-3d8c-0000376d74d3): rows=38390, card=[38390]
Fri Mar 30 12:47:48 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL100922215819290 (75608675-012b-3c38-b55c-000043ea6398): rows=38390, card=[38390]
Fri Mar 30 12:47:48 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": scan durations (c30625=91ms,c30625=98ms)
Fri Mar 30 12:47:48 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": generation complete (210 ms)

Fri Mar 30 12:47:49 EDT 2012 Thread[DRDAConnThread_44,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": update scheduled, reason=[t-est=38390, i-est=2355 => cmp=2.7912562815443245] (queueSize=19)
Fri Mar 30 12:48:25 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL081029110443810 (fc33890d-011d-491f-3d8c-0000376d74d3): rows=38390, card=[38390]
Fri Mar 30 12:48:25 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL100922215819290 (75608675-012b-3c38-b55c-000043ea6398): rows=38390, card=[38390]
Fri Mar 30 12:48:25 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": scan durations (c30625=93ms,c30625=95ms)
Fri Mar 30 12:48:25 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": generation complete (211 ms)
Fri Mar 30 12:48:25 EDT 2012 Thread[DRDAConnThread_50,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": update scheduled, reason=[t-est=38390, i-est=2355 => cmp=2.7912562815443245] (queueSize=18)

Fri Mar 30 12:48:57 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL081029110443810 (fc33890d-011d-491f-3d8c-0000376d74d3): rows=38390, card=[38390]
Fri Mar 30 12:48:57 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL100922215819290 (75608675-012b-3c38-b55c-000043ea6398): rows=38390, card=[38390]
Fri Mar 30 12:48:57 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": generation complete (243 ms)

Fri Mar 30 12:49:27 EDT 2012 Thread[DRDAConnThread_56,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": update scheduled, reason=[t-est=38390, i-est=2355 => cmp=2.7912562815443245] (queueSize=20)
Fri Mar 30 12:49:36 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL081029110443810 (fc33890d-011d-491f-3d8c-0000376d74d3): rows=38390, card=[38390]
Fri Mar 30 12:49:37 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": wrote stats for index SQL100922215819290 (75608675-012b-3c38-b55c-000043ea6398): rows=38390, card=[38390]
Fri Mar 30 12:49:37 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": scan durations (c30625=111ms,c30625=108ms)
Fri Mar 30 12:49:37 EDT 2012 Thread[index-stat-thread,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": generation complete (238 ms)

Fri Mar 30 12:49:37 EDT 2012 Thread[DRDAConnThread_49,5,main] {istat} ""PKG_9145E_V1"".""ACCOUNTTABLE_CONFIG_BUNDLE"": update scheduled, reason=[t-est=38390, i-est=2355 => cmp=2.7912562815443245] (queueSize=18)


As can be seen, the ""i-est"" appears to be wrong and is used over and over even though the statistics for the indexes have been updated.

",Major,Kristian Waagan,,2012-03-30T17:20:54.000+0000,indexStat daemon processing tables over and over even when there are no changes in the tables,Closed,bug,Bug
2013-02-20T04:24:48.000+0000,DERBY-5546,Fixed,"In contrast, ResultSet#updateBigDecimal on a FLOAT or DOUBLE column gives the expected error on underflow. Cf. the attached repro program MissingUnderflowCheck.
",Minor,Dag H. Wanvik,,2011-12-16T18:08:12.000+0000,ResultSet#updateBigDecimal on a REAL column does not do underflow checking,Closed,bug,Bug
2013-02-22T17:29:17.000+0000,DERBY-6079,Fixed,"100's of errors in nightly test, all seem to be a null pointer while processing policy files during setup. 
problem is in jvm code, and it seems specific to the weme6.2 jvm.

The only change being tested in this run was 
 For instance:
330) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)java.lang.NullPointerException
	at com.ibm.oti.util.DefaultPolicy.addGrant(DefaultPolicy.java:619)
	at com.ibm.oti.util.DefaultPolicy.readPolicy(DefaultPolicy.java:608)
	at com.ibm.oti.util.DefaultPolicy.getSystemPolicy(DefaultPolicy.java:922)
	at com.ibm.oti.util.DefaultPolicy.getPermissionsImpl(DefaultPolicy.java:114)
	at com.ibm.oti.util.DefaultPolicy$1.run(DefaultPolicy.java:67)
	at java.security.AccessController.doPrivileged(AccessController.java:204)
	at com.ibm.oti.util.DefaultPolicy.privateGetPermissions(DefaultPolicy.java:65)
	at com.ibm.oti.util.DefaultPolicy.getPermissions(DefaultPolicy.java:53)
	at java.security.Policy.getPermissions(Policy.java:131)
	at java.security.ProtectionDomain.implies(ProtectionDomain.java:177)
	at java.security.AccessController.checkPermission(AccessController.java:99)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:534)
	at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:331)
	at java.lang.System.getProperty(System.java:384)
	at java.lang.System.getProperty(System.java:366)
	at org.apache.derbyTesting.junit.BaseTestCase$3.run(BaseTestCase.java:292)
	at java.security.AccessController.doPrivileged(AccessController.java:204)
	at org.apache.derbyTesting.junit.BaseTestCase.getSystemProperty(BaseTestCase.java:288)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:86)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:868)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

Here is link to all errors:
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-suites.All_diff.txt
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-derbyall_diff.txt",Major,Mike Matrigali,,2013-02-20T00:51:03.000+0000,100's of errors in nightly test run on weme after jacoco property/priviledges checkin,Closed,bug,Bug
2013-12-19T18:25:11.000+0000,DERBY-5865,Fixed,"I saw this failure on IBM 1.7 on 7/17/2012

http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm17/1362738-derbyall_diff.txt

********* Diff file derbyall/storeall/storemore/TestDurabilityProperty.diff
*** Start: TestDurabilityProperty jdk1.7.0 storeall:storemore 2012-07-18 01:45:06 ***
1a2,5
> FAIL -- derby.system.durability=test mode seems to be broken.
> -- In this mode one would expect that inserts with autocommit off and on would be in the same range as syncs are not happening but the difference here seems to be more than the approximate estimated range.
> -- Also comparing the time taken to do the inserts without this property set seems to be in the same range as with this property set.
> -- Please note this test times inserts and approximate estimates were considered to report this observation.
Test Failed.
*** End:   TestDurabilityProperty jdk1.7.0 storeall:storemore 2012-07-18 01:46:39 ***",Major,Myrna van Lunteren,,2012-07-19T13:28:25.000+0000,On IBM 1.7 TestDurabilityProperty fails with  FAIL -- derby.system.durability=test mode seems to be broken.,Closed,bug,Bug
2013-06-14T16:49:28.000+0000,DERBY-5652,Fixed,"I had accidentally put a colon at the end of the derby.authentication.provider property, and then an assert failed during authentication:

$ java -Dij.exceptionTrace=true -Dderby.authentication.provider=NATIVE:auth: -jar /code/derby/trunk/jars/sane/derbyrun.jar ij
ij version 10.9
ij> connect 'jdbc:derby:db;create=true;user=test;password=test';
ERROR XJ001: Java exception: 'ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure'.
java.sql.SQLException: Java exception: 'ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:634)
	at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(EmbedConnection30.java:73)
	at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(EmbedConnection40.java:53)
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255)
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:143)
	at java.sql.DriverManager.getConnection(DriverManager.java:582)
	at java.sql.DriverManager.getConnection(DriverManager.java:154)
	at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:1528)
	at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:1358)
	at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1143)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
	at org.apache.derby.iapi.tools.run.main(run.java:53)
Caused by: java.sql.SQLException: Java exception: 'ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
	... 23 more
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED
	at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98)
	at org.apache.derby.impl.jdbc.Util.ASSERT(Util.java:179)
	at org.apache.derby.impl.jdbc.EmbedConnection.restoreContextStack(EmbedConnection.java:2570)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:636)
	at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(EmbedConnection30.java:73)
	at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(EmbedConnection40.java:53)
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255)
	at org.apache.derby.impl.jdbc.authentication.NativeAuthenticationServiceImpl.authenticateRemotely(NativeAuthenticationServiceImpl.java:417)
	at org.apache.derby.impl.jdbc.authentication.NativeAuthenticationServiceImpl.authenticateUser(NativeAuthenticationServiceImpl.java:312)
	at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.authenticate(AuthenticationServiceBase.java:257)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(EmbedConnection.java:1257)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:404)
	... 17 more",Major,Richard N. Hillegas,,2012-03-14T14:38:14.000+0000,Assert failure when bootstrapping NATIVE with invalid provider string,Closed,bug,Bug
2013-06-27T22:54:57.000+0000,DERBY-5886,Fixed,"SQLState.FILE_CANNOT_REMOVE_FILE maps to a message which has 2 arguments. This SQLState is used many times. It is variously given 1, 2, or 3 arguments. It's unclear whether we need multiple messages here or whether a single message could be pressed into service for all cases. As it is, some of these invocations are going to generate confusing garbage for the user. This SQLState is used in the following classes:

java/engine/org/apache/derby/impl/store/raw/data/EncryptData.java
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java
",Major,Mike Matrigali,,2012-07-27T19:32:13.000+0000,FILE_CANNOT_REMOVE_FILE exception prints garbage.,Closed,bug,Bug
2013-06-27T22:21:22.000+0000,DERBY-5687,Fixed,"DERBY-4437 attempted to improve the concurrency of identity columns by using SYSSEQUENCE-style sequence generators. These improvements caused NsTest to behave differently than it used to and they disclosed a problem in clearing the identity cache. The community lost confidence in this solution and it was backed out of the 10.8 branch under issue DERBY-5448. This new issue is filed to back the improvements out of the 10.9 trunk. Further useful discussion about how to improve the concurrency and correctness of identity columns has been taking place on DERBY-5443 and DERBY-5493.

For the 10.9 release, identity columns will return to their old behavior of being ill-suited for high concurrency applications. Applications which need higher concurrency should be re-coded to use sequences rather than identity columns.",Major,Richard N. Hillegas,,2012-04-09T12:58:11.000+0000,Back out the concurrency improvements for identity columns introduced by derby-4437,Closed,bug,Bug
2013-05-30T18:01:19.000+0000,DERBY-6045,Fixed,"I have a table with a long integer primary key field and 11 million rows. I seem to be unable to load large chunks of rows via id in a reasonably efficient manner.

  1. If I do individual lookups via the primary key, then a fast indexed lookup occurs. However, if I do large numbers of such queries, then the time is overwhelmed by round-trip overhead which makes everything incredibly slow.

  2. If I use a single query with a disjunction of the primary keys of interest,  then a table scan is performed (even if the clause only contains 1-3 items), which walks over 11 million rows...incredibly inefficient.

  3. If I use an IN clause, then a table scan is performed (even if the clause only contains 1-3 items), which walks over 11 million rows...incredibly inefficient.

I'm guessing that this might have something to do with the fact that I'm using large integers and really big numbers that don't start anywhere at or about 1 for my keys. Could this possibly be confusing the optimizer?

Here are the unlimited query plans for the 3 cases that I enumerated:
*********************************************************************************************

[EL Fine]: 2013-01-17 11:09:53.384--ServerSession(582235416)--Connection(1430986883)--Thread(Thread[""Initial Lisp Listener"",5,SubL Thread Group])--SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?)
	bind => [2251799814033500]

Thu Jan 17 11:09:53 CST 2013 Thread[""Initial Lisp Listener"",5,SubL Thread Group] (XID = 4711079), (SESSIONID = 3), SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?) ******* Project-Restrict ResultSet (3):
Number of opens = 1
Rows seen = 1
Rows filtered = 0
restriction = false
projection = true
	constructor time (milliseconds) = 0
	open time (milliseconds) = 0
	next time (milliseconds) = 0
	close time (milliseconds) = 0
	restriction time (milliseconds) = 0
	projection time (milliseconds) = 0
	optimizer estimated row count: 1.00
	optimizer estimated cost: 6.59
Source result set:
	Index Row to Base Row ResultSet for FORMULA_TERM:
	Number of opens = 1
	Rows seen = 1
	Columns accessed from heap = {1, 2, 3, 4, 5, 6, 7, 8}
		constructor time (milliseconds) = 0
		open time (milliseconds) = 0
		next time (milliseconds) = 0
		close time (milliseconds) = 0
		optimizer estimated row count: 1.00
		optimizer estimated cost: 6.59
		Index Scan ResultSet for FORMULA_TERM using constraint KB_FORMULA_TERM_TERM_ID_PK at read committed isolation level using share row locking chosen by the optimizer
		Number of opens = 1
		Rows seen = 1
		Rows filtered = 0
		Fetch Size = 1
			constructor time (milliseconds) = 0
			open time (milliseconds) = 0
			next time (milliseconds) = 0
			close time (milliseconds) = 0
			next time in milliseconds/row = 0

		scan information:
			Bit set of columns fetched=All
			Number of columns fetched=2
			Number of deleted rows visited=0
			Number of pages visited=3
			Number of rows qualified=1
			Number of rows visited=1
			Scan type=btree
			Tree height=-1
			start position:
				>= on first 1 column(s).
				Ordered null semantics on the following columns: 
			stop position:
				> on first 1 column(s).
				Ordered null semantics on the following columns: 
			qualifiers:
				None
			optimizer estimated row count: 1.00
			optimizer estimated cost: 6.59

[EL Fine]: 2013-01-17 11:01:00.732--ServerSession(1237006689)--Connection(927179828)--Thread(Thread[""Initial Lisp Listener"",5,SubL Thread Group])--SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?))
	bind => [2251799814033500, 2251799814033501, 2251799814033499]

Thu Jan 17 11:01:10 CST 2013 Thread[""Initial Lisp Listener"",5,SubL Thread Group] (XID = 4711078), (SESSIONID = 3), SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?)) ******* Project-Restrict ResultSet (3):
Number of opens = 1
Rows seen = 3
Rows filtered = 0
restriction = false
projection = true
	constructor time (milliseconds) = 0
	open time (milliseconds) = 0
	next time (milliseconds) = 0
	close time (milliseconds) = 0
	restriction time (milliseconds) = 0
	projection time (milliseconds) = 0
	optimizer estimated row count: 1176730.30
	optimizer estimated cost: 5931065.54
Source result set:
	Project-Restrict ResultSet (2):
	Number of opens = 1
	Rows seen = 11767298
	Rows filtered = 11767295
	restriction = true
	projection = false
		constructor time (milliseconds) = 0
		open time (milliseconds) = 0
		next time (milliseconds) = 0
		close time (milliseconds) = 0
		restriction time (milliseconds) = 0
		projection time (milliseconds) = 0
		optimizer estimated row count: 1176730.30
		optimizer estimated cost: 5931065.54
	Source result set:
		Table Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer
		Number of opens = 1
		Rows seen = 11767298
		Rows filtered = 0
		Fetch Size = 16
			constructor time (milliseconds) = 0
			open time (milliseconds) = 0
			next time (milliseconds) = 0
			close time (milliseconds) = 0
			next time in milliseconds/row = 0

		scan information:
			Bit set of columns fetched=All
			Number of columns fetched=9
			Number of pages visited=34358
			Number of rows qualified=11767298
			Number of rows visited=11767298
			Scan type=heap
			start position:
				null
			stop position:
				null
			qualifiers:
				None
			optimizer estimated row count: 1176730.30
			optimizer estimated cost: 5931065.54

[EL Fine]: 2013-01-17 11:27:00.627--ServerSession(1237006689)--Connection(1688096771)--Thread(Thread[""Initial Lisp Listener"",5,SubL Thread Group])--SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (?,?,?))
	bind => [2251799814033500, 2251799814033501, 2251799814033499]

Thu Jan 17 11:47:26 CST 2013 Thread[""Initial Lisp Listener"",5,SubL Thread Group] (XID = 4711080), (SESSIONID = 3), SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (?,?,?)) ******* Project-Restrict ResultSet (3):
Number of opens = 1
Rows seen = 3
Rows filtered = 0
restriction = false
projection = true
	constructor time (milliseconds) = 0
	open time (milliseconds) = 0
	next time (milliseconds) = 0
	close time (milliseconds) = 0
	restriction time (milliseconds) = 0
	projection time (milliseconds) = 0
	optimizer estimated row count: 1176730.30
	optimizer estimated cost: 5931065.54
Source result set:
	Project-Restrict ResultSet (2):
	Number of opens = 1
	Rows seen = 11767298
	Rows filtered = 11767295
	restriction = true
	projection = false
		constructor time (milliseconds) = 0
		open time (milliseconds) = 0
		next time (milliseconds) = 0
		close time (milliseconds) = 0
		restriction time (milliseconds) = 0
		projection time (milliseconds) = 0
		optimizer estimated row count: 1176730.30
		optimizer estimated cost: 5931065.54
	Source result set:
		Table Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer
		Number of opens = 1
		Rows seen = 11767298
		Rows filtered = 0
		Fetch Size = 16
			constructor time (milliseconds) = 0
			open time (milliseconds) = 0
			next time (milliseconds) = 0
			close time (milliseconds) = 0
			next time in milliseconds/row = 0

		scan information:
			Bit set of columns fetched=All
			Number of columns fetched=9
			Number of pages visited=34358
			Number of rows qualified=11767298
			Number of rows visited=11767298
			Scan type=heap
			start position:
				null
			stop position:
				null
			qualifiers:
				None
			optimizer estimated row count: 1176730.30
			optimizer estimated cost: 5931065.54
",Major,Mamta A. Satoor,,2013-01-17T17:59:56.000+0000,in list multi-probe by primary key not chosen on tables with >256 rows,Closed,bug,Bug
2013-06-14T16:39:24.000+0000,DERBY-5891,Fixed,"The messages are:

42XAC=La valeur d'''INCREMENT BY'' ne peut pas \u00EAtre z\u00E9ro.

XRE41=Op\u00E9ration de r\u00E9plication ''failover'' ou ''stopSlave'' refus\u00E9e sur la base de donn\u00E9es esclave car la connexion avec le ma\u00EEtre est active. Emettez plut\u00F4t l''op\u00E9ration ''failover'' ou '''stopMaster'' sur la base de donn\u00E9es ma\u00EEtre.",Minor,Richard N. Hillegas,,2012-08-03T14:59:51.000+0000,The French translations of a couple engine messages need to have their single-quotes escaped.,Closed,bug,Bug
2013-03-14T07:52:24.000+0000,DERBY-5632,Fixed,"Tried to make a quick database backup by freezing the database, performing a ZFS snapshot, and then unfreezing the database.   The database was frozen but then a connection to the database could not be established to unfreeze the database.

Looking at the stack trace of the network server, , I see 3 threads that are trying to process a connection request.   Each of these is waiting on:

                at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(Unknown Source)
                - waiting to lock <0xfffffffd3a7fcc68> (a org.apache.derby.impl.services.cache.ConcurrentCache)

That object is owned by:

                - locked <0xfffffffd3a7fcc68> (a org.apache.derby.impl.services.cache.ConcurrentCache)
                at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)
                at org.apache.derby.impl.store.access.RAMTransaction.openGroupFetchScan(Unknown Source)
                at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(Unknown Source)
                at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.runExplicitly(Unknown Source)
                at org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateStatistics(Unknown Source)

which itself is waiting for the object:

                at java.lang.Object.wait(Native Method)
                - waiting on <0xfffffffd3ac1d608> (a org.apache.derby.impl.store.raw.log.LogToFile)
                at java.lang.Object.wait(Object.java:485)
                at org.apache.derby.impl.store.raw.log.LogToFile.flush(Unknown Source)
                - locked <0xfffffffd3ac1d608> (a org.apache.derby.impl.store.raw.log.LogToFile)
                at org.apache.derby.impl.store.raw.log.LogToFile.flush(Unknown Source)
                at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.flush(Unknown Source)

So basically what I think is happening is that the database is frozen, the statistics are being updated on another thread which has the ""org.apache.derby.impl.services.cache.ConcurrentCache"" locked and then waits for the LogToFile lock and the connecting threads are waiting to lock ""org.apache.derby.impl.services.cache.ConcurrentCache"" to connect and these are where the database is going to be unfrozen.    Not a deadlock as far as the JVM is concerned but it will never leave this state either.


",Major,Knut Anders Hatlen,,2012-02-27T19:28:29.000+0000,Logical deadlock happened when freezing/unfreezing the database,Closed,bug,Bug
2013-08-14T20:25:03.000+0000,DERBY-5560,Fixed,"There is a Java deadlock between LogicalConnection40 and ClientXAConnection40.  The order of calls that cause the deadlock are:

Thread 1
----
LogicalConnection.close
ClientPooledConnection.recycleConnection

Thread 2
----
ClientPooledConnection.close
LogicalConnection.nullPhysicalConnection



Thread 1 acquires a lock on the LogicalConnection and attempts to acquire a lock on the ClientPooledConnection
Thread 2 acquires a lock on the ClientPooledConnection and attempts to acquire a lock on the LogicalConnection

In production this occurs when one thread is committing a transaction and another thread is trying to close the connection.  This occurred because the Glassfish connection pool is setup to close all connections on any error on any connection and an error has been detected on another connection in the pool.

",Major,Katherine Marsden,,2011-12-28T15:12:04.000+0000,Java deadlock between LogicalConnection40 and ClientXAConnection40 (patch attached),Closed,bug,Bug
2013-03-12T08:25:31.000+0000,DERBY-6073,Fixed,"StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails() assumes that the client-side statement cache will have been primed by a previous test case, testCacheOverflow(). On Java 7 and Java 8 the test order is not deterministic. If testPoolingEnabledByCheckingImplementationDetails() is the first test case to run, then it fails with this error:

org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.assertClassName(StatementPoolingTest.java:147)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails(StatementPoolingTest.java:89)

I will attach a patch which forces testPoolingEnabledByCheckingImplementationDetails() to be first in the test order. With this patch, StatementPoolingTest fails for me on Java 7 when run on the 10.9 branch as well as on trunk.
",Major,Richard N. Hillegas,,2013-02-15T16:11:27.000+0000,Test ordering instability in StatementPoolingTest,Closed,bug,Bug
2012-06-18T06:48:28.000+0000,DERBY-5797,Fixed,"I noticed a test failure in UpdateStatisticsTest.testDisposableStatsEagerness.

The link is: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1345812-suites.All_diff.txt

The stack trace: 

testDisposableStatsEagerness(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError
		 at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testDisposableStatsEagerness(UpdateStatisticsTest.java:594)
		 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
		 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
		 at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
		 at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
		 at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
		 at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
		 at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
		 at junit.extensions.TestSetup.run(TestSetup.java:25)
		 at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
		 at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
		 at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
		 at junit.extensions.TestSetup.run(TestSetup.java:25)
		 at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Kristian Waagan,,2012-06-04T18:03:51.000+0000,AssertionFailedError in functionTests.tests.lang.UpdateStatisticsTest.testDisposableStatsEagerness ,Closed,bug,Bug
2012-09-25T21:11:55.000+0000,DERBY-5775,Fixed,"When the Upgrade tests fail to access the oldVersions due to an IOException the message is not very clear as to what the IOException was. e,g. can output 
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!
ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!

Time: 0.008

OK (0 tests)


The code in OldVersions.getVersions()

          }
        } catch (IOException ioe) {
            alarm(""Error reading from file: "" + oldVersionsPath + ioe.getMessage());
        }
        
should print the exception stack trace or possibly even fail on IOException.






",Trivial,Myrna van Lunteren,,2012-05-21T17:32:04.000+0000,Upgrade tests should  print full IOException stack trace when it fails to access old versions,Closed,bug,Bug
2012-07-03T03:39:18.000+0000,DERBY-5750,Fixed,"When empty string is passed for the index name to the update statistics procedure, it throws following exception(passing an empty string for table to compress table procedure also gives simiar exception). The new stored procedure being created through DERBY-4115 for dropping the statistics also gave similar exception


java -Dij.exceptionTrace=true org.apache.derby.tools.ij
connect 'jdbc:derby:db1;create=true'; 
create table t1(c11 int, statistics int not null);
call syscs_util.SYSCS_UPDATE_STATISTICS( 'APP', 'T1', '' );
ERROR 38000: The exception 'java.sql.SQLException: Syntax error: Encountered ""\"""" at line 1, column 42.' was thrown while evaluating an expression.
java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered ""\"""" at line 1, column 42.' was thrown while evaluating an expression.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360)
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559)
        at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
        at org.apache.derby.tools.ij.main(ij.java:59)
Caused by: java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered ""\"""" at line 1, column 42.' was thrown while evaluating an expression.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
        ... 17 more
Caused by: java.sql.SQLException: Syntax error: Encountered ""\"""" at line 1, column 42.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360)
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:153)
        at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107)
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685)
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513)
        at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753)
        at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at java.lang.reflect.Method.invoke(Method.java:611)
        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
        ... 10 more
Caused by: ERROR 42X01: Syntax error: Encountered ""\"""" at line 1, column 42.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)
        at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153)
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357)
        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:134)
        ... 24 more
ERROR 42X01: Syntax error: Encountered ""\"""" at line 1, column 42.
java.sql.SQLSyntaxErrorException: Syntax error: Encountered ""\"""" at line 1, column 42.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:92)
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360)
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:153)
        at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107)
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685)
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513)
        at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753)
        at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at java.lang.reflect.Method.invoke(Method.java:611)
        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559)
        at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
        at org.apache.derby.tools.ij.main(ij.java:59)
Caused by: java.sql.SQLException: Syntax error: Encountered ""\"""" at line 1, column 42.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
        ... 30 more
Caused by: ERROR 42X01: Syntax error: Encountered ""\"""" at line 1, column 42.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)
        at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153)
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357)
        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:134)
        ... 24 more
Issue the 'help' command for general information on IJ command syntax.
Any unrecognized commands are treated as potential SQL commands and executed directly.
Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.
ij>
",Minor,Mamta A. Satoor,,2012-05-09T03:56:42.000+0000,Sending an empty string as table name to compress table procedure or empty string as index name to update statistics procedure makes the parser throw an exception.,Closed,bug,Bug
2012-10-09T18:55:11.000+0000,DERBY-5567,Fixed,"Saw this when running suitesAll on 10.8.2.2:

1) testDropColumn(org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest)java.sql.SQLException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object.

	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Statement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest.testDropColumn(AlterTableTest.java:2465)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: org.apache.derby.client.am.SqlException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.am.Statement.completeExecuteImmediate(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readExecuteImmediate(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(Unknown Source)
	at org.apache.derby.client.am.Statement.readExecuteImmediate(Unknown Source)
	at org.apache.derby.client.am.Statement.flowExecute(Unknown Source)
	at org.apache.derby.client.am.Statement.executeUpdateX(Unknown Source)
	... 55 more

Prior to this, though, I saw this on the console, but no error/failure. Probably not related, I believe we have seen this before:

java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:472)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.textui.TestRunner.doRun(TestRunner.java:121)
	at junit.textui.TestRunner.start(TestRunner.java:185)
	at junit.textui.TestRunner.main(TestRunner.java:143)",Major,Dag H. Wanvik,,2012-01-05T13:35:04.000+0000,AlterTableTest#testDropColumn fails: drop view cannot be performed due to dependency,Closed,bug,Bug
2012-09-18T15:06:48.000+0000,DERBY-5663,Fixed,"Derby has a large data suite which runs LobLimitsTest with small data size, large data size and with embedded and network server configurations. The large data suite is run as follows
time java  -Dderby.tests.trace=true -Dderby.infolog.append=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.largedata._Suite > runall.out 2>&1

I made a simple change to the suite to log statement text as shown in the attached patch(DERBY5663_patch1.txt). This causes the large data suite to run into NPE (NPE can be seen in runall.out) as shown below. Not sure what I am doing wrong while trying to set the property, which results in NPE.
.
(emb)largedata.Derby5624Test.testDERBY_5624 used 411473 ms .
(emb)largedata.LobLimitsTest.test_01_Blob used 1555 ms .
(emb)largedata.LobLimitsTest.test_02_BlobNegative used 42 ms .
(emb)largedata.LobLimitsTest.test_03_Clob1 used 1436 ms .
(emb)largedata.LobLimitsTest.test_04_Clob2 used 1707 ms .
(emb)largedata.LobLimitsTest.test_05_ClobNegative used 967 ms E.
(emb)largedata.LobLimitsTest.test_01_Blob used 2929139 ms .
(emb)largedata.LobLimitsTest.test_02_BlobNegative used 154 ms .
(emb)largedata.LobLimitsTest.test_03_Clob1 used 2854121 ms .
(emb)largedata.LobLimitsTest.test_04_Clob2 used 656137 ms .
(emb)largedata.LobLimitsTest.test_05_ClobNegative used 331288 ms EF
Time: 7,589.168
There were 2 errors:
1) LobLimitsTestjava.lang.NullPointerException
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setProperties(SystemPropertyTestSetup.java:116)
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp(SystemPropertyTestSetup.java:87)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
2) LobLimitsTestjava.sql.SQLNonTransientConnectionException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166)
	at java.sql.DriverManager.getConnection(DriverManager.java:322)
	at java.sql.DriverManager.getConnection(DriverManager.java:297)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1633)
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)
	at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:104)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager
	at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125)
	at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538)
	at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431)
	at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294)
	at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121)
	at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826)
	at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762)
	at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591)
	at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406)
	at org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:220)
	at org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:74)
	at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269)
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157)
	... 43 more
There was 1 failure:
1) LobLimitsTestjunit.framework.ComparisonFailure: Engine shutdown expected:<XJ015> but was:<08001>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:790)
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1751)
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.tearDown(SystemPropertyTestSetup.java:108)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
Caused by: java.sql.SQLException: No suitable driver
	at java.sql.DriverManager.getConnection(DriverManager.java:330)
	at java.sql.DriverManager.getConnection(DriverManager.java:297)
	at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:163)
	at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:140)
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1748)
	... 31 more

FAILURES!!!
Tests run: 11,  Failures: 1,  Errors: 2

",Major,Mamta A. Satoor,,2012-03-18T04:45:11.000+0000,Getting NPE when trying to set derby.language.logStatementText property to true inside a junit suite.,Closed,bug,Bug
2012-08-28T16:28:04.000+0000,DERBY-5531,Fixed,"ij> connect 'jdbc:derby:colldb;territory=en;collation=TERRITORY_BASED;create=true';
ij> create table t(x varchar(10) unique);
0 rows inserted/updated/deleted
ij> insert into t values null;
ERROR XJ001: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar: org.apache.derby.shared.common.sanity.AssertFailure'.
java.sql.SQLException: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar: org.apache.derby.shared.common.sanity.AssertFailure'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2288)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
	at org.apache.derby.iapi.tools.run.main(run.java:53)
Caused by: java.sql.SQLException: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar: org.apache.derby.shared.common.sanity.AssertFailure'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
	... 18 more
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)
	at org.apache.derby.impl.store.access.btree.OpenBTree.isIndexableRowConsistent(OpenBTree.java:515)
	at org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:679)
	at org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1374)
	at org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:210)
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:440)
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:383)
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:590)
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268)
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:453)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:999)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:519)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
	... 11 more",Major,Mamta A. Satoor,,2011-12-12T12:34:21.000+0000,Assert failure when inserting NULL into indexed column with territory-based collation,Closed,bug,Bug
2012-09-12T23:20:04.000+0000,DERBY-5527,Fixed,"Creating a directory and copying scripts into the directory
http://db.apache.org/derby/docs/dev/getstart/

The fifth step of the procedure to ""Creating a directory and copying scripts into the directory"", there is a ""verify copy"", but the Current path is on the DERBYTUTOR directory, but in the previous step, the procedure indicated to change to that directory.

I mean, the verify should be only a ""dir"" or ""ls"" without any parameter.",Trivial,Camilla Haase,,2011-12-09T11:38:51.000+0000,Documentation problem: 5 - Verifying the copy of the files,Closed,bug,Bug
2012-09-13T23:22:43.000+0000,DERBY-5638,Fixed,"I've seen the following failure when running the largedata suite:

(emb)largedata.Derby5624Test.testDERBY_5624 used 518403 ms .
(emb)largedata.LobLimitsTest.test_01_Blob used 2422 ms .
(emb)largedata.LobLimitsTest.test_02_BlobNegative used 31 ms .
(emb)largedata.LobLimitsTest.test_03_Clob1 used 2375 ms .
(emb)largedata.LobLimitsTest.test_04_Clob2 used 3234 ms .
(emb)largedata.LobLimitsTest.test_05_ClobNegative used 516 ms .
(net)largedata.LobLimitsTest.test_01_Blob used 5360 ms .
(net)largedata.LobLimitsTest.test_02_BlobNegative used 32 ms .
(net)largedata.LobLimitsTest.test_03_Clob1 used 2078 ms .
(net)largedata.LobLimitsTest.test_04_Clob2 used 2390 ms .
(net)largedata.LobLimitsTest.test_05_ClobNegative used 938 ms .
(emb)largedata.LobLimitsTest.test_01_Blob used 9188238 ms .
(emb)largedata.LobLimitsTest.test_02_BlobNegative used 109 ms .
(emb)largedata.LobLimitsTest.test_03_Clob1 used 8116714 ms .
(emb)largedata.LobLimitsTest.test_04_Clob2 used 2164002 ms .
(emb)largedata.LobLimitsTest.test_05_ClobNegative used 685745 ms E
Time: 22,320.138
There was 1 error:
1) LobLimitsTestjava.sql.SQLException: Table/View 'BLOBTBL' already exists in Schema 'APP'.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Statement.execute(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.setupTables(LobLimitsTest.java:107)
	at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest$1.decorateSQL(LobLimitsTest.java:141)
	at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:112)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: org.apache.derby.client.am.SqlException: Table/View 'BLOBTBL' already exists in Schema 'APP'.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.am.Statement.completeExecuteImmediate(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readExecuteImmediate(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(Unknown Source)
	at org.apache.derby.client.am.Statement.readExecuteImmediate(Unknown Source)
	at org.apache.derby.client.am.Statement.flowExecute(Unknown Source)
	at org.apache.derby.client.am.Statement.executeX(Unknown Source)
	... 26 more

Unfortunately, when this happens, there seems to be no 'fail' directory created. The derby.log in the system directory looks very innocent (just some start up and shutting down of the database), and the serverConsoleOutput.log only has the typical 'failed to find db 'wombat' messages'.

Note, when this happens, the suite exits, so that instead of the expected 20 (or 21 on windows, see DERBY-5624 for reason for skipping on Linux default installs with 1024 max open files) we only get 15 (or 16) tests run - if the test doesn't fail it goes on to run the last 5 fixtures again for network server.
",Major,Mamta A. Satoor,,2012-03-01T19:43:10.000+0000,intermittent test failure in test_05_ClobNegative when running full largedata._Suite; LobLimitsTestjava.sql.SQLException: Table/View 'BLOBTBL' already exists in Schema 'APP'.,Closed,bug,Bug
2012-09-20T18:51:47.000+0000,DERBY-5614,Fixed,"Inserting into a global temporary table (GTT) while selecting data from a VTI fails with a NullPointerException:

Caused by: java.lang.NullPointerException
        at org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getEmptyHeapRow(WriteCursorConstantAction.java:324)
        at org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(InsertResultSet.java:1209)
        at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:466)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
        ... 6 more

Investigation exposed the fact that bulk insert doesn't support a GTT as the target, and further that Derby enables bulk insert when the source is a VTI.",Major,Kristian Waagan,,2012-02-14T14:43:19.000+0000,NullPointerException with INSERT INTO [global temporary table] SELECT ... FROM [VTI],Closed,bug,Bug
2012-10-01T14:41:04.000+0000,DERBY-5561,Fixed,"There are race conditions with checkForNullPhysicalConnection calls in LogicalConnection.  checkForNullPhysicalConnection is not synchronized and it checks for the member ""phsyicalConnection"" which can be cleared by ""nullPhsyicalConnection"" (which is synchronized) and ""close"" (which is synchronized) and ""closeWithoutRecyclingToPool"" (which is synchronized).

This affects ""nativeSQL"", ""getAutoCommit"", ""getTransactionIsolation"", ""getWarnings"", ""isReadOnly"", ""getCatalog"", ""getTypeMap"", ""createStatement"", ""prepareCall"", ""prepareStatement"", ""setHoldability"", ""getHoldability"", ""setSavePoint"", ""rollBack"", ""releaseSavePoint"", ""getSchema"", ""setSchema"".

All of these call ""checkForNullPhysicalConnection"" and then use the member ""physicalConnection"" after that call returns.  Because these methods are not synchronized, between the time ""checkForNullPhysicalConnectoin"" returns and ""physicalConnection"" is used, the ""physicalConnection"" member could be set to null and then a NPE occurs.

Probably all of these methods should be changed to synchronized.",Major,Kristian Waagan,,2011-12-28T15:26:51.000+0000,Race conditions in LogicalConnection checking for a null physical connection,Closed,bug,Bug
2012-11-06T10:24:27.000+0000,DERBY-5795,Fixed,"The documentation that is bundled with the Derby releases does not include the three .css stylesheets that are copied into the out/<manual-name> directory by the Ant task that builds the HTML files. These need to be included in the docs/html/<manual-name> directories for the releases.

I believe this problem has existed from the beginning -- it certainly goes back several releases. ",Minor,Richard N. Hillegas,,2012-06-01T17:13:50.000+0000,Documentation in release doesn't include stylesheets,Closed,bug,Bug
2012-10-17T15:49:13.000+0000,DERBY-5918,Fixed,"You can't use CREATE TABLE AS SELECT from a table with a BOOLEAN column. This limitation was put in when CREATE TABLE AS SELECT was added. At that time you could not create user tables with BOOLEAN columns and we did not want people to be able to subvert that restriction by using CREATE TABLE AS SELECT from a system table with BOOLEAN columns. The following script shows this problem:

connect 'jdbc:derby:memory:db;create=true';

create table t1( a int );
create table t2( a boolean );

create table t3 as select * from t1 with no data;
create table t4 as select * from t2 with no data;
",Major,Richard N. Hillegas,,2012-09-06T17:41:44.000+0000,CREATE TABLE AS SELECT doesn't work on tables with BOOLEAN columns,Closed,bug,Bug
2012-10-15T14:51:08.000+0000,DERBY-5938,Fixed,"The documentation says that Derby works with Java 1.4.2. This is not true on trunk, as support for Java 1.4.2 is removed for Derby 10.10. A quick search came up with these places that need change:

* Getting started guide:

http://db.apache.org/derby/docs/dev/getstart/tgssetupverify.html
http://db.apache.org/derby/docs/dev/getstart/cgstutorialintro.html
http://db.apache.org/derby/docs/dev/getstart/tgssetupjavaenvir.html
http://db.apache.org/derby/docs/dev/getstart/cgsintsr.html

Need to change the above topics to say that you need JDK 1.5 or later installed to run the examples.

* Developer's guide:

http://db.apache.org/derby/docs/dev/devguide/rdevconcepts713.html

The cell for the combination Multi-User/Embedded mentions potential multi-boot problems in pre-1.4 JVMs. Derby doesn't run on pre-1.4 JVMs anymore (and hasn't done for a long time). However, the multi-boot problem is present on CDC/FP 1.1, which is still a supported platform, so maybe we should change ""pre-1.4"" to ""J2ME"" (or however we usually refer to that platform in the docs).

* Admin guide:

http://db.apache.org/derby/docs/dev/adminguide/cadminappsthenetworkserverandjvms.html

Should say that the server is compatible with Java 5 and above.

* Tools guide:

http://db.apache.org/derby/docs/dev/tools/ctools1003034.html

Although it's technically correct that the tools do run on Java 1.4, it's not possible to access a Derby database with them on Java 1.4 in any supported way (unsupported way: use derbytools.jar from 10.10 and derby.jar from 10.9). So we should change this topic to say Java 5 and above, perhaps also mentioning CDC/Foundation Profile 1.1.",Major,Camilla Haase,,2012-09-26T10:10:59.000+0000,Documentation says Derby works with Java 1.4.2,Closed,bug,Bug
2013-01-24T16:39:01.000+0000,DERBY-5885,Fixed,"In most Derby messages, arguments appear in ascending order. That is, {0} occurs in the message first, then {1}, then {2}, and so on. Sometimes, however, arguments occur out of sequence. When this happens, the names in the <arg> sub-elements may not agree with the order that the arguments actually occur in the message. This causes MessageBuilder to garble the dita source for the Reference Guide page titled ""SQL error messages and exceptions"".

For instance, here is the messages.xml element for SQLState 22014:

            <msg>
                <name>22014</name>
                <text>The start position for LOCATE is invalid; it must be a positive integer. The index  to start the search from is '{2}'.  The string to search for is '{0}'.  The string to search from is '{1}'. </text>
                <arg>startIndex</arg>
                <arg>searchString</arg>
                <arg>fromString</arg>
            </msg>

This gives rise to the following garbled text in the generated reference guide page:

""The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '<fromString>'. The string to search for is '<startIndex>'. The string to search from is '<searchString>'. ""

We should re-order the <arg> sub-elements so that the first <arg> sub-lement corresponds to {0}, the second <arg> sub-element corresponds to {1}, and so on.",Major,Richard N. Hillegas,,2012-07-26T19:25:51.000+0000,The order of argument names in messages.xml is sometimes wrong when the arguments occur in the message out of sequence.,Closed,bug,Bug
2012-12-17T10:50:39.000+0000,DERBY-5894,Fixed,"Saw this while running OnlineBackupTest1 trying to repro DERBY-973.

ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:288)
        at org.apache.derby.iapi.error.StandardException.unexpectedUserException(StandardException.java:575)
        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:63)
        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1715)
        at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(EmbedCallableStatement.java:118)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1370)
        at org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.performBackup(OnlineBackup.java:89)
        at org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.run(OnlineBackup.java:60)
        at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.NullPointerException
        at java.util.Hashtable.put(Hashtable.java:401)
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stubFileToRemoveAfterCheckPoint(BaseDataFileFactory.java:1613)
        at org.apache.derby.impl.store.raw.data.RAFContainer.run(RAFContainer.java:1651)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.derby.impl.store.raw.data.RAFContainer.backupContainer(RAFContainer.java:983)
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.backupContainer(BaseContainerHandle.java:1031)
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.backupDataFiles(BaseDataFileFactory.java:2466)
        at org.apache.derby.impl.store.raw.RawStore.backup(RawStore.java:978)
        at org.apache.derby.impl.store.raw.RawStore.backup(RawStore.java:649)
        at org.apache.derby.impl.store.access.RAMAccessManager.backup(RAMAccessManager.java:964)
        at org.apache.derby.impl.db.BasicDatabase.backup(BasicDatabase.java:430)
        at org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE(SystemProcedures.java:961)
        at org.apache.derby.exe.acf33d40c7x0138x6d7cx6df3x0000720ad17b0.g0(Unknown Source)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:592)
        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
        ... 10 more
",Major,Knut Anders Hatlen,,2012-08-06T22:42:58.000+0000,NPE in OnlineBackupTest1 while backing up in stubFileToRemoveAfterCheckPoint,Closed,bug,Bug
2013-02-04T10:39:16.000+0000,DERBY-5933,Fixed,"Hello 
I have a simple database with 100 records.
I am running a SQL query from Netbeans GUI though JDBC

This query was generated by Hibernate ORM.

In certain circumstances the result rowset is not sorting.

When I use  condition morefld2_.mf_id in (5) the result is unsortable.
When I use  condition morefld2_.mf_id in (5,0) the result is sorting properly.
    
 ",Major,Dag H. Wanvik,,2012-09-20T12:29:55.000+0000,SQL sorting error,Closed,bug,Bug
2012-10-08T21:50:54.000+0000,DERBY-5916,Fixed," I got a report of the exception below trying to connect to  database with absolute path and network server and the database name attribute.  I haven't gotten  information  on the derby version or  platform, Below is the url I received with some characters replaced.


ij> connect 'jdbc:derby://localhost:1527/;databaseName=/home/uxxxx/Installs/hxxx_ext/mxxxxxxxx_db;create=true' ;


 java.lang.NullPointerException
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop(Unknown Source)
        at org.apache.derby.impl.services.monitor.TopService.stop(Unknown Source)
        at org.apache.derby.impl.services.monitor.TopService.shutdown(Unknown Source)
        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)
        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)
        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)
        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)
        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)
        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)
        at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source)
        at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source)
        at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source)
        at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source)
        at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source)
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)
        at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)
Cleanup action completed
2012-08-31 22:41:09.216 GMT Thread[DRDAConnThread_10,5,main] (DATABASE = ), (DRDAID = {1}), Java exception: ': java.lang.NullPointerException'.

I wanted to go ahead and file it even without much information as I noticed there was a similar issue reported on the list but never filed:
http://old.nabble.com/Random-DRDA-Error-on-IBM-J9-JVM-td33532717.html#a33532717
",Major,Mamta A. Satoor,,2012-09-01T04:16:09.000+0000,java.lang.NullPointerException org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop() connecting to network server,Closed,bug,Bug
2012-10-16T19:41:47.000+0000,DERBY-5937,Fixed,"As part of our use of derby replication, we shut the slave down if we detect reachability issues with the master. Normally we shut it down, and bring it back up as a regular database in read-only mode.  Then when the master can, it tries to push a fresh copy back to the slave system. However, during the failover=true shutdown on the slave, the log file  "".../name/log/log1.dat"" is still open. 

Because of this open file, at least on Windows, it's impossible to move the database file out of the way, and to install a fresh copy from the master.",Major,Knut Anders Hatlen,,2012-09-24T20:54:04.000+0000,File handle is leaked when a Slave replication is shutdown with failover=true,Closed,bug,Bug
2014-02-20T16:53:21.000+0000,DERBY-6473,Fixed,"Four subsubprotocols are listed in http://db.apache.org/derby/docs/10.10/devguide/cdevdvlp17453.html (Derby JDBC database connection URL), but only three in http://db.apache.org/derby/docs/10.10/ref/rrefjdbc37352.html (Syntax of database connection URLs for applications with embedded databases), which was apparently not updated when we documented in-memory databases. The Reference Manual should be corrected.

Since reference information really belongs in the Reference Manual and duplicate information is hard to maintain, it would probably be a good idea to correct the syntax information in the reference manual topic, remove it from the Developer's Guide topic, and point Developer's Guide readers to the Reference Manual. I'll plan on doing this unless I hear otherwise.",Minor,Camilla Haase,,2014-02-07T21:17:50.000+0000,Manuals are inconsistent in subsubprotocol information,Closed,bug,Bug
2014-03-13T15:51:44.000+0000,DERBY-6478,Fixed,"Knut Anders Hatlen pointed out the following in his review of a patch for DERBY-6236:

""One little inaccuracy in the changed text (existing problem, not introduced by the patch): It seems to imply that only the basic data sources work on Compact Profile 3. That is not the case. The ordinary data sources are supported on CP3. Only CP2 lacks the necessary classes (javax.naming.*) and need the basic data sources. (The basic data sources do work on CP3, though, so it's not a problem if applications choose to use them if they don't need the extra functionality of the ordinary data sources.)""

This means that numerous topics in the Admin Guide, Reference Manual, and Developer's Guide probably need some fixes. For example, the topic ""JDBC support for Java SE 8 Compact Profiles"" in the Reference Manual should probably add something like the following at the end of the topic:

""Users of Compact Profile 3 on the Java SE 8 platform can use either these DataSource classes or the Datasource classes for the full Java SE platform."" 

As another example, the topic ""Network client security"" in the Admin Guide should probably be changed to something like this:

""Derby provides two ClientDataSource implementations. Use the org.apache.derby.jdbc.ClientDataSource class on all supported Java SE versions except Java SE 8 Compact Profiles 1 and 2. On Java SE 8 Compact Profile 2, use the org.apache.derby.jdbc.BasicClientDataSource40 class.""

Please let me know if these tweaks need further tweaking -- in the meantime I will start work on implementing them. Thanks.",Minor,Camilla Haase,,2014-02-13T18:03:26.000+0000,Fix language about supported DataSources for Compact Profiles,Closed,bug,Bug
2013-09-26T18:24:21.000+0000,DERBY-6123,Fixed,"The optional tools require derbytools.jar to run. This should be mentioned in the reference manual documentation.
",Trivial,Camilla Haase,,2013-03-21T21:51:21.000+0000,Optional tools documentation in the reference guide should mention that optional tools require derbytools.jar be in the CLASSPATH,Closed,bug,Bug
2013-05-20T12:34:29.000+0000,DERBY-6206,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-25T15:28:23.000+0000,Cleanup suspect coding practices in misc Derby packages,Closed,bug,Bug
2013-07-04T08:26:44.000+0000,DERBY-6196,Fixed,"I got this failure when running suites.All on a patch for DERBY-6169 (although the part of the test that fails does not involve Derby, so I think it's not caused by the patch):

java.lang.ArrayIndexOutOfBoundsException: -3
	at java.util.ArrayList.elementData(ArrayList.java:371)
	at java.util.ArrayList.set(ArrayList.java:399)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.createRandomSample(SURQueryMixTest.java:211)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.updateRandomSampleOfNRecords(SURQueryMixTest.java:268)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.runTest(SURQueryMixTest.java:119)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)",Minor,Knut Anders Hatlen,,2013-04-23T10:34:37.000+0000,ArrayIndexOutOfBoundsException in SURQueryMixTest,Closed,bug,Bug
2013-07-03T08:42:05.000+0000,DERBY-6114,Fixed,"Seen twice in a row in https://builds.apache.org/job/Derby-10.10-suites.All/ :

junit-lowmem:
    [junit] Running org.apache.derbyTesting.functionTests.tests.memory._Suite
    [junit] Exception in thread ""DRDAConnThread_11"" java.lang.OutOfMemoryError: GC overhead limit exceeded
    [junit] 	at java.util.Properties$LineReader.<init>(Properties.java:405)
    [junit] 	at java.util.Properties.load(Properties.java:341)
    [junit] 	at java.util.PropertyResourceBundle.<init>(PropertyResourceBundle.java:130)
    [junit] 	at java.util.ResourceBundle$Control.newBundle(ResourceBundle.java:2610)
    [junit] 	at java.util.ResourceBundle.loadBundle(ResourceBundle.java:1436)
    [junit] 	at java.util.ResourceBundle.findBundle(ResourceBundle.java:1400)
    [junit] 	at java.util.ResourceBundle.findBundle(ResourceBundle.java:1354)
    [junit] 	at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1296)
    [junit] 	at java.util.ResourceBundle.getBundle(ResourceBundle.java:796)
    [junit] 	at org.apache.derby.iapi.services.i18n.MessageService.getBundleWithEnDefault(MessageService.java:318)
    [junit] 	at org.apache.derby.iapi.services.i18n.MessageService.getBundleForLocale(MessageService.java:53)
    [junit] 	at org.apache.derby.iapi.services.i18n.MessageService.getBundle(MessageService.java:302)
    [junit] 	at org.apache.derby.iapi.services.i18n.MessageService.getCompleteMessage(MessageService.java:97)
    [junit] 	at org.apache.derby.iapi.error.SQLWarningFactory.newSQLWarning(SQLWarningFactory.java:97)
    [junit] 	at org.apache.derby.iapi.error.SQLWarningFactory.newSQLWarning(SQLWarningFactory.java:50)
    [junit] 	at org.apache.derby.iapi.jdbc.BrokeredConnection.statementHoldabilityCheck(BrokeredConnection.java:736)
    [junit] 	at org.apache.derby.iapi.jdbc.BrokeredConnection.prepareStatement(BrokeredConnection.java:690)
    [junit] 	at org.apache.derby.impl.drda.DRDAStatement.prepare(DRDAStatement.java:669)
    [junit] 	at org.apache.derby.impl.drda.DRDAStatement.explicitPrepare(DRDAStatement.java:630)
    [junit] 	at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT(DRDAConnThread.java:3912)
    [junit] 	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:811)
    [junit] 	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:295)
    [junit] Tests run: 67, Failures: 0, Errors: 1, Time elapsed: 1,571.059 sec
    [junit] Test org.apache.derbyTesting.functionTests.tests.memory._Suite FAILED",Minor,Knut Anders Hatlen,,2013-03-20T09:05:28.000+0000,OOME in XAMemTest.testDerby4137_TransactionTimeoutSpecifiedNotExceeded,Closed,bug,Bug
2013-05-20T12:36:08.000+0000,DERBY-6200,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-23T19:49:50.000+0000,Cleanup suspect coding practices in the org.apache.derby.iapi.types package,Closed,bug,Bug
2013-05-28T11:40:28.000+0000,DERBY-6148,Fixed,"I have a query that looks like this:

  SELECT tests.id,tests.item,title FROM tests,item_usage
  WHERE username=? AND user_role>?
  AND item_usage.item=tests.item
  ORDER BY tests.item,title

The result ordering is by item code followed by title, but the item codes are listed in the order in which they appear in the ITEMS table where they are the primary key rather than in ascending order as expected. If however I change the ORDER BY clause to sort by item_usage.item rather than tests.item, it works correctly, even though the two values are the same!

The same thing happens in another unrelated query involving item_usage, and the same workaround cures it.

The relevant tables are defined like so:

  CREATE TABLE item_usage (
    username    VARCHAR(15)   NOT NULL,
    item        VARCHAR(15)   NOT NULL,
    value       SMALLINT      DEFAULT 0,
    CONSTRAINT item_usage_pk  PRIMARY KEY (username,item),
    CONSTRAINT item_usage_1   FOREIGN KEY (username)
                              REFERENCES users(username)
                              ON DELETE CASCADE,
    CONSTRAINT item_usage_2   FOREIGN KEY (item)
                              REFERENCES items(item)
                              ON DELETE CASCADE,
    CONSTRAINT item_usage_3   CHECK (value BETWEEN 0 AND 4)
  );

  CREATE TABLE tests (
    id          INTEGER       GENERATED ALWAYS AS IDENTITY,
    item        VARCHAR(15)   NOT NULL,
    title       VARCHAR(255)  NOT NULL,
    disp        SMALLINT      NOT NULL DEFAULT 0,
    starttime   TIMESTAMP     DEFAULT NULL,
    endtime     TIMESTAMP     DEFAULT NULL,
    offsetx     INTEGER       NOT NULL DEFAULT 0,
    offsety     INTEGER       NOT NULL DEFAULT 0,
    rate        INTEGER       NOT NULL DEFAULT 0,
    duration    INTEGER       NOT NULL DEFAULT 0,
    calibrate   INTEGER       NOT NULL DEFAULT 0,
    deadline    TIMESTAMP     DEFAULT NULL,
    stepsize    INTEGER       NOT NULL DEFAULT 0,
    interval    INTEGER       NOT NULL DEFAULT 0,
    stand       CHAR(1)       DEFAULT NULL,
    hidden      CHAR(1)       DEFAULT NULL,
    repeated    CHAR(1)       DEFAULT NULL,
    private     CHAR(1)       DEFAULT NULL,
    sequential  CHAR(1)       DEFAULT NULL,
    final       CHAR(1)       DEFAULT NULL,
    notes       CLOB          DEFAULT NULL,
    testxml     CLOB          NOT NULL,
    author      VARCHAR(15)   NOT NULL,
    time        TIMESTAMP     NOT NULL,
    CONSTRAINT tests_pk       PRIMARY KEY (id),
    CONSTRAINT tests_1        UNIQUE (item, title),
    CONSTRAINT tests_2        FOREIGN KEY (item)
                              REFERENCES items(item)
                              ON DELETE CASCADE,
    CONSTRAINT tests_3        CHECK (disp BETWEEN 0 AND 100),
    CONSTRAINT tests_4        CHECK (rate BETWEEN 0 AND 100),
    CONSTRAINT tests_5        CHECK (stepsize BETWEEN 0 AND 100)
  );

If I run the query manually I get this, as expected:

  ID  ITEM    TITLE
  37  60001   Test 1
  42  60001   Test 2
  51  60001   Test 3
  17  61303   Test 2a
  16  61303   Test 2b
  7   7205731 Test 2a
  8   7205731 Test 2b

Now, this is actually part of a web app that should turn this into a list of options in a <select> item using the following code:

  while (query.next()) {
    println(""<option value='"" + query.getInt(""id"") + ""'>""
            + encode(query.getString(""item"") + "": ""
            + query.getString(""title"")) + ""</option>"");
  }

What I actually get is this:

  <option value=""17"">61303: Test 2a</option>
  <option value=""16"">61303: Test 2b</option>
  <option value=""7"">7205731: Test 2a</option>
  <option value=""8"">7205731: Test 2b</option>
  <option value=""37"">60001: Test 1</option>
  <option value=""42"">60001: Test 2</option>
  <option value=""51"">60001: Test 3</option>

The results are sorted by item then by title, but the item order is the order in which they were originally inserted into the items table (where the item and item description are stored, referenced by item_usage.item) rather than by item code. 

I've tried to reproduce this behaviour in a simple example, but without success. I have logged the query plans for both versions; the log output is as follows, with the INCORRECT query (using ORDER BY tests.item) followed later by the CORRECT query (using ORDER BY item_usage.item):

(moved queryplans to attachment; see attachment queryplans.txt -dagw)

",Major,Dag H. Wanvik,,2013-04-03T10:54:27.000+0000,Wrong sort elimination when using permuted join order,Closed,bug,Bug
2013-10-17T11:05:38.000+0000,DERBY-6124,Fixed,"Internal Oracle testing of RC 2 testing of 10.10 (Tendril Request 5574239 Tendril Task  3614491 ):

********* Diff file derbyall/derbynetclientmats/DerbyNetClient/encodingTests/TestEnc.diff
*** Start: TestEnc jdk1.7.0 DerbyNetClient derbynetclientmats:encodingTests 2013-03-21 14:55:59 ***
derbyTesting.encoding can only be used with jdk15, skipping test
*** End:   TestEnc jdk1.7.0 DerbyNetClient derbynetclientmats:encodingTests 2013-03-21 14:55:59 ***
********* Diff file derbyall/derbynetclientmats/DerbyNetClient/derbynetclientmats/CompatibilityTest.diff
*** Start: CompatibilityTest jdk1.7.0 DerbyNetClient derbynetclientmats:derbynetclientmats 2013-03-21 14:55:59 ***
0 add
> .E.
> There was 1 error:
> 1) testJDBCDriver(org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest)java.sql.SQLException: Error marshalling or unmarshalling a user defined type: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992, local class serialVersionUID = 1827170030595550895
> Caused by: org.apache.derby.client.am.SqlException: Error marshalling or unmarshalling a user defined type: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992, local class serialVersionUID = 1827170030595550895
> 	... 22 more
> Caused by: java.io.InvalidClassException: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992, local class serialVersionUID = 1827170030595550895
> 	... 25 more
> FAILURES!!!
> Tests run: 2,  Failures: 0,  Errors: 1
Test Failed.
*** End:   CompatibilityTest jdk1.7.0 DerbyNetClient derbynetclientmats:derbynetclientmats 2013-03-21
 14:56:04 ***


Looking at the Price class I see it doesn't have an explicit serialVersionUID. 
",Major,Richard N. Hillegas,,2013-03-22T01:47:51.000+0000,Marshalling error in JDBCDriverTest as part of CompatibilityTest,Closed,bug,Bug
2013-06-27T22:30:47.000+0000,DERBY-6221,Fixed,"The following query runs fine:

SELECT username, lastmodified FROM sys.sysusers;

...but the following query raises an exception:

SELECT username, lastmodified FROM sys.sysusers WHERE USERNAME = 'FRED';

...which is

ERROR 4251E: No one can view the 'SYSUSERS'.'PASSWORD' column.",Major,Richard N. Hillegas,,2013-05-09T19:25:27.000+0000,Can't select from SYS.SYSUSERS if you use a WHERE clause in the query,Closed,bug,Bug
2013-05-20T12:35:30.000+0000,DERBY-6202,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-24T18:58:06.000+0000,Cleanup suspect coding practices in the org.apache.derby.iapi.sql.dictionary package,Closed,bug,Bug
2013-09-26T20:07:22.000+0000,DERBY-6146,Fixed,"http://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1461387-suites.All_diff.txt
1) testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)junit.framework.AssertionFailedError: Column value mismatch @ column '1', row 1:
    Expected: >4<
    Found:    >3<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1213)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1125)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1012)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850)
	at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:835)
	at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest.testMultipleLastKeyWaitsInMaxScan(IndexSplitDeadlockTest.java:657)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:110)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

FAILURES!!!
Tests run: 15197,  Failures: 1,  Errors: 0",Major,Katherine Marsden,,2013-04-03T02:34:59.000+0000,"nightly regression test failure: testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)junit.framework.AssertionFailedError: Column value mismatch @ column '1',",Closed,bug,Bug
2013-06-14T16:26:53.000+0000,DERBY-6189,Fixed,I will attach a repro.,Major,Richard N. Hillegas,,2013-04-18T18:43:43.000+0000,NPE involving temporary table and rollback,Closed,bug,Bug
2013-06-20T08:15:37.000+0000,DERBY-6126,Fixed,"Seen when testing the 10.10.1.1 release candidate. In the releases, derbyTesting.jar lives in the test sub-directory and the product jars live in the lib directory. This breaks an assumption in the compatibility test framework, and suites.All won't even start. It works fine if you move derbyTesting.jar into the same directory as the product jars.

FAILED to invoke org.apache.derbyTesting.functionTests.tests.compatibility._Suite
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.invokeSuite(AllPackages.java:179)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.addSuiteByReflection(AllPackages.java:149)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.suite(AllPackages.java:61)
	at org.apache.derbyTesting.functionTests.suites.All.suite(All.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at junit.runner.BaseTestRunner.getTest(BaseTestRunner.java:126)
	at junit.textui.TestRunner.start(TestRunner.java:184)
	at junit.textui.TestRunner.main(TestRunner.java:143)
Caused by: java.lang.IllegalStateException: failed to get running distribution (programming error?)
	at org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.getRunningDistribution(VersionCombinationConfigurator.java:299)
	at org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.filterVersions(VersionCombinationConfigurator.java:266)
	at org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.addTests(VersionCombinationConfigurator.java:169)
	at org.apache.derbyTesting.functionTests.tests.compatibility._Suite.addVersionCombinations(_Suite.java:81)
	at org.apache.derbyTesting.functionTests.tests.compatibility._Suite.suite(_Suite.java:135)
	... 15 more",Major,Kristian Waagan,,2013-03-22T09:05:09.000+0000,compatibility._Suite fails if derbyTesting.jar lives in different directory than product jars,Closed,bug,Bug
2013-07-09T10:51:23.000+0000,DERBY-6167,Fixed,"If a login takes time, and the thread that's blocked in Driver20.timeLogin() is interrupted, it will call Future.get() again with the same timeout value. This means that interrupting a getConnection() call will not make it terminate faster, as one might expect. Instead, it restarts the timeout clock and makes it terminate later than if it had not been interrupted.",Minor,Knut Anders Hatlen,,2013-04-11T12:12:42.000+0000,Interrupt restarts clock for login timeout,Closed,bug,Bug
2013-06-14T16:27:54.000+0000,DERBY-6188,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-17T19:07:50.000+0000,Cleanup suspect coding practices in org.apache.derby.iapi.services.io package,Closed,bug,Bug
2013-06-14T18:23:08.000+0000,DERBY-6151,Fixed,"If a table function raises warnings as the user loops through ResultSet.next(), those warnings are silently thrown away by Derby. Derby should return those warnings when the user calls ResultSet.getWarnings().",Major,Richard N. Hillegas,,2013-04-04T18:56:44.000+0000,Derby does not report warnings raised by table functions,Closed,bug,Bug
2013-06-14T15:47:00.000+0000,DERBY-6192,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-22T12:26:12.000+0000,Cleanup suspect coding practices in org.apache.derby.iapi.services.property package,Closed,bug,Bug
2013-06-04T09:30:58.000+0000,DERBY-6203,Fixed,"Seen on JDK 8 on Windows when upgrading a 10.2.1.6 database to 10.9 format:

http://download.java.net/javadesktop/derby/javadb-5575674-report/javadb-5575674-3636477-details.html

Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED initSlotTable consistency check failed:  slot 0 minimumRecordSize = 12 totalSpace = 12 recordPortionLength = 8 reservedCount = 4
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)
	at org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable(StoredPage.java:2253)
	at org.apache.derby.impl.store.raw.data.StoredPage.initFromData(StoredPage.java:849)
	at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:213)
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
	at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2540)
	at org.apache.derby.impl.store.raw.data.FileContainer.getPage(FileContainer.java:2590)
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(BaseContainerHandle.java:319)
	at org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPage(StoredPage.java:8287)
	at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(StoredPage.java:1577)
	at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(BasePage.java:441)
	at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java:760)
	at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(HeapScan.java:239)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans(DataDictionaryImpl.java:4631)
	at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(DD_Version.java:546)
	at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:248)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(DataDictionaryImpl.java:7987)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(DataDictionaryImpl.java:835)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1993)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:542)
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1993)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1827)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1693)
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1571)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:990)
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2767)",Major,Knut Anders Hatlen,,2013-04-25T09:01:07.000+0000,Intermittent assert failure in StoredPage.initSlotTable() when running upgrade tests on 10.9 branch,Closed,bug,Bug
2013-06-13T22:43:26.000+0000,DERBY-6096,Fixed,"In discussion on derby-dev regarding how much memory is used for hash joins, Knut noted:

I haven't verified, but I think HashJoinStrategy uses
DataTypeDescriptor.estimatedMemoryUsage() to estimate how much memory
the hash table will consume. That method has no case for BLOB or CLOB,
so it looks as if it will return zero for LOB columns. If that's so, it
will definitely overestimate how many rows fits in maxMemoryPerTable
kilobytes if the rows contain LOBs.


DataTypeDescriptor.estimatedMemoryUsage() should be updated to include BLOB and CLOB and we should try verify if this theory is correct with a reproduction.

",Major,Katherine Marsden,,2013-03-04T14:13:22.000+0000,OutOfMemoryError with Clob or Blob hash join: DataTypeDescriptor.estimatedMemoryUsage()  has no case for BLOB or CLOB so would underestimate memory usage for those types at zero,Closed,bug,Bug
2013-06-20T15:13:36.000+0000,DERBY-6224,Fixed,"With the latest EA build of JDK 8 (build 1.8.0-ea-b89), I see many failures in suites.All. For example:

1) testStartNetworkServerFalse(org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest)java.security.AccessControlException: access denied (""java.sql.SQLPermission"" ""deregisterDriver"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:364)
	at java.security.AccessController.checkPermission(AccessController.java:562)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.sql.DriverManager.deregisterDriver(DriverManager.java:399)
	at org.apache.derby.jdbc.AutoloadedDriver.unregisterDriverModule(AutoloadedDriver.java:263)
	at org.apache.derby.jdbc.Driver20.stop(Driver20.java:105)
	at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:443)
	at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:394)
	at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:227)
	at org.apache.derby.impl.services.monitor.FileMonitor.shutdown(FileMonitor.java:44)
	at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:197)
	at org.apache.derby.impl.services.monitor.FileMonitor.shutdown(FileMonitor.java:44)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255)
	at org.apache.derby.jdbc.Driver20.connect(Driver20.java:246)
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:145)
	at java.sql.DriverManager.getConnection(DriverManager.java:661)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:204)
	at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:171)
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1822)
	at org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest.setUp(DerbyNetAutoStartTest.java:82)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)

What's new in EA build 89 is that DriverManager.deregisterDriver() now requires an SQLPermission when running under a security manager. Most of suites.All runs under a security manager, and Derby's engine shutdown code calls deregisterDriver(), so this problem probably affects all tests that shut down the engine.",Major,Knut Anders Hatlen,,2013-05-15T08:20:33.000+0000,Issues with latest JDK 8 EA build because of missing SQLPermission,Closed,bug,Bug
2013-07-03T20:47:13.000+0000,DERBY-6212,Fixed,"ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> call syscs_util.syscs_set_database_property('abc', (values 'def'));
ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)

The query should either compile and execute just fine, or it should raise a proper exception. It should not fail with a NullPointerException.",Minor,Knut Anders Hatlen,,2013-05-02T11:32:41.000+0000,NullPointerException when calling a procedure with sub-query as argument,Closed,bug,Bug
2013-10-14T20:30:21.000+0000,DERBY-6116,Fixed,"The Reference Manual section titled ""CREATE DERBY AGGREGATE statement"" makes the following ambiguous claim:

""An unqualified UDA name may not be the name of an aggregate defined in part 2 of the SQL Standard, section 10.9""

The term ""unqualified UDA name"" is supposed to mean the name of the UDA without any schema name. So if the full, schema qualified name of the UDA is MYSCHEMA.FOO, then FOO may not be a SQL Standard aggregate name like MAX, MIN, ANY, etc..

This was not clear during buddy-testing of UDAs. From the wording in the Reference Manual, the buddy-tester expected to be able to create an aggregate called APP.ANY.
",Major,Camilla Haase,,2013-03-21T13:57:41.000+0000,Confusing description of limitation on user-defined aggregate names.,Closed,bug,Bug
2013-05-20T03:48:44.000+0000,DERBY-6209,Fixed,"The changes for DERBY-5363  Tighten permissions of DB files to owner with >= JDK7
 added new policy file permission requirements which were not outlined in the release note for that issue. 
This issue is created so that a new release note can be added for 10.10.2 so the necessary changes are in the cumulative release notes.


",Major,Dag H. Wanvik,,2013-05-01T17:16:25.000+0000,Add release note omitted with 10.9 for new required Security Manager permissions after DERBY-5363,Closed,bug,Bug
2013-03-13T13:13:02.000+0000,DERBY-6089,Fixed,"Cf the attached negative test in a patch to PreparedStatement42.

In JDBC 4.2, the Javadoc for registerOutParameter(int parameterIndex,
int sqlType, String typeName) reads:

:
@exception SQLFeatureNotSupportedException if sqlType is a ARRAY,
 BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR,
 LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC
 driver does not support this data type
:

For the new overloads, for embedded this is checked inside Util42#getTypeAsInt. The similar
client method, Utils42#getTypeAsInt does not do this checking.
",Major,Richard N. Hillegas,,2013-02-22T04:39:19.000+0000,CallableStatement#registerOutParameter on client lacks check of legal types.,Closed,bug,Bug
2013-04-10T08:29:25.000+0000,DERBY-6092,Fixed,"There was 1 error:
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1449432-suites.All_diff.txt

1) testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)java.sql.SQLException: Java exception: 'The handle is invalid.: java.io.IOException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.commit(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.commit(BaseJDBCTestCase.java:393)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionAgressive(BlobClob4BlobTest.java:1070)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.io.IOException: The handle is invalid.
	at java.io.RandomAccessFile.close0(Native Method)
	at java.io.RandomAccessFile.close(RandomAccessFile.java:573)
	at org.apache.derby.impl.jdbc.LOBFile.close(Unknown Source)
	at org.apache.derby.impl.jdbc.EncryptedLOBFile.close(Unknown Source)
	... 53 more",Major,Knut Anders Hatlen,,2013-02-26T00:48:14.000+0000,testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)j fails with : 'The handle is invalid.: java.io.IOException'.,Closed,bug,Bug
2013-03-13T13:18:09.000+0000,DERBY-6094,Fixed,"If you set a login timeout using the DriverManager, Derby ignores the setting. I will attach a test case which shows this.",Major,None,,2013-02-27T14:41:41.000+0000,Derby ignores DriverManager.setLoginTimeout(),Closed,bug,Bug
2013-03-20T05:56:53.000+0000,DERBY-6090,Fixed,"Quote: "" Derby runs on any J2SE 1.4.2 or higher virtual machine and supports Java ME/CDC/Foundation. Derby's database format is platform independent allowing databases to be copied to any machine type. ""

I think we have dropped 1.4.2, so we could omit that, but also include JDK 8 Profile 2 here, since we do mention CDC.",Major,Dag H. Wanvik,,2013-02-22T06:36:33.000+0000,Package javadoc publishedapi/jdbc4/index.html out of date,Closed,bug,Bug
2012-04-26T07:27:16.000+0000,DERBY-5489,Fixed,"When ResultSet.getObject(int) is called on a BLOB column, the correct EmbedBlob object is returned. But if afterwards the ResultSet.getBytes(int) is called on the same row, the returned array contains invalid data - it is offset by 3 bytes and its size is incorrect.
The problem only occurs when the stored BLOB is large enough to be internally represented by stream and not by array of bytes (at least ~32KiB).
It seems that the getObject method shifts the stream position and therefore the getBytes method starts to read the data after the third byte, thus incorrectly calculating its length.",Major,Kristian Waagan,,2011-10-31T22:52:18.000+0000,getBinary() returns incorrect data after getObject() call on BLOB column,Closed,bug,Bug
2012-10-01T11:54:09.000+0000,DERBY-5914,Fixed,"The list of compatible JRE versions is out of sync again. It currently says 1.4, 1.5, and 1.6.
For trunk I believe we must remove 1.4, and we should add 1.7.
For 10.9, if we want to change it, I think we can keep 1.4? And 1.7 was out and supported before we released 10.9, right?

This issue was logged as DERBY-5078 the previous time it was out of sync.",Minor,Kristian Waagan,,2012-08-30T12:45:35.000+0000,Incorrect list of compatible JRE versions in client trace #2,Closed,bug,Bug
2012-04-20T17:15:55.000+0000,DERBY-5493,Fixed,"The following script shows the same value being returned from a sequence generator by two successive NEXT VALUE FOR calls. Thanks to Knut for finding this:

connect 'jdbc:derby:memory:db;create=true';

create table t (x int);
create sequence s;
autocommit off;
select count(*) from sys.syssequences with rs;
values next value for s;
drop table t;
rollback;

-- same value as previous call
values next value for s; 
",Major,Richard N. Hillegas,,2011-11-07T13:57:04.000+0000,Same value returned by successive calls to a sequence generator.,Closed,bug,Bug
2012-05-31T18:47:31.000+0000,DERBY-5494,Fixed,"The following sequence of steps causes a sequence generator to return the same value on successive NEXT VALUE FOR calls.

1) Bring up ij and issue the following commands:

connect 'jdbc:derby:db;create=true';

create sequence s;
values next value for s; 

2) Control-c out of ij so that the engine comes down hard without an orderly shutdown.

3) Now bring up ij again and issue the following commands:

connect 'jdbc:derby:db';

values next value for s; 

Thanks to Knut for finding this one.",Major,Mike Matrigali,,2011-11-07T14:07:03.000+0000,Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.,Closed,bug,Bug
2012-05-15T17:58:02.000+0000,DERBY-5495,Fixed,This is a master issue to which we can link issues with sequence/identity generators.,Major,None,,2011-11-07T14:30:28.000+0000,Master issue to track fixes to sequence generators,Closed,bug,Bug
2012-02-23T07:23:29.000+0000,DERBY-5530,Fixed,"With this JDBC connection url is : jdbc:derby:directory:db_name;territory=fr_FR;collation=TERRITORY_BASED:PRIMARY;create=true
I get a NullPointerException in index-stat-thread

Sun Dec 11 19:33:11 CET 2011 Thread[pool-3-thread-1,5,main] {istat} ""PROXIFLEX"".""IDAXX_RES"": update scheduled, reason=[no stats, row-estimate=375] (queueSize=1)
Sun Dec 11 19:33:11 CET 2011 Thread[index-stat-thread,5,main] {istat,trace@26130360} worker thread started (xid=12049) [q/p/s=1/0/1,err:k/u/c=0/0/0,rej:f/d/o=0/0/0]
Sun Dec 11 19:33:11 CET 2011 Thread[index-stat-thread,5,main] {istat,trace@26130360}     processing ""PROXIFLEX"".""IDAXX_RES"" 
Sun Dec 11 19:33:11 CET 2011 Thread[index-stat-thread,5,main] {istat} runtime exception during normal operation
java.lang.NullPointerException
	at org.apache.derby.iapi.types.SQLChar.getCollationKey(Unknown Source)
	at org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.stringCompare(Unknown Source)
	at org.apache.derby.iapi.types.CollatorSQLVarchar.stringCompare(Unknown Source)
	at org.apache.derby.iapi.types.SQLChar.compare(Unknown Source)
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.compareWithPrevKey(Unknown Source)
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(Unknown Source)
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(Unknown Source)
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.processingLoop(Unknown Source)
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(Unknown Source)
	at java.lang.Thread.run(Thread.java:662)
Sun Dec 11 19:33:11 CET 2011 Thread[index-stat-thread,5,main] {istat,trace@26130360} worker thread exit [q/p/s=0/0/1,err:k/u/c=0/0/0,rej:f/d/o=0/0/0]

If I remove territory and collation parameters I don't have the exception.

In case you want to disable automatic statistics, set derby property : derby.storage.indexStats.auto to false.
",Major,Kristian Waagan,,2011-12-11T21:41:19.000+0000,SQLChar.getCollationKey NPE in index-stat-thread,Closed,bug,Bug
2011-12-19T11:04:05.000+0000,DERBY-5507,Fixed,"The following script raises an assertion on the last line. We are failing during the encryption of the password. The assertion prints out the plaintext of the password. I ran the script with the following command line:

java \
  -Dderby.connection.requireAuthentication=true  \
  -Dderby.authentication.provider=BUILTIN \
  -Dderby.user.test_dbo=test_dbopassword \
  org.apache.derby.tools.ij $SCRIPT

Here is the script:

connect 'jdbc:derby:memory:db;create=true;user=test_dbo;password=test_dbopassword';

call syscs_util.syscs_set_database_property( 'derby.connection.requireAuthentication', 'true' );
call syscs_util.syscs_set_database_property( 'derby.authentication.provider', 'BUILTIN' );

-- shutdown works correctly if you comment out the following two lines
call syscs_util.syscs_set_database_property( 'derby.user.test_dbo', 'test_dbopassword' );
call syscs_util.syscs_set_database_property( 'derby.database.propertiesOnly', 'true' );

-- fails to authenticate correct credentials
connect 'jdbc:derby:memory:db;shutdown=true;user=test_dbo;password=test_dbopassword';

Here is the assertion printed on the screen:

ERROR XJ001: Java exception: 'ASSERT FAILED Unknown authentication scheme for token test_dbopassword: org.apache.derby.shared.common.sanity.AssertFailure'.

Here is the stack trace in derby.log:

org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Unknown authentication scheme for token test_dbopassword
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)
	at org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.encryptPasswordUsingStoredAlgorithm(BasicAuthenticationServiceImpl.java:282)
	at org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.authenticateUser(BasicAuthenticationServiceImpl.java:199)
	at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.authenticate(AuthenticationServiceBase.java:279)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(EmbedConnection.java:1220)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:422)
	at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(EmbedConnection30.java:73)
	at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(EmbedConnection40.java:51)
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255)
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:143)
	at java.sql.DriverManager.getConnection(DriverManager.java:582)
	at java.sql.DriverManager.getConnection(DriverManager.java:154)
	at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:1528)
	at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:1358)
	at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1143)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)

",Major,Knut Anders Hatlen,,2011-11-18T20:58:01.000+0000,Orderly shutdown fails if you are using BUILTIN authentication and turn on derby.database.propertiesOnly,Closed,bug,Bug
2012-01-09T10:21:28.000+0000,DERBY-5536,Fixed,"Derby's DECIMAL can contain an integer of 31 digits. This can overflow a long. The embedded JDBC driver catches this, but the client does not and can yield a corrupt long, cf enclosed repro.",Major,Dag H. Wanvik,,2011-12-13T23:02:12.000+0000,Client's ResultSet#getLong does not range check when converting from a DECIMAL column,Closed,bug,Bug
2014-10-10T18:22:22.000+0000,DERBY-6565,Fixed,"A NullPointerException is raised with this (possibly illegal?) UPDATE statement:

{noformat}
ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t(x int);
0 rows inserted/updated/deleted
ij> insert into t values 1;
1 row inserted/updated/deleted
ij> update t set x = row_number() over ();
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
{noformat}",Minor,Dag H. Wanvik,,2014-05-06T11:27:56.000+0000,ROW_NUMBER function throws NullPointerException in UPDATE statement,Closed,bug,Bug
2014-05-09T14:59:02.000+0000,DERBY-6559,Fixed,"Cf the following test case:
{code:title=testFKPlusUnique|borderStyle=solid}
    /**
     * The referenced constraint (in the referenced table) is also a deferred
     * (unique/ok) constraint.
     * 
     * @throws SQLException 
     */
    public void testFKPlusUnique() throws SQLException {
        Statement s = createStatement(
                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        
        try {
            s.executeUpdate(
                ""create table ref_t(i int, "" +
                ""    constraint ct primary key(i) deferrable initially deferred)"");
            s.executeUpdate(
                ""create table t(i int unique not null, "" +
                ""    constraint c foreign key (i) references ref_t(i) "" +
                ""    deferrable initially immediate)"");
            
            s.executeUpdate(""insert into ref_t values 1,1"");
            s.executeUpdate(""insert into t values 1"");
            
            // Now, the child (referencing table) is referencing one of the the
            // rows whose value is 1, so the reference is potentially suspect.
            
            // What happens when we delete the one copy before commit?
            ResultSet rs = s.executeQuery(""select * from ref_t"");
            rs.next();
            
            // Will this delete blow up? Hopefully not, here is another row
            // that would satisfy the constraint.
            rs.deleteRow();
            
            // Now there should be only one left, so the referenced table is
            // OK.
            commit();
            :
{code}
Now, the constraint C throws when we do the ""rs.deleteRow"" above. But since there is (still) a row satisfying the FK, albeit a duplicate, I believe it should not.
",Major,Dag H. Wanvik,,2014-04-29T22:31:10.000+0000,A immediate Fk constraint blows up iff its referenced PK is deferred and we delete a duplicate,Closed,bug,Bug
2014-10-15T16:28:51.000+0000,DERBY-6563,Fixed,"NOT elimination for CASE expressions seems to be broken. Take this example:

{noformat}
ij> select * from sysibm.sysdummy1 where not ( case when ibmreqd = 'Y' then true else true end );
IBM&
----
Y   

1 row selected
{noformat}

Both branches of the CASE expression evaluate to TRUE, so one would expect the predicate ""not ( case ... )"" to evaluate to FALSE, and the query should return an empty result.",Major,Knut Anders Hatlen,,2014-05-05T12:40:19.000+0000,NOT elimination for CASE expressions is broken,Closed,bug,Bug
2011-11-09T09:40:45.000+0000,DERBY-5492,Fixed,"It turns out that the file owner does not necessarily get an explicit AclEntry; this depends on whether the created file has sufficient permissions already through, say, a permission for everybody to write. The present logic removes all AclEntries except those granted to the file's owner, erroneously presuming there would be such an entry always. This led to all AclEntries being removed. 

This error is seen in Oracle's nightly regressions for Windows, but did not reproduced when running manually on Windows. This was due to different default inherited permissions on the directories in which the regression tests were run.",Major,Dag H. Wanvik,,2011-11-07T10:29:06.000+0000,Restrictive file permissions: permissions removed also for owner on NTFS if Acl does not contain explicit entry for owner,Closed,bug,Bug
2011-11-08T13:30:05.000+0000,DERBY-5496,Fixed,"The org.apache.derbyTesting.junit package currently compiles against the JDK 1.4 classpath. Since these classes need to run on CDC/FP 1.1 platforms, they should be compiled against the small device classpath. That will make the compiler raise an error when the JUnit infrastructure references methods which are not present on small devices.",Major,Richard N. Hillegas,,2011-11-07T15:53:30.000+0000,"The JUnit infrastructure package should be compiled against the small device classpath, not the JDK 1.4 classpath",Closed,bug,Bug
2011-11-14T18:39:07.000+0000,DERBY-5490,Fixed,"I see lots of errors when the tests try to spawn a JVM while running on the OpenJDK 7 preview for Mac OS X.

SecureServerTest runs cleanly when I use JDK 6. But I see lots of these errors when I use JDK 7:

.java.io.IOException: Cannot run program ""/Library/Java/JavaVirtualMachines/JDK"": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	at java.lang.Runtime.exec(Runtime.java:615)
	at java.lang.Runtime.exec(Runtime.java:448)
	at java.lang.Runtime.exec(Runtime.java:345)
	at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest$1.run(SecureServerTest.java:487)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.runServerCommand(SecureServerTest.java:479)
	at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.runsysinfo(SecureServerTest.java:415)
	at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.testServerStartup(SecureServerTest.java:356)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.textui.TestRunner.doRun(TestRunner.java:121)
	at junit.textui.TestRunner.start(TestRunner.java:185)
	at junit.textui.TestRunner.main(TestRunner.java:143)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:135)
	at java.lang.ProcessImpl.start(ProcessImpl.java:130)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1021)
	... 41 more
",Major,None,,2011-11-03T15:02:20.000+0000,Lots of error trying to spawn a JVM in the SecureServerTest and Replication tests when running on the preview JDK 7 on Mac OS X,Closed,bug,Bug
2012-07-09T11:16:19.000+0000,DERBY-5830,Fixed,"As discussed in DERBY-4269, DoubleProperties.propertyNames() may throw a NullPointerException if properties are removed by another thread while the method is executing. Since DoubleProperties is a sub-class of, and used as a drop-in replacement for, java.util.Properties, it should be thread-safe just like the propertyNames() method in the parent class.",Major,Knut Anders Hatlen,,2012-06-23T11:42:35.000+0000,Make DoubleProperties.propertyNames() thread-safe,Closed,bug,Bug
2012-07-19T13:33:15.000+0000,DERBY-5851,Fixed,"I tried running org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest with a connectionCPDecorator in a JDBC4 environment. So this should actually run the test with LogicalPreparedStatement40 statements. 

But in code coverage report methods such as setNClob show no coverage in LogicalPreparedStatement40 class. But in PreparedStatement40 class all these methods are shown as covered. Actually those method calls should go to PreparedStatement40 through LogicalPreparedStatement40. But it is not shown in emma code coverage report.",Minor,Mohamed Nufail,,2012-07-08T17:28:49.000+0000,Inconsistent code coverage shown for LogicalPreparedStatement40,Closed,bug,Bug
2012-07-17T15:39:01.000+0000,DERBY-5838,Fixed,"The following script shows this problem:

connect 'jdbc:derby:db;create=true';

values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) );

call syscs_util.syscs_set_database_property( 'DataDictionaryVersion', 'foobar' );

values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) );

connect 'jdbc:derby:db;shutdown=true';

-- fails to boot
connect 'jdbc:derby:db';
",Major,Richard N. Hillegas,,2012-07-02T12:53:00.000+0000,"By using syscs_set_database_property, you can set the database version to a garbage string which prevents you from booting the database.",Closed,bug,Bug
2012-08-07T19:41:52.000+0000,DERBY-5839,Fixed,"
Running dblook on toursdb (either in packaged demo/databases/toursdb in the bin distribution or generated/toursdb after a build) fails to generate ddl for triggers and gives a java.lang.StringIndexOutOfBoundsException in the dblook.log.

To reproduce:


java org.apache.derby.tools.dblook -d 'jdbc:derby:toursdb'


output shows:

-- ----------------------------------------------
-- Note: At least one unexpected error/warning message was
-- DDL Statements for triggersration.  See dblook.log
-- ----------------------------------------------

dblook.log contains:

java.lang.StringIndexOutOfBoundsException
        at java.lang.String.substring(String.java:1131)
        at org.apache.derby.tools.dblook.getColumnListFromDescription(dblook.java:664)
        at org.apache.derby.impl.tools.dblook.DB_Trigger.createTrigger(DB_Trigger.java:130)
        at org.apache.derby.impl.tools.dblook.DB_Trigger.doTriggers(DB_Trigger.java:82)
        at org.apache.derby.tools.dblook.go(dblook.java:547)
        at org.apache.derby.tools.dblook.<init>(dblook.java:142)
        at org.apache.derby.tools.dblook.main(dblook.java:97)


This seems to be a regression in 10.9. 10.8 works fine for me",Major,Mamta A. Satoor,,2012-07-02T22:43:45.000+0000,dblook run on toursdb fails on triggers with java.lang.StringIndexOutOfBoundsException in dblook.log,Closed,bug,Bug
2014-02-04T22:10:28.000+0000,DERBY-6463,Fixed,"The localcal demo in the java/demo/localcal source directory (demo/programs/localcal in a Derby distribution) was contributed in 2006 for Derby 10.1.3 and does not seem to have updated since then. It requires the use of third-party software (Google Calendar, among other things). Unless someone is willing to update and maintain it, it seems wise to remove it from the demos. If no volunteer appears in a week or so, I don't mind removing it myself, or someone else can.",Minor,Camilla Haase,,2014-01-31T16:28:02.000+0000,localcal demo seems to be obsolete and should be removed,Closed,bug,Bug
2014-02-10T15:57:45.000+0000,DERBY-6454,Fixed,"The description of the DROP TABLE command first asserts that

""Triggers, constraints (primary, unique, check and references from the table being dropped) and indexes on the table are silently dropped. ""

And then

""The DROP TABLE statement will also generate an error if the table is used in a view or trigger.""

This is perfectly correct, but I think it would have been easier to grasp if the text had spelled out that triggers which are defined on the table being dropped are dropped automatically, but that the existence of triggers which reference the table being dropped in their trigger action will cause an error.",Minor,Camilla Haase,,2014-01-09T15:30:05.000+0000,DROP TABLE documentation could clarify how triggers are handled,Closed,bug,Bug
2012-11-06T18:56:21.000+0000,DERBY-5954,Fixed,"A user reports and I have verified an NPE on the following SELECT:

connect 'jdbc:derby:memory:db;create=true';

create table blah ( a int );
insert into blah values (1), (2), (3), (4), (5), (6), (7);

SELECT rn, (SELECT rn FROM (SELECT row_number() over() rn FROM blah ) as T2
where T2.rn = T1.rn+1) rn2
FROM (SELECT row_number() over() rn from blah) as T1;
",Major,Dag H. Wanvik,,2012-10-17T13:40:15.000+0000,NPE in SELECT involving subselects and windows functions,Closed,bug,Bug
2012-11-02T07:33:11.000+0000,DERBY-5964,Fixed,"http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/lin/1402814-suitesAll_diff.txt

1) testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError
	at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testStatisticsCorrectness(AutomaticIndexStatisticsTest.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

The failure is caused by this assert:

            assertTrue(s.created.before(now));

It might be a coincidence, but it happened the same night as Europe was switching from DST.

It may also be related to DERBY-5046, where a similar assert failed because poor clock resolution made the two timestamps equal.",Minor,Knut Anders Hatlen,,2012-10-29T11:06:48.000+0000,Timestamp comparison failure in AutomaticIndexStatisticsTest.testStatisticsCorrectness,Closed,bug,Bug
2012-11-02T07:47:56.000+0000,DERBY-5966,Fixed,"Saw these failures on multiple platforms around the time Europe switched from DST:

http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/sles/1402814-suitesAll_diff.txt
http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/sparc/1402814-suitesAll_diff.txt
http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/vista/1402814-suitesAll_diff.txt

3) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: [ FILE, NATIVE authentication on, LOCAL authentication ON, Authentication/Authorization turned OFF, SecurityManager ON, Embedded ]: Connection to fifthDB unexpectedly failed.
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest.getConnection(NativeAuthenticationServiceTest.java:1604)
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest.getConnection(NativeAuthenticationServiceTest.java:1570)
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest.getConnection(NativeAuthenticationServiceTest.java:1564)
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest.vetPasswordLifetime(NativeAuthenticationServiceTest.java:1385)
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest.testAll(NativeAuthenticationServiceTest.java:618)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",Minor,Knut Anders Hatlen,,2012-10-29T12:26:33.000+0000,"NativeAuthenticationServiceTest.testAll() failure: [ FILE, NATIVE authentication on, LOCAL authentication ON, Authentication/Authorization turned OFF, SecurityManager ON, Embedded ]: Connection to fifthDB unexpectedly failed.",Closed,bug,Bug
2012-10-29T15:42:26.000+0000,DERBY-5961,Fixed,"DERBY-5564 removed the SQL state 40XL2. Conditions that previously reported that SQL state, now report 40XL1. The old SQL state is still mentioned in the developer's guide: http://db.apache.org/derby/docs/dev/devguide/cdevconcepts32861.html",Minor,Camilla Haase,,2012-10-26T09:01:38.000+0000,Developer's guide mentions SQL state 40XL2 which is no longer used,Closed,bug,Bug
2014-01-06T16:19:33.000+0000,DERBY-6441,Fixed,"The lack of an ORDER BY clause on a query in GrantRevokeDDLTest.getGrantRevokeDDL can give rise to errors like the following (seen in test run http://javadb.se.oracle.com/javadb-testing/request_5586034/javadb-task-3781856.html):

    junit.framework.AssertionFailedError: Column value mismatch @ column 'SCHEMANAME', row 4:
    Expected: >SATHEESH<
    Found:    >TEST_DBO<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1291)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1203)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1090)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1013)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:970)
	at org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeDDLTest.testGrantRevokeDDL(GrantRevokeDDLTest.java:451)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

  ",Major,Richard N. Hillegas,,2013-12-24T13:20:01.000+0000,Non-deterministic query results in GrantRevokeDDLTest,Closed,bug,Bug
2013-07-03T19:40:35.000+0000,DERBY-6225,Fixed,None,Minor,Dag H. Wanvik,,2013-05-22T04:29:19.000+0000,SecureServerTest assertion error on contents of stdout from subprocess,Closed,bug,Bug
2013-01-29T18:58:47.000+0000,DERBY-6052,Fixed,"Text files under build/site in the site repository, which points to [1], don't have the svn:eol-style=native set.

This is a problem because:
 o it messes up your diffs on some platforms
 o building the site on some platforms ('forrest site') takes a long time (I observed 24 minutes on my machine)

Regarding the second item above, 'svn st' told me there were 16121 changed files. I expected two files to have changed... Turns out Forrest will fix the line endings, and even when they are already correct all the checked in docs files seem to be scanned. A second run took around 5 minutes on my Windows machine.

While 5 minutes is better than 24 minutes, it's still significant. I've heard others can build the site in 30 seconds, but I don't know if the fix crlf target isn't run on those platforms,or if the file system in question is a lot faster.


As a reminder, people should consider downloading this file [2] to configure Subversion wrt EOL style.

[1] https://svn.apache.org/repos/infra/websites/production/db/content/derby/
[2] http://apache.org/dev/svn-eol-style.txt",Major,Kristian Waagan,,2013-01-24T09:29:58.000+0000,Text files under build/site do not have svn:eol-style=native,Closed,bug,Bug
2013-09-05T14:09:48.000+0000,DERBY-6314,Fixed,"I noticed that after running the SignatureChecker tool on a database with version 10.10.1.1, I could not boot it with trunk (neither hard nor soft upgrade worked).

To reproduce, create a database and run SignatureChecker with 10.10:

$ java -jar /code/derby/oldreleases/10.10.1.1/derbyrun.jar SignatureChecker 'jdbc:derby:db;create=true'

Then, try to boot that database with trunk:

$ java -Dderby.database.allowPreReleaseUpgrade=true -jar /code/derby/trunk/jars/sane/derbyrun.jar SignatureChecker 'jdbc:derby:db'             
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.derby.tools.SignatureChecker.getJ2SEConnection(SignatureChecker.java:445)
	at org.apache.derby.tools.SignatureChecker.execute(SignatureChecker.java:140)
	at org.apache.derby.tools.SignatureChecker.main(SignatureChecker.java:121)
	at org.apache.derby.iapi.tools.run.main(run.java:61)
Caused by: java.sql.SQLException: Failed to start database 'db' with class loader sun.misc.Launcher$AppClassLoader@7e820d53, see the next exception for details.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:103)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:310)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2841)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:404)
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:913)
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)
	at java.sql.DriverManager.getConnection(DriverManager.java:571)
	at java.sql.DriverManager.getConnection(DriverManager.java:233)
	... 8 more
Caused by: java.sql.SQLException: Failed to start database 'db' with class loader sun.misc.Launcher$AppClassLoader@7e820d53, see the next exception for details.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
	... 18 more
Caused by: java.sql.SQLException: Exception during restore of a serializable or SQLData object of class 
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:288)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2835)
	... 15 more
Caused by: ERROR XSDA8: Exception during restore of a serializable or SQLData object of class 
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)
	at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(StoredPage.java:5827)
	at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(StoredPage.java:1514)
	at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(BasePage.java:441)
	at org.apache.derby.impl.store.raw.data.CachedPage.fetchFromSlot(CachedPage.java:53)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:299)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(TabInfoImpl.java:725)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRow(TabInfoImpl.java:570)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(DataDictionaryImpl.java:4673)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(DataDictionaryImpl.java:4647)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropJDBCMetadataSPSes(DataDictionaryImpl.java:14121)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateMetadataSPSes(DataDictionaryImpl.java:14135)
	at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(DD_Version.java:539)
	at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:238)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(DataDictionaryImpl.java:7984)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(DataDictionaryImpl.java:818)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:423)
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1819)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1685)
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1569)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)
	... 15 more
Caused by: java.io.StreamCorruptedException: java.lang.ClassCastException: java.io.ObjectInputStream cannot be cast to org.apache.derby.iapi.services.io.ErrorInfo
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:139)
	at org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(ArrayUtil.java:180)
	at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(GenericStorablePreparedStatement.java:232)
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:125)
	at org.apache.derby.iapi.types.UserType.readExternal(UserType.java:299)
	at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(StoredPage.java:5684)
	... 43 more
Caused by: java.lang.ClassCastException: java.io.ObjectInputStream cannot be cast to org.apache.derby.iapi.services.io.ErrorInfo
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:97)
	... 48 more
Could not get a connection.",Major,Knut Anders Hatlen,,2013-08-23T08:08:31.000+0000,Upgrade from 10.10 fails with ClassCastException,Closed,bug,Bug
2013-11-07T18:27:32.000+0000,DERBY-6294,Fixed,"1) testAttributeDrdaHost(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)junit.framework.AssertionFailedError
at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaHost(NetworkServerMBeanTest.java:181)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
at junit.extensions.TestSetup.run(TestSetup.java:23)
at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
at junit.extensions.TestSetup.run(TestSetup.java:23)
at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
at junit.extensions.TestSetup.run(TestSetup.java:23)
at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) 

The failure is on the assertion below.
        if (serverHost.equals(""localhost"") || serverHost.equals(""127.0.0.1"")) {
            String mbeanHost = (String) getAttribute(
                getNetworkServerMBeanObjectName(), 
                ""DrdaHost"");
            assertNotNull(mbeanHost);
            assertTrue(""mbeanHost.equals(""localhost"") 
                    || mbeanHost.equals(""127.0.0.1""));

",Major,Katherine Marsden,,2013-07-11T18:09:12.000+0000,On z/os on some machines:testAttributeDrdaHost(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)junit.framework.AssertionFailedError ,Closed,bug,Bug
2013-11-04T21:34:14.000+0000,DERBY-6283,Fixed,"The fix for DERBY-5680 currently requires hard upgrade.  A soft upgrade database with an orphaned stat row, that can be caused by something like DERBY-5681, will cause DERBY to spin eating up 100% of a cpu and possibly all the disk bandwith of the disk where the database is located.

We should implement a fix that can be applied to soft upgraded databases if at all possible.

In soft upgraded databases we can no use the work around of dropping the statistics as it is not available
to soft upgraded db's with version < 10.9.  The only current workaround is to disable background stats
completely.  Dropping and recreating the suspect table may also work.",Blocker,Mike Matrigali,,2013-06-28T16:54:38.000+0000,indexStat daemon processing tables over and over even when there are no changes in the tables in soft upgraded database.,Closed,bug,Bug
2013-08-29T09:27:58.000+0000,DERBY-6306,Fixed,"Seen on two platforms in nightly testing of trunk revision 1506904:

http://download.java.net/javadesktop/derby/request_5579443/javadb-task-3691350.html
http://download.java.net/javadesktop/derby/request_5579443/javadb-task-3691354.html

junit.framework.AssertionFailedError: BEGIN_COMP_TIME unexpectedly NULL
	at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.getNonNullTimestamp(XplainStatisticsTest.java:1538)
	at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.verifySensibleStatementTimings(XplainStatisticsTest.java:1417)
	at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleQuery(XplainStatisticsTest.java:1038)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Knut Anders Hatlen,,2013-07-26T08:15:18.000+0000,XplainStatisticsTest.testSimpleQuery: BEGIN_COMP_TIME unexpectedly NULL,Closed,bug,Bug
2013-08-28T10:44:15.000+0000,DERBY-6297,Fixed,"XplainStatisticsTest.testSimpleXplainOnly fails intermittently.

Examples:

http://download.java.net/javadesktop/derby/javadb-5579342-report/javadb-task-3689858.html

    junit.framework.AssertionFailedError: Column value mismatch @ column '1', row 1:
    Expected: >1<
    Found:    >2<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1278)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1190)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1077)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1000)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:957)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:915)
	at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:900)
	at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleXplainOnly(XplainStatisticsTest.java:1148)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

http://download.java.net/javadesktop/derby/javadb-5579365-report/javadb-task-3690182.html

    junit.framework.AssertionFailedError: Column value mismatch @ column '1', row 1:
    Expected: >4<
    Found:    >7<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1278)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1190)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1077)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1000)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:957)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:915)
	at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:900)
	at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleXplainOnly(XplainStatisticsTest.java:1183)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Knut Anders Hatlen,,2013-07-18T10:25:11.000+0000,Intermittent failures in XplainStatisticsTest.testSimpleXplainOnly,Closed,bug,Bug
2013-08-27T13:24:00.000+0000,DERBY-6316,Fixed,"I came across two examples with small typos in the developer's guide.

http://db.apache.org/derby/docs/10.10/devguide/cdevspecial41728.html:

try {
    preparedStatement.execute();
} catch (SQLException se ) {
        String SQLState = se.getSQLState();
    if ( SQLState.equals( ""23505"" ) ) 
        { correctDuplicateKey(); }
    else if ( SQLState.equals( ""22003"" ) ) {    
        correctArithmeticOverflow(); }
    else { throw se; }
}

Here, the first line in the catch block is not at the same indentation level as the other statements in the block.

http://db.apache.org/derby/docs/10.10/devguide/cdevspecial53165.html:

CREATE TRIGGER . . .
DELETE FROM flightavailability 
	WHERE flight_id IN (SELECT flight_id FROM flightavailability 
		WHERE YEAR(flight_date) < 2005);) 

This example has an unmatched closing parenthesis. And even if it were matched, it should have come before the semicolon.

(By the way, should the semicolon be kept or removed? Derby's SQL dialect doesn't accept statements that end with a semicolon, but ij does.)",Trivial,Camilla Haase,,2013-08-26T15:09:44.000+0000,Small typos in devguide examples,Closed,bug,Bug
2013-09-18T16:48:04.000+0000,DERBY-6317,Fixed,"The optimizer can chose the wrong path when BTreeCostController.java returns an estimate cost and row count of 0.0.  

Assume that you have two tables that are being joined like:


SELECT * FROM T1, T0
WHERE T1.ID = T0.F_ID and
T0.ID = 3;

Also assume that T0 has two columns, ID and F_ID and F_ID is a foreign key on T1.ID.   Assume that T1.ID is the primary key of T1 and (T0.F_ID, T0.ID) is the primary key on T0.  Assume that there is a non-unique index on T0.ID.

The correct query plan for this should be to query T0 using the non-unique index on T0.ID and then use the foreign key value in those rows to do query T1 using the primary key on T1.

With some values of T0.ID in the above query this query plan is chosen and works.  With other values of T0.ID , the query plan does an query on T0 using the non-unique index on T0.ID and then does a table scan on T1.

For example, in my case the query:

SELECT * FROM T1, T0
WHERE T1.ID = T0.F_ID and
T0.ID = 22112129;

has this query plan.   

The problem appears to be in BTreeCostController.java.  When this returns the same value for the ""left_of_start"" and the ""left_of_stop"" (which is being used to estimate the number of rows and cost), then the estimate cost and row count becomes 0.0.   When this is used in the join order of T0, T1, then the cost of the table scan for T1 becomes 0.0 as well.
",Major,Mike Matrigali,,2013-08-27T02:25:59.000+0000,Optmizer can choose the wrong path when BTreeCostController.java returns an estimate cost and row count of 0.0,Closed,bug,Bug
2015-08-30T21:18:24.000+0000,DERBY-6807,Fixed,"The Derby XML datatype and XmlVTI can be exploited, via XXE-based attacks, to expose sensitive information or launch denial-of-service assaults. This issue has CVE id CVE-2015-1832. This issue was brought to our attention by Philippe Arteau.
",Major,Bryan Pendleton,,2015-05-05T19:57:54.000+0000,XXE attack possible by using XmlVTI and the XML datatype,Closed,bug,Bug
2013-05-12T15:12:34.000+0000,DERBY-6181,Fixed,"This test is currently disabled by DERBY-6178 when a non-default base port is specified.  It would be nice if it could run
in the nightly regression runs where multiple suites.all are run using differen base ports.

This test currently spawns a new process to test auto loading.  I think the changes necessary are:
1) get the non-default baseport over to the spawned process.  I think you can add a -D argument to 
    the spawn command for this.
2) change the code that starts a network server to use the new baseport.",Major,Myrna van Lunteren,,2013-04-15T16:48:07.000+0000,fix AutoloadTest to support running concurrently when different base ports are specified.,Closed,bug,Bug
2013-05-16T07:21:11.000+0000,DERBY-6207,Fixed,"The java/drda/org/apache/derby/drda/template.policy and java/drda/org/apache/derby/drda/server.policy files both include the following line, which I understand is no longer needed:

  permission java.util.PropertyPermission ""derby.storage.jvmInstanceId"", 
      ""write""; 

It should be removed from both.

Possibly the template.policy file, which is used as the JDK demos/db/templates/server.policy file, should have some further changes to reflect current recommendations.",Minor,Dag H. Wanvik,,2013-04-30T14:04:22.000+0000,Update policy files in java/drda/org/apache/derby/drda,Closed,bug,Bug
2013-05-08T18:10:33.000+0000,DERBY-6152,Fixed,"I  am doing some upgrade  and test compatibility testing with 10.8 and am using this issue for tracking tests and results.

The first test was to try to run the 10.8 tests against the 10.10 product jars to identify user compatibility issues and make sure we have adequate release notes.

Output of this initial run  attached as test10_8_tests10_10productjars.out

The run failed miserably because of cascade failures, lock timeouts and failure to cleanup. These are general test and test framework issues that best  be addressed before analyzing failures.
",Major,Katherine Marsden,,2013-04-05T16:35:22.000+0000,10.10 upgrade and compatibility testing ,Closed,bug,Bug
2013-05-16T18:50:50.000+0000,DERBY-6160,Fixed,"DERBY-5363 added a new required permission  RuntimePermission ""accessUserInformation"".
This should be added to the developer guide information under granting permissions to Derby.


https://builds.apache.org/job/Derby-docs/lastSuccessfulBuild/artifact/trunk/out/devguide/cdevbabejgjd.html

I am not sure of the context under which it is required if it is just needed. ",Major,Camilla Haase,,2013-04-09T03:40:56.000+0000,Fixes needed to documentation topics on security policy permissions,Closed,bug,Bug
2013-05-01T22:12:49.000+0000,DERBY-6176,Fixed,"Failure on trunk(1466748) on windows machine with weme6.2

http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1466748-suites.All_diff.txt

1) test_16_6137(org.apache.derbyTesting.functionTests.tests.lang.SequenceTest)java.sql.SQLException: The exception 'java.lang.ClassCastException: java.math.BigDecimal incompatible with java.lang.Integer' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.goodStatement(GeneratedColumnsHelper.java:150)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceTest.test_16_6137(SequenceTest.java:599)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Java exception: 'java.math.BigDecimal incompatible with java.lang.Integer: java.lang.ClassCastException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	... 63 more
Caused by: java.lang.ClassCastException: java.math.BigDecimal incompatible with java.lang.Integer
	at org.apache.derby.iapi.types.NumberDataType.setObject(Unknown Source)
	at org.apache.derby.iapi.types.DataType.setObjectForCast(Unknown Source)
	at org.apache.derby.exe.ac04cdfc72x013dxf6c6xf0f0x00006a7794b06.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(Unknown Source)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(Unknown Source)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(Unknown Source)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 59 more
There were 4 failures:
1) test_01_basic(org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest)junit.framework.AssertionFailedError: expected:<-2147483548> but was:<-2147483646>
	at junit.framework.AssertionFailedError.<init>(AssertionFailedError.java:13)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.vetBumping(SequenceGeneratorTest.java:177)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.test_01_basic(SequenceGeneratorTest.java:146)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) test_04_reboot(org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest)junit.framework.AssertionFailedError: expected:<-2147483548> but was:<-2147483646>
	at junit.framework.AssertionFailedError.<init>(AssertionFailedError.java:13)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.vetBumping(SequenceGeneratorTest.java:177)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.test_04_reboot(SequenceGeneratorTest.java:432)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
3) test_05_concurrency(org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest)junit.framework.AssertionFailedError: expected:<-2147483548> but was:<-2147483646>
	at junit.framework.AssertionFailedError.<init>(AssertionFailedError.java:13)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.vetBumping(SequenceGeneratorTest.java:177)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.test_05_concurrency(SequenceGeneratorTest.java:477)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
4) test_07_dropSequence(org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest)junit.framework.AssertionFailedError: expected:<-2147483548> but was:<-2147483646>
	at junit.framework.AssertionFailedError.<init>(AssertionFailedError.java:13)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.vetBumping(SequenceGeneratorTest.java:177)
	at org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest.test_07_dropSequence(SequenceGeneratorTest.java:547)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
",Major,Mamta A. Satoor,,2013-04-11T20:43:12.000+0000,Couple failures in SequenceGeneratorTest suite on trunk(1466748) with weme 6.2,Closed,bug,Bug
2014-05-02T14:47:09.000+0000,DERBY-6560,Fixed,"The reference manual topic on the CASE expression says the syntax is

{noformat}
CASE 
  WHEN booleanExpression THEN thenExpression 
  [ WHEN booleanExpression THEN thenExpression ]*
  ELSE elseExpression 
END
{noformat}

The ELSE clause is optional and should be in square brackets, as seen by this example:

{noformat}
ij> values case when (1<>1) then 'yes' end;
1   
----
NULL

1 row selected
{noformat}

This seems to comply with the SQL standard, as the syntax rules for <case expression> say that ""\[if\] an <else clause> is not specified, then ELSE NULL is implicit.""
",Minor,Camilla Haase,,2014-04-30T10:52:09.000+0000,Reference manual says ELSE clause is required in CASE expressions,Closed,bug,Bug
2014-03-19T21:52:07.000+0000,DERBY-6500,Fixed,"junit.framework.AssertionFailedError: Column value mismatch @ column 'COLUMNNAME', row 1:
    Expected: >A_ZERO<
    Found:    >A_ONE<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1277)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1189)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1076)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:999)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:956)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:914)
	at org.apache.derbyTesting.functionTests.tests.lang.AutoIncrementTest.testderbyIncrementTest(AutoIncrementTest.java:167)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Richard N. Hillegas,,2014-03-06T17:08:40.000+0000,intermittent error in nightly regression tests: AutoIncrementTest,Closed,bug,Bug
2012-09-27T07:29:02.000+0000,DERBY-5905,Fixed,"There have been reports that DERBY html documentation does not render on Internet Explorer 8 and 9.

Kristian reports on IE8
Just tried with IE8, and with the Getting Started manual I get this when I view the source:
""""""
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
<HTML><HEAD>
<META content=""text/html; charset=utf-8"" http-equiv=Content-Type></HEAD>
<BODY></BODY></HTML>
<snipped garbage as to not put it in jira>

Not sure how that last line will turn out in your email clients, but it is indeed garbage and you can see that the body-tag is empty. Nothing is rendered in the browser. We are using frames though - that's not exactly state-of-the-art... We are also using the wrong DOCTYPE. I'm suspecting that the HTML is invalid too, but haven't checked. 

On IE9 I had heard that the reference HTML manual prints garbage.
http://db.apache.org/derby/manuals/index.html#latest
",Major,Knut Anders Hatlen,,2012-08-13T18:21:00.000+0000,Derby html documentation doesn't render properly and prints garbage on Internet Explorer,Closed,bug,Bug
2012-09-12T22:53:44.000+0000,DERBY-5911,Fixed,"Derby pushes query conditions down into subqueries with FETCH limits, thus creating wrong results. Take the following snippet:

    CREATE TABLE COFFEES (COF_NAME VARCHAR(254),PRICE INTEGER);
    
    INSERT INTO COFFEES (COF_NAME,PRICE) VALUES ('Colombian',       5);
    INSERT INTO COFFEES (COF_NAME,PRICE) VALUES ('French_Roast',    5);
    INSERT INTO COFFEES (COF_NAME,PRICE) VALUES ('Colombian_Decaf', 20);
    
    select COF_NAME, PRICE from COFFEES order by COF_NAME fetch next 2 rows only;
    
    select * from (
      select COF_NAME, PRICE from COFFEES order by COF_NAME fetch next 2 rows only
    ) t where t.PRICE < 10;

The first query correctly returns the rows (Colombian,5), (Colombian_Decaf,20).

The second query (which filters the result of the first one) returns (Colombian,5), (French_Roast,5). The row (French_Roast,5) should not be there since it is not a result of the first query. It shows up because (supposedly) the filter condition has been evaluated before the fetch limit.
",Major,Dag H. Wanvik,,2012-08-28T11:18:36.000+0000,WHERE condition getting pushed into sub-query with FETCH,Closed,bug,Bug
2012-09-10T12:18:28.000+0000,DERBY-5917,Fixed,"The following errors are seen when running tests without derbynet.jar and derbyclient.jar in the classpath:

- The suite() method in jdbcapi.ClientConnectionPoolDataSourceTest fails with a NoClassDefFoundError (for org/apache/derby/jdbc/ClientConnectionPoolDataSource)

- The test_jdbc4_1() test cases in jdbc4.CallableStatementTest, jdbc4.DataSourceTest, jdbc4.ConnectionMethodsTest and jdbc4.AbortTest fail with NoClassDefFoundErrors (for org/apache/derby/client/net/NetResultSet40, org/apache/derby/jdbc/ClientDataSource40 and org/apache/derby/client/net/NetConnection40)",Major,Knut Anders Hatlen,,2012-09-06T04:05:20.000+0000,NoClassDefFoundErrors when running tests without derbynet.jar and derbyclient.jar,Closed,bug,Bug
2013-04-23T19:23:45.000+0000,DERBY-6197,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-23T13:25:26.000+0000,Cleanup suspect coding practices in the org.apache.derby.impl.tools.planexporter package,Closed,bug,Bug
2013-04-26T02:04:02.000+0000,DERBY-6185,Fixed,"The error can be reproduced,
1) create table mytbl1 (name clob(10K));
2) create table mytbl2 (name clob(10K));
3) create view myview (name) as select t1.name from mytbl1 t1 union all select t2.name from mytbl2 t2;
4) select name from myview where name LIKE 'Col1' ESCAPE '\';

""4)"" failed with error message ""
ERROR 42818: Comparisons between 'CLOB (UCS_BASIC)' and 'CHAR (UCS_BASIC)' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match, a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1')
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator(Unknown Source)
	at org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(Unknown Source)
	at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.FromList.pushPredicates(Unknown Source)
	at org.apache.derby.impl.sql.compile.SelectNode.preprocess(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source)
	at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 19 more",Major,Mamta A. Satoor,,2013-04-16T15:41:28.000+0000,"Query against view  with ""where name LIKE 'Col1' ESCAPE '\' "" failed",Closed,bug,Bug
2013-04-24T07:30:00.000+0000,DERBY-6193,Fixed,"After AutomaticIndexStatisticsTest has completed, the database it used is still present under system/singleUse/copyCompress and occupies 58MB of disk space. The test should clean up after itself when it's done.",Major,Knut Anders Hatlen,,2013-04-22T12:56:21.000+0000,AutomaticIndexStatisticsTest doesn't delete its single-use database,Closed,bug,Bug
2013-04-23T19:00:11.000+0000,DERBY-6199,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-23T13:38:10.000+0000,Cleanup suspect coding practices in the org.apache.derby.vti package,Closed,bug,Bug
2013-04-24T16:56:15.000+0000,DERBY-6183,Fixed,"1) rlliso2multi(org.apache.derbyTesting.functionTests.tests.store.StoreScriptsTest)junit.framework.ComparisonFailure: Output at line 1188 expected:<[TABLE   |1  |IX  |TEST_11     |Tablelock |GRANT]> but was:<[WARNING 01004: Data truncation]>
	at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:109)
	at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:204)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
2) rlliso3multi(org.apache.derbyTesting.functionTests.tests.store.StoreScriptsTest)junit.framework.ComparisonFailure: Output at line 602 expected:<[TABLE   |1  |IX  |TEST_6      |Tablelock |GRANT]> but was:<[WARNING 01004: Data truncation]>
	at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:109)
	at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:204)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

",Major,Mike Matrigali,,2013-04-15T18:27:31.000+0000,rlliso2multi and rlliso3multi failing with [WARNING 01004: Data truncation],Closed,bug,Bug
2013-04-23T19:23:24.000+0000,DERBY-6195,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-22T15:36:52.000+0000,Cleanup suspect coding practices in the org.apache.derby.impl.tools.ij package.,Closed,bug,Bug
2013-04-23T21:45:25.000+0000,DERBY-6157,Fixed,"This is not new, but while reviewing some of the 'disk full' messages resulting from one of the long-running system tests, I realized that the text of ERROR XSLA4 could be read, by people unfamiliar with derby and brave or in a panic, as suggesting one to delete parts of the log directory:

""ERROR XSLA4: Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.""

We've been fighting people deleting files from the log directory, and even if this message text may not be the culprit, it certainly is open for misinterpretation.

I think we need to change this message. 
English language experts and native as well as non-native speakers are particularly invited to chime in.

One suggestion is:
Error encountered when attempting to write the transaction recovery log.  Most likely the disk holding the recovery log is full.  If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby.  It is also possible that the file system and/or disk where the Derby transaction log resides is read only.  The error can also be encountered if the disk or filesystem has failed.
",Major,Myrna van Lunteren,,2013-04-09T01:34:17.000+0000,text for message XSLA4 might encouraging people to delete part of the transaction log,Closed,bug,Bug
2013-04-23T18:59:35.000+0000,DERBY-6198,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-23T13:32:13.000+0000,Cleanup suspect coding practices in the org.apache.derby.tools package,Closed,bug,Bug
2013-01-08T07:16:13.000+0000,DERBY-6027,Fixed,"The following gives a NPE:

ij> values 1,2 order by int(1);

or

ij> select * from sysibm.sysdummy1 order by int(1);


The NPE happens when pulling up the order by expression seemingly due to a compiler phase problem:

Caused by: java.lang.NullPointerException
at org.apache.derby.impl.sql.compile.CastNode.getConstantValueAsObject(CastNode.java:851)
at org.apache.derby.impl.sql.compile.OrderByColumn.isReferedColByNum(OrderByColumn.java:466)
at org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(OrderByColumn.java:403)
at org.apache.derby.impl.sql.compile.OrderByList.pullUpOrderByColumns(OrderByList.java:195)
at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:254)

The variable sourceCTI is (still) null; being set by CastNode# bindCastNodeOnly, which presumably hasn't yet been run.",Minor,Dag H. Wanvik,,2012-12-30T02:41:18.000+0000,ORDER BY a cast expression gives NPE,Closed,bug,Bug
2013-01-03T04:07:00.000+0000,DERBY-6009,Fixed,"We only support column numbers in ORDER BY clauses in VALUES expression, as seen by this error message:

ij> values 1,2 order by 1+2;
ERROR 42878: The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported. (errorCode = 30000)

However, the checks let some unsupported expressions through and produce strange results. For example:

ij> values 1 order by 1+2;
1          |2          
-----------------------
1          |3          

1 row selected

It should probably have raised the same exception as the first query. And if not, the result should only have had one column.

And the next example should probably have raised a syntax error too, instead of a NullPointerException:

ij> values 1 order by int(1);
ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)",Minor,Dag H. Wanvik,,2012-12-07T10:15:23.000+0000,Need stricter checking of ORDER BY clause in VALUES expressions,Closed,bug,Bug
2014-04-17T18:07:59.000+0000,DERBY-6532,Fixed,"Although the file org/apache/derby/info/tsting.properties may be present, on Linux, calling sysinfo does not show the version number for derbyTesting.jar.

See for more info DERBY-6468.",Major,Myrna van Lunteren,,2014-03-27T22:55:18.000+0000,sysinfo does not show derbyTesting package info if junit.jar not in classpath,Closed,bug,Bug
2014-04-22T12:42:13.000+0000,DERBY-6536,Fixed,"We are seeing errors like the following during the nightly test runs on Windows platforms:

{noformat}
    junit.framework.AssertionFailedError: Column value mismatch @ column 'DOCUMENTID', row 1:
    Expected: >0<
    Found:    >4<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testUpdateIndex(LuceneSupportTest.java:161)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}

and

{noformat}
    junit.framework.AssertionFailedError: Unexpected row count: expected:<1> but was:<2>
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1110)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testListIndex(LuceneSupportTest.java:212)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}

",Major,None,,2014-04-01T14:52:43.000+0000,Errors in LuceneSupportTest on Windows platforms,Closed,bug,Bug
2014-10-20T18:32:58.000+0000,DERBY-6744,Fixed,"DERBY-6648 added a new SystemPermission, which prevents user code from calling the static public methods in ContextService. Over time, we will probably use this permission to prevent user code from reaching into other parts of the Derby engine. We need to document this permission in our sample policy files.",Major,Richard N. Hillegas,,2014-09-18T12:37:08.000+0000,Update the documentation of security policy files to include the new usederbyinternals SystemPermission,Closed,bug,Bug
2014-10-05T18:09:52.000+0000,DERBY-6587,Fixed,"There is a problem in org.apache.derby.impl.sql.execute.RIBulkChecker:

result = fkCol.compare(refCol);

            if (result == 1)
            {
                return GREATER_THAN;
            }
            else if (result == -1)
            {
                return LESS_THAN;
            }

where the JavaDoc for ""compare"" explicitly states that one must not use 1 or -1 to check the return value.

The problem can be reproduced when creating a table with two fields, ""UUID_FIELD char (16) for bit data"" and ""NUM_FIELD integer"", then having a foreign key to these two fields and then using the bulk import, i.e. ""CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE ...""

",Major,Myrna van Lunteren,,2014-05-27T11:41:49.000+0000,Foreign Key constraint not matched when using UUID in a composite foreign key when using SYSCS_UTIL.SYSCS_IMPORT_TABLE,Closed,bug,Bug
2014-09-29T18:52:34.000+0000,DERBY-6636,Fixed,"BaseDataFileFactory has a public constructor and a public boot() method. Arbitrary code running in the JVM may be able to instantiate a BaseDataFileFactory outside of Derby's authentication mechanisms and so acquire the ability to read/update Derby-managed data with the privileges granted to Derby.  Arbitrary code may be able to interfere with the normal operation of Derby and may be able to corrupt data.

This is just an observation based on casual code inspection. It may be that there are mechanisms in place which frustrate these attacks. I have not tried to exploit these potential vulnerabilities myself.",Major,Richard N. Hillegas,,2014-06-24T13:20:09.000+0000,The public api of BaseDataFileFactory may allow blackhats to assume elevated privileges.,Closed,bug,Bug
2014-09-30T19:45:11.000+0000,DERBY-6739,Fixed,"I recently added the 10.11.1.1 jars to a local svn directory to prevent continuous access of the apache repository. 
These jars are found using -DderbyTesting.oldReleasePath.
This did not result in any troubles with the trunk or 10.11 branch.
However, it did result in 31 failures with the 10.10 branch.

The failure output (see e.g.: http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/ibm17/1624694-suites.All_diff.txt) look like this:

1) combination(client 10.11.1.1 <> server 10.11.1.1)(org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl)junit.framework.AssertionFailedError: client VM failed: :Spawned combination(client 10.11.1.1 <> server 10.11.1.1) exitCode=1
STDERR:
Class not found ""org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilitySuite""

	at org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.testClient(ClientCompatibilityRunControl.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

(some failures also complain about a missing database, but I assume that's a result of the above type of failure).
",Major,Myrna van Lunteren,,2014-09-15T17:53:46.000+0000,test failure in 10.10 compatibility.ClientCompatibilityRunControl after adding 10.11.1.1,Closed,bug,Bug
2014-09-29T13:01:21.000+0000,DERBY-6631,Fixed,"Various vulnerabilities in FileMonitor allow applications to perform security-sensitive operations with the elevated privileges granted to Derby:

getDaemonThread() - The application can call this method in order to create threads, using Derby's elevated privileges.

getJVMProperty() -  The application can call this in order to read system properties using Derby's elevated privileges.

setThreadPriority() - The application can call this method to change the priority of a daemon thread it has created. This call will execute with Derby's elevated privileges.
",Major,None,,2014-06-20T16:38:17.000+0000,FileMonitor can be used to elevate an application's privileges,Closed,bug,Bug
2014-09-29T18:54:55.000+0000,DERBY-6630,Fixed,"JCECipherFactory.run() performs security-sensitive operations. It is executed in a privilege block by the init() method, which is, in turn, executed by the public constructor. The class and its corresponding factory are public, which means that any code running in the same JVM can run this security-sensitive code with the privileges granted to Derby.",Major,Richard N. Hillegas,,2014-06-20T14:23:08.000+0000,Applications can use JCECipherFactory to elevate their privileges to those granted to Derby,Closed,bug,Bug
2014-10-10T18:13:30.000+0000,DERBY-6688,Fixed,"This subquery usage works:
{code}
select * from (select x from t order by row_number() over () fetch first 1 row only) tt;
{code}
but this one leads to NPE in insane mode, or a Sanity ASSERT failure in sane mode:
{code}
select * from t where x =  (select x from t order by row_number() over () fetch first row only);
{code}
leading to this error:
{code}
Exception in thread ""main"" java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
        at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
        at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
        at derby6565.Derby6565.main(Derby6565.java:33)
Caused by: ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
        ... 11 more
Caused by: java.lang.NullPointerException
        at org.apache.derby.impl.sql.compile.UnaryOperatorNode.getReceiverInterfaceName(Unknown Source)
        at org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source)
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source)
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.OrderByList.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.OrderByNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source)
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.RowCountNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(Unknown Source)
        at org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source)
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source)
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.UpdateNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
        at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
        ... 3 more
{code}
The immediate problem is that the field *#operand* is null.
",Major,Dag H. Wanvik,,2014-08-05T21:09:13.000+0000,NPE (or sane: ASSERT failure) with ROW_NUMBER in some subqueries,Closed,bug,Bug
2014-09-29T22:34:16.000+0000,DERBY-6722,Fixed,"If a statement raises an error and then a subsequent error occurs during statement cleanup, the original error is lost. This is discussed in this email thread:http://apache-database.10148.n7.nabble.com/NPE-from-InternalTriggerExecutionContext-cleanup-td141789.html",Major,Mamta A. Satoor,,2014-08-29T17:17:23.000+0000,GenericStatementContext.cleanupOnError() needs protection from later errors during statement cleanup,Closed,bug,Bug
2014-10-16T14:07:16.000+0000,DERBY-6610,Fixed,"suites.All no longer runs cleanly for me when I run with just classes.
It still runs fine with jars.
We accepted this behavior at some point, but it is frustrating when you want to 'quickly' run tests while still working on some details.

One of the tests that failed for me was lang.DatabaseClassLoadingTest (complaining about one of the databases not found), another was lang.LuceneSupportPermsTest.
If a test cannot run cleanly with classes, it should get skipped (preferably both in the test itself and from the _Suite in which it is included).
I also think some of the network server tests complain if derbynet.jar is not found - I cannot off-hand remember if this causes the test to fail.",Minor,Myrna van Lunteren,,2014-06-11T17:42:10.000+0000,suites.All cannot be run with classes without failures,Closed,bug,Bug
2014-10-03T19:12:37.000+0000,DERBY-6714,Fixed,"Seen in the nightly testing of trunk.

http://download.java.net/javadesktop/derby/request_5595117/javadb-task-3919785.html

{noformat}
java.lang.Exception: DRDA_InvalidReplyTooShort.S:Ungültige Antwort von Network Server: Daten nicht ausreichend.
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(NetworkServerControlImpl.java:3357)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(NetworkServerControlImpl.java:1988)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(NetworkServerControlImpl.java:2957)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readStringReply(NetworkServerControlImpl.java:3010)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.runtimeInfo(NetworkServerControlImpl.java:1443)
	at org.apache.derby.drda.NetworkServerControl.getRuntimeInfo(NetworkServerControl.java:516)
	at org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.x_testRuntimeInfoAfterConnClose(RuntimeInfoTest.java:193)
	at org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.testRunTests(RuntimeInfoTest.java:97)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}

[^derby.log] showed that there was a NullPointerException while building the runtimeinfo string:

{noformat}
java.lang.NullPointerException
	at org.apache.derby.impl.drda.Database.buildRuntimeInfo(Database.java:417)
	at org.apache.derby.impl.drda.Session.buildRuntimeInfo(Session.java:291)
	at org.apache.derby.impl.drda.DRDAConnThread.buildRuntimeInfo(DRDAConnThread.java:9186)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.buildRuntimeInfo(NetworkServerControlImpl.java:4069)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.getRuntimeInfo(NetworkServerControlImpl.java:2229)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.sendRuntimeInfo(NetworkServerControlImpl.java:2157)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.processCommands(NetworkServerControlImpl.java:1804)
	at org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:665)
	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:284)
{noformat}",Major,Knut Anders Hatlen,,2014-08-26T08:19:09.000+0000,RuntimeInfoTest failed with insufficient data from server,Closed,bug,Bug
2014-10-09T17:02:07.000+0000,DERBY-6691,Fixed,"Fails with assert/NPE instead of proper error:

{noformat}
ij> call syscs_util.syscs_compress_table('APP', 'T', row_number() over ());
ERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.
{noformat}",Major,Dag H. Wanvik,,2014-08-06T07:41:35.000+0000,ROW_NUMBER should not be allowed as argument in a procedure call,Closed,bug,Bug
2014-10-14T20:55:14.000+0000,DERBY-6629,Fixed,The PlanExporter tool has a public method CreateXMLFile.writeTheXMLFile(). This method opens a FileOutputStream in a privileged block. We should change this so that unprivileged code cannot use the method to write files using derbytools.jar's privileges.,Major,Knut Anders Hatlen,,2014-06-20T11:43:19.000+0000,Restrict privileged operation in CreateXMLFile,Closed,bug,Bug
2014-10-02T13:32:09.000+0000,DERBY-6648,Fixed,"By calling ContextService.getContextOrNull() (and its relatives), application code can get its hands on all sorts of internal Derby contexts, factories, and managers. This allows application code to bypass SQL authorization checks and perform sensitive or data-corrupting actions.

For instance, right now an application can use this method to get its hands on the language connection context. From the lcc, the application can get its hands on the data dictionary and the execution transaction. Armed with those objects, the application can bypass authorization checks and create schema objects, users, and permissions.

Only Derby code should be able to call this powerful method.",Major,Richard N. Hillegas,,2014-07-03T18:55:37.000+0000,Application code should not be able to call ContextService.getContextOrNull(),Closed,bug,Bug
2014-11-13T17:48:23.000+0000,DERBY-6577,Fixed,"I'm seeing this on head of trunk:

{noformat}
ij> select c, c = all (values 'Y'), case when c = all (values 'Y') then true else false end from (values 'Y', 'N') v(c);
C|2    |3    
-------------
Y|true |false
N|false|true 

2 rows selected
{noformat}

Column 2 and column 3 should have the same value, but something seems to go wrong when the quantified comparison is used in a CASE expression.

I'm seeing the expected result on 10.10.2.0, though:

{noformat}
ij> select c, c = all (values 'Y'), case when c = all (values 'Y') then true else false end from (values 'Y', 'N') v(c);
C|2    |3    
-------------
Y|true |true 
N|false|false

2 rows selected
{noformat}",Major,Knut Anders Hatlen,,2014-05-14T13:40:03.000+0000,"Quantified comparison returns wrong result in CASE, COALESCE, IN and BETWEEN",Closed,bug,Bug
2014-09-29T15:51:47.000+0000,DERBY-6632,Fixed,"Various powerful methods in StorageFactoryService are public. I have not verified the following with an experiment, but it appears to me that these methods give any code running in the JVM the ability to elevate privileges to those granted to Derby and do the following:

1) Delete Derby databases via the following methods:

{noformat}
org.apache.derby.impl.services.monitor.StorageFactoryService createServiceRoot()
org.apache.derby.impl.services.monitor.StorageFactoryService getServiceProperties()
org.apache.derby.impl.services.monitor.StorageFactoryService getStorageFactoryInstance()
org.apache.derby.impl.services.monitor.StorageFactoryService removeServiceRoot()
{noformat}

2) Overwrite service.properties via overloads of the following method:

{noformat}
org.apache.derby.impl.services.monitor.StorageFactoryService createServiceRoot()
{noformat}
",Major,None,,2014-06-20T19:31:37.000+0000,Applications may be able to use StorageFactoryService to delete Derby databases and overwrite service.properties.,Closed,bug,Bug
2014-10-08T17:35:40.000+0000,DERBY-6599,Fixed,"{noformat}
ij> select * from table (app.def()) t;
ERROR 42ZB4: 'APP'.DEF' does not identify a table function.
{noformat}

There's a missing opening quote before the table function name in the error message.",Trivial,Knut Anders Hatlen,,2014-06-04T08:37:35.000+0000,Incorrect quoting of 42ZB4 message,Closed,bug,Bug
2014-10-20T16:44:52.000+0000,DERBY-6628,Fixed,"See in nightly regression test:

http://download.java.net/javadesktop/derby/request_5592869/javadb-task-3886181.html

where the relevant part of stacktrace is as follows:
{code}
junit.framework.AssertionFailedError: Column value mismatch @ column 'TABLENAME', row 3:
    Expected: >T1<
    Found:    >SYSCHECKS<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest.testTriggersInGeneral(TriggerGeneralTest.java:874)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
{code }",Major,Dag H. Wanvik,,2014-06-19T20:41:01.000+0000,Intermittent error in TriggerGeneralTest,Closed,bug,Bug
2014-10-09T17:01:05.000+0000,DERBY-6690,Fixed,"The generation clause is allowed to have a call to the ROW_NUMBER function. But it fails when a new row is inserted. It should be disallowed in CREATE TABLE and ALTER TABLE ADD COLUMN.

{noformat}
ij> create table t (x int generated always as (row_number() over ()));
0 rows inserted/updated/deleted
ij> insert into t values default;
ERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.
{noformat}",Major,Dag H. Wanvik,,2014-08-06T07:37:06.000+0000,ROW_NUMBER should not be allowed in generation clause,Closed,bug,Bug
2015-01-21T23:36:28.000+0000,DERBY-6741,Fixed,EmbedConnection.getContextManager() is a public method. Exposing internals like the ContextManager is a security risk.,Major,Richard N. Hillegas,,2014-09-16T23:09:42.000+0000,User code can get the ContextManager from an EmbedConnection,Closed,bug,Bug
2014-10-15T16:31:12.000+0000,DERBY-6595,Fixed,"I saw a failure in CheckToursDBTest while running the demo test suite on trunk. It was reported as an ArrayIndexOutOfBoundsException. The ArrayIndexOutOfBoundsException happened during cleanup and shadowed the original exception. The original exception in derby.log looked like this:

{noformat}
ERROR XSTA2: A transaction was already active, when attempt was made to make another transaction active.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(XactFactory.java:766)
	at org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(XactFactory.java:293)
	at org.apache.derby.impl.store.raw.xact.XactFactory.startNestedUpdateUserTransaction(XactFactory.java:350)
	at org.apache.derby.impl.store.raw.RawStore.startNestedUpdateUserTransaction(RawStore.java:460)
	at org.apache.derby.impl.store.access.RAMTransaction.startNestedUserTransaction(RAMTransaction.java:2326)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.updateCurrentValueOnDisk(SequenceUpdater.java:486)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.clean(SequenceUpdater.java:218)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.clearIdentity(SequenceUpdater.java:257)
	at org.apache.derby.impl.services.cache.ConcurrentCache.removeEntry(ConcurrentCache.java:167)
	at org.apache.derby.impl.services.cache.ConcurrentCache.ageOut(ConcurrentCache.java:583)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSequenceCaches(DataDictionaryImpl.java:8968)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8951)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8937)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.doneReading(DataDictionaryImpl.java:1184)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:519)
	at org.apache.derby.impl.sql.GenericStatement.prepareStorable(GenericStatement.java:687)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(SPSDescriptor.java:373)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(SPSDescriptor.java:264)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:739)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:831)
	at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:282)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doUpdate(CheckToursDBTest.java:163)
	at org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.testToursDB(CheckToursDBTest.java:108)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)
{noformat}",Major,Richard N. Hillegas,,2014-06-03T12:53:04.000+0000,CheckToursDBTest failed while updating sequence value on disk,Closed,bug,Bug
2014-10-15T16:29:58.000+0000,DERBY-6567,Fixed,"This JUnit test code fails because it detects that the query returns null even though the result column is reported as not nullable:

{code}
        PreparedStatement ps = prepareStatement(
                ""values case when false then 1 else ? end"");
        ps.setNull(1, Types.INTEGER);
        JDBC.assertSingleValueResultSet(ps.executeQuery(), null);
{code}",Major,Knut Anders Hatlen,,2014-05-08T14:34:59.000+0000,Incorrect nullability for CASE expression with parameter,Closed,bug,Bug
2014-10-03T12:46:30.000+0000,DERBY-6635,Fixed,"I don't see any checks in place to prevent this method from writing its output file into the log or sego directories or even over service.properties. Fortunately, only the DBO can run this procedure by default.",Major,Richard N. Hillegas,,2014-06-23T18:13:54.000+0000,OptimizerTracer.unloadTool() could be used to write garbage over Derby data files.,Closed,bug,Bug
2014-09-29T16:45:24.000+0000,DERBY-6662,Fixed,"DatabaseMetaData.usesLocalFiles() returns true for in-memory databases. And it also returns true for DatabaseMetaData.usesLocalFilePerTable(). The following script shows this:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

call syscs_util.syscs_register_tool( 'databaseMetaData', true );

values usesLocalFiles();

values usesLocalFilePerTable();
{noformat}

I think that these methods should return false because an in-memory database does not store tables in files.",Major,Myrna van Lunteren,,2014-07-14T18:45:33.000+0000,DatabaseMetaData.usesLocalFiles() returns true for in-memory databases,Closed,bug,Bug
2014-10-16T19:55:49.000+0000,DERBY-6730,Fixed,"The workaround is to create a view which gives the columns case-insensitive names. The following script shows this problem:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

call syscs_util.syscs_register_tool( 'luceneSupport', true );

create schema ""s"";

create table ""s"".""t""
(
    ""passageID"" int,
    ""text"" varchar( 32672 )
);

-- fails because the trailing key id is case-sensitive
call luceneSupport.createIndex
(
  '""s""',
  '""t""',
  '""text""',
  null,
  '""passageID""'
);

create view ""s"".""t_view"" ( passageID, text ) as select * from ""s"".""t"";

-- succeeds on a view with case-insensitive identifiers
call luceneSupport.createIndex
(
  '""s""',
  '""t_view""',
  'text',
  null,
  'passageID'
);
{noformat}",Major,Richard N. Hillegas,,2014-09-08T14:13:52.000+0000,Cannot create a Lucene index if a key column's name is case-sensitive,Closed,bug,Bug
2013-03-20T17:57:56.000+0000,DERBY-6108,Fixed,"Since revision 1454647 the suites.All no longer kicks off with weme 6.2.

The stack trace (which does not get copied to my apache location because the test doesn't finish) looks like this:


Failed to invoke class org.apache.derbyTesting.functionTests.tests.derbynet._Suite
java.lang.reflect.InvocationTargetException
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:205)
	at java.lang.reflect.Method.invoke(Method.java:252)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.invokeSuite(AllPackages.java:179)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.suite(AllPackages.java:63)
	at org.apache.derbyTesting.functionTests.suites.All.suite(All.java:51)
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203)
	at java.lang.reflect.Method.invoke(Method.java:252)
	at junit.runner.BaseTestRunner.getTest(BaseTestRunner.java:126)
	at junit.textui.TestRunner.start(TestRunner.java:184)
	at junit.textui.TestRunner.main(TestRunner.java:143)
Caused by: junit.framework.AssertionFailedError: unexpected error
	at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:1104)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:187)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:108)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:93)
	at org.apache.derbyTesting.junit.DataSourceConnector.setConfiguration(DataSourceConnector.java:51)
	at org.apache.derbyTesting.junit.TestConfiguration.initConnector(TestConfiguration.java:1484)
	at org.apache.derbyTesting.junit.TestConfiguration.<init>(TestConfiguration.java:1393)
	at org.apache.derbyTesting.junit.TestConfiguration.<clinit>(TestConfiguration.java:138)
	at java.lang.J9VMInternals.initializeImpl(Native Method)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:209)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.suite(ShutDownDBWhenNSShutsDownTest.java:53)
	at org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite(_Suite.java:50)
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203)
	... 9 more
Caused by: java.lang.NullPointerException
	at org.apache.derbyTesting.junit.TestConfiguration.getCurrent(TestConfiguration.java:220)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:183)
	... 20 more
Failed to invoke suite():java.lang.reflect.InvocationTargetException

The changes between the previous successful run and this one were:

r1454600 | rhillegas | 2013-03-08 14:05:09 -0800 (Fri, 08 Mar 2013) | 1 line

DERBY-6094: Enforce login timeouts in the embedded driver and data sources.
------------------------------------------------------------------------
r1454537 | rhillegas | 2013-03-08 12:42:08 -0800 (Fri, 08 Mar 2013) | 1 line

DERBY-6022: Add an optional tool for turning on optimizer tracing and dumping the trace to the console.
------------------------------------------------------------------------
r1454358 | kahatlen | 2013-03-08 04:58:58 -0800 (Fri, 08 Mar 2013) | 1 line

Add the generated source folder to the NetBeans project.
------------------------------------------------------------------------
r1454296 | kahatlen | 2013-03-08 01:13:04 -0800 (Fri, 08 Mar 2013) | 3 lines

DERBY-6075: Use modern collections in impl/sql/compile

Replace Hashtable fields with HashSets.


I think we should not be running the derbynet suite with weme at all, but we should be able to get a datasource...",Major,Richard N. Hillegas,,2013-03-13T17:14:01.000+0000,suites.All no longer runs with weme 6.2 ,Closed,bug,Bug
2014-08-18T15:39:48.000+0000,DERBY-6683,Fixed,db-derby-10.11.1.0-bin.zip contains the VTI demo classes both in source form and as compiled class files under the demo/programs/vtis subdirectory. db-derby-10.11.1.0-bin.tar.gz only contains the source files.,Major,None,,2014-08-01T18:22:39.000+0000,VTI demo classes missing in the 10.11.1.0 tar.gz bundle,Closed,bug,Bug
2014-09-17T11:29:46.000+0000,DERBY-6569,Fixed,"The SQL standard doesn't allow non-deterministic function calls in the operands of NULLIF. Derby does however allow such calls, but the results may not be as one might expect.

Take an expression such as NULLIF(expr, 1). It shouldn't ever return 1. If expr is 1, it should return NULL, and if expr is not 1, it should return expr.

If expr contains a call to a non-deterministic function, it may actually end up returning 1 sometimes:

{noformat}
ij> SELECT NULLIF(INT(RANDOM()*2), 1) FROM SYS.SYSTABLES;
1          
-----------
1          
1          
1          
NULL       
NULL       
NULL       
NULL       
0          
1          
NULL       
NULL       
0          
0          
NULL       
0          
1          
0          
NULL       
1          
0          
NULL       
NULL       
NULL       

23 rows selected
{noformat}",Major,Knut Anders Hatlen,,2014-05-09T11:11:11.000+0000,NULLIF may return incorrect results if first operand calls non-deterministic function,Closed,bug,Bug
2014-08-20T08:32:56.000+0000,DERBY-6705,Fixed,"The reference manual topic on the DECLARE GLOBAL TEMPORARY TABLE statement says: ""Temporary tables cannot be referenced in a triggeredSQLStatement or in a WHEN clause""

Still, a CREATE TRIGGER statement succeeds if the triggered SQL statement is a MERGE statement that references a temporary table:

{noformat}
ij> connect 'jdbc:derby:memory:db;create=true';
ij> declare global temporary table temp (x int) not logged;
0 rows inserted/updated/deleted
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create trigger tr after insert on t1 insert into session.temp values 1;
ERROR XCL51: The requested function can not reference tables in SESSION schema.
ij> create trigger tr after insert on t1 merge into session.temp using t1 on session.temp.x=t1.x when matched then delete;
0 rows inserted/updated/deleted
ij> insert into t1 values 1,2,3;
3 rows inserted/updated/deleted
{noformat}

The second CREATE TRIGGER statement above should have failed the same way as the first.",Major,Knut Anders Hatlen,,2014-08-14T14:52:08.000+0000,Triggers should not allow MERGE statements that reference temporary tables,Closed,bug,Bug
2014-08-21T15:52:34.000+0000,DERBY-6708,Fixed,"When I ran suites.All on a device with little memory, so that I needed to reduce the heap (-Xmx160M), it stopped and failed with an OOME when it came to ConstraintCharacteristicsTest.

That test uses a memory database in order to speed it up. One of the test cases (testManySimilarDuplicates) has such a big data set that the database doesn't fit in the heap. It would be good if we could reduce the memory requirements of the test so that it passes on smaller devices to. Alternatively, we could add a switch that makes it easy to disable test cases that are known to have high memory requirements.",Major,Dag H. Wanvik,,2014-08-15T06:20:39.000+0000,OOME when running ConstraintCharacteristicsTest with smaller heap,Closed,bug,Bug
2014-08-20T08:32:16.000+0000,DERBY-6703,Fixed,"{noformat}
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create table t2(y int);
0 rows inserted/updated/deleted
ij> merge into t1 using t2 on z when matched then update set x=x+1;
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
{noformat}

Stack trace with line numbers on trunk:

{noformat}
java.lang.NullPointerException
	at org.apache.derby.impl.sql.compile.MergeNode.addColumn(MergeNode.java:947)
	at org.apache.derby.impl.sql.compile.MergeNode.getColumnsFromList(MergeNode.java:930)
	at org.apache.derby.impl.sql.compile.MergeNode.getColumnsInExpression(MergeNode.java:314)
	at org.apache.derby.impl.sql.compile.MergeNode.buildSelectList(MergeNode.java:816)
	at org.apache.derby.impl.sql.compile.MergeNode.bindLeftJoin(MergeNode.java:579)
	at org.apache.derby.impl.sql.compile.MergeNode.bindStatement(MergeNode.java:396)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
	at org.apache.derby.iapi.tools.run.main(run.java:53)
{noformat}",Major,Knut Anders Hatlen,,2014-08-13T08:39:26.000+0000,MERGE statement fails with NullPointerException if ON clause references non-existent column,Closed,bug,Bug
2014-08-18T19:10:18.000+0000,DERBY-6684,Fixed,"I see the following error when running the upgrade tests on trunk with 10.11.1.0 as the starting point of the trajectory:

{noformat}
There was 1 failure:
1) testDERBY5120NumRowsInSydependsForTrigger(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.ComparisonFailure: Unexpected SQL state. expected:<[42Y5]5> but was:<[X0Y2]5>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:876)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:940)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTestCase.java:1084)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTestCase.java:1065)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.preapreFortDERBY5120(BasicSetup.java:404)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testDERBY5120NumRowsInSydependsForTrigger(BasicSetup.java:487)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Operation 'DROP TABLE' cannot be performed on object 'ATDC_BKUP1' because TRIGGER 'ATDC_TAB1_TRG1' is dependent on that object.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTestCase.java:1082)
	... 109 more
Caused by: ERROR X0Y25: Operation 'DROP TABLE' cannot be performed on object 'ATDC_BKUP1' because TRIGGER 'ATDC_TAB1_TRG1' is dependent on that object.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.prepareToInvalidate(Unknown Source)
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(Unknown Source)
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.invalidateFor(Unknown Source)
	at org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(Unknown Source)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 114 more

FAILURES!!!
Tests run: 145,  Failures: 1,  Errors: 0

{noformat}
",Major,Mamta A. Satoor,,2014-08-04T12:45:58.000+0000,Failure in testDERBY5120NumRowsInSydependsForTrigger when upgrading from 10.11.1.0 to trunk,Closed,bug,Bug
2014-08-22T12:19:10.000+0000,DERBY-6701,Fixed,"I have seen variations of the following error twice in the past 2 days: once on the 10.12 trunk while testing the fix to derby-6692 and then again on the 10.11.1.1 release candidate while running the tests without the Lucene jar files.

{noformat}
1) testRunTests(org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest)junit.framework.ComparisonFailure: Output doesn't match expected:<...-----
Sessionnummer:[8


-------------------------------------------------------------
Anzahl Verbindungsthreads: 4
Anzahl aktive Sessions: 1]
Anzahl wartende Ses...> but was:<...-----
Sessionnummer:[5
Datenbank:singleUse/oneuse5
Benutzer:APP
Anzahl Anweisungen:2
Informationen zur vorbereiteten Anweisung: 
	Anwsg-ID		SQL-Text
	-------------	-----------
	null
	null



Sessionnummer:8


-------------------------------------------------------------
Anzahl Verbindungsthreads: 4
Anzahl aktive Sessions: 2]
Anzahl wartende Ses...>
	at org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.x_testRuntimeInfoAfterConnClose(RuntimeInfoTest.java:192)
	at org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.testRunTests(RuntimeInfoTest.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}",Major,Knut Anders Hatlen,,2014-08-08T12:50:19.000+0000,Instability in RuntimeInfoTest.x_testRuntimeInfoAfterConnClose,Closed,bug,Bug
2014-08-25T17:59:22.000+0000,DERBY-6619,Fixed,"As part of the fix for DERBY-3745, Derby silently swallows security exceptions and leaks class loaders. This can give rise to denial-of-service attacks. At a minimum, Derby should report the swallowed exceptions so that the security policy can be corrected and the application can be hardened against this attack. The swallowing occurs at these locations:

{noformat}
org.apache.derby.impl.services.timer.SingletonTimerFactory run Catch java.lang.SecurityException 0 line 175
org.apache.derby.impl.services.timer.SingletonTimerFactory run Catch java.lang.SecurityException 1 line 158
{noformat}
",Major,Dag H. Wanvik,,2014-06-17T14:13:40.000+0000,"After silently swallowing SecurityExceptions, Derby can leak class loaders",Closed,bug,Bug
2014-09-24T15:21:54.000+0000,DERBY-6654,Fixed,We require that generated code must implement Activation. This helps prevent applications from using Derby's class loaders to load arbitrary classes. We should also require that generated code live in the org.apache.derby.exe package. This will prevent applications from loading  highly privileged code using Derby class loaders.,Major,Richard N. Hillegas,,2014-07-09T17:27:17.000+0000,Require that generated code live in the org.apache.derby.exe package.,Closed,bug,Bug
2014-08-25T17:37:27.000+0000,DERBY-6680,Done,"The following properties may be read by LocalizedResource, a class which is included in derby.jar, derbynet.jar, derbyclient.jar, and derbytools.jar:

{noformat}
derby.ui.codeset
derby.ui.locale
{noformat}

A user has tripped across this problem in production. With the user's language settings, the network server fails to come up because the server policy file does not grant the server permission to read these properties. See http://apache-database.10148.n7.nabble.com/Hellow-I-have-some-problem-in-customize-security-policy-with-derby-modified-3-td141002.html

We should adjust server.policy and template.policy accordingly.",Major,Dag H. Wanvik,,2014-07-30T13:16:27.000+0000,Other jar files may need to be granted permission to read derby.ui.* properties,Closed,bug,Bug
2013-05-10T09:33:00.000+0000,DERBY-6215,Fixed,"When running suites.All with sane jars, I've seen derby.log grow very big (over 4GB) during StressMultiTest. I don't see this when StressMultiTest is run separately, only when it runs as part of suites.All.

What takes the most space in derby.log is debug output like this

DEBUG DaemonTrace OUTPUT: Next urgent assignment : org.apache.derby.impl.services.daemon.ServiceRecord@d1294d
DEBUG DaemonTrace OUTPUT: servicing org.apache.derby.impl.services.daemon.ServiceRecord@d1294d
DEBUG DaemonTrace OUTPUT: done org.apache.derby.impl.services.daemon.ServiceRecord@d1294d
DEBUG DaemonTrace OUTPUT: come back from yield

repeated over and over.

I suspect there's a test that sets the DaemonTrace debug flag, and that the flag for some reason doesn't get reset. I've only found one test that sets it: ClobReclamationTest. It uses a SystemPropertyTestSetup ensure the derby.debug.true property is reset and the engine rebooted, but I'm not sure rebooting the engine will reset the state of the SanityManager.",Major,Knut Anders Hatlen,,2013-05-08T11:10:26.000+0000,derby.log grows enormously during StressMultiTest,Closed,bug,Bug
2013-06-12T23:49:24.000+0000,DERBY-6251,Fixed,"failing consistently on one machine, 10.9, windows, weme -
http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/weme6.2/1484050-derbyall_diff.txt
*** Start: derbyrunjartest jdkWECE J2ME Foundation Specification v1.1 derbyall:derbytools 2013-05-17 23:02:07 ***
2 del
< Usage: java org.apache.derby.tools.ij [-p propertyfile] [inputfile]
2a2
> Process exception: (2) The system cannot find the file specified.
4 del
< USAGE: java org.apache.derby.tools.sysinfo -cp [ [ embedded ][ server ][ client] [ tools ] [ anyClass.class ] ]
4a4
> Process exception: (2) The system cannot find the file specified.
6 del
<  USAGE:
7 del
<  java org.apache.derby.tools.dblook -d <sourceDBUrl> [OPTIONS]
8 del
<  	where the source URL is the full URL, including the connection protocol
9 del
<  	and any connection attributes that might apply.  For example, use
10 del
<  	'jdbc:derby:myDB', or 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/myDB;user=usr;'. 
11 del
<  	options include: 
12 del
<  	-z <schemaName> to specify a schema to which the DDL generation
13 del
<  	 should be limited.  Only database objects with that schema will have
14 del
<  	 their DDL generated.
15 del
<  	-t <tableOne> <tableTwo> ... to specify a list of tables for which
16 del
<  	 the DDL will be generated; any tables not in the list will be ignored.
17 del
<  	-td <value> to specify what should be appended to the end
18 del
<  	 of each DDL statement.
19 del
< 		This defaults to ';'.
20 del
<  	-noview to prevent the generation of DDL for views.
21 del
<  	-append to keep from overwriting the output files.
22 del
<  	-verbose to have error messages printed to the console (in addition
23 del
<  	 to the log file).  If not specified, errors will only be printed to the
24 del
<  	 log file.
25 del
<  	-o <filename> to specify the file name to which the generated DDL
26 del
<  	 will be written.
27 del
<  		If not specified, default is the console. 
27a6
> Process exception: (2) The system cannot find the file specified.
29 del
< Usage: NetworkServerControl <commands> 
30 del
< Commands:
31 del
< start [-h <host>] [-p <portnumber>] [-noSecurityManager] [-ssl <sslmode>]
32 del
< shutdown [-h <host>][-p <portnumber>] [-ssl <sslmode>] [-user <username>] [-password <password>]
33 del
< ping [-h <host>][-p <portnumber>] [-ssl <sslmode>]
34 del
< sysinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]
35 del
< runtimeinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]
36 del
< logconnections {on|off} [-h <host>][-p <portnumber>] [-ssl <sslmode>]
37 del
< maxthreads <max>[-h <host>][-p <portnumber>] [-ssl <sslmode>]
38 del
< timeslice <milliseconds>[-h <host>][-p <portnumber>] [-ssl <sslmode>]
39 del
< trace {on|off} [-s <session id>][-h <host>][-p <portnumber>] [-ssl <sslmode>]
40 del
< tracedirectory <traceDirectory>[-h <host>][-p <portnumber>] [-ssl <sslmode>]
40 add
> Process exception: (2) The system cannot find the file specified.
Test Failed.
*** End:   derbyrunjartest jdkWECE J2ME Foundation Specification v1.1 derbyall:derbytools 2013-05-17 23:02:07 ***",Major,Myrna van Lunteren,,2013-06-05T19:03:43.000+0000,"nightly regression test failure on weme, derbyrunjartest failing with: Process exception: (2) The system cannot find the file specified.",Closed,bug,Bug
2013-06-15T15:07:15.000+0000,DERBY-6257,Fixed,"The Subversion home page has moved. The new home page is http://subversion.apache.org/ We should fix the link on http://db.apache.org/derby/dev/derby_source.html
",Trivial,Bryan Pendleton,,2013-06-10T01:53:38.000+0000,Update link to Subversion home page on http://db.apache.org/derby/dev/derby_source.html,Closed,bug,Bug
2012-06-28T20:54:28.000+0000,DERBY-5822,Fixed,"We will want to improve the Reference Guide section on the SPACE_TABLE vti after we commit the derby-5554-02-aa-0argConstructor.diff attached to DERBY-5554. We will want to make the following changes:

1) Describe the new TABLEID column which was added to SPACE_TABLE:

Column Name: TABLEID
Type: CHAR
Length: 36
Nullable: False
Contents: The id of the table which the conglomerate belongs to.


2) Describe the additional no-arg constructor for this vti. There are now 3 ways to construct this vti:

i) No args. This is the new constructor which needs to be described. When the vti is invoked with no arguments, it retrieves space information for all tables and indexes in the database.

ii) One argument. This constructor is already described. If the vti is invoked with one string argument, then that argument is the name of a table in the current schema.

iii) Two arguments. This constructor is already described also. When the vti is invoked with two string arguments, the first argument is a schema name and the second argument is a table name.


3) Replace the first SPACE_TABLE example. That example uses Derby-specific syntax which falls outside the SQL Standard. Showcasing non-standard syntax encourages users to try out other non-standard syntax, giving rise to bugs like DERBY-5554. We should showcase the following standard syntax instead:

select t2.*
    from
        sys.systables systabs,
        table (syscs_diag.space_table()) as t2
    where systabs.tabletype = 'T'
    and systabs.tableid = t2.tableid;
",Major,Camilla Haase,,2012-06-19T17:42:26.000+0000,Document the new SQL standard behavior of the SPACE_TABLE vti,Closed,bug,Bug
2012-05-22T18:04:38.000+0000,DERBY-5590,Fixed,"With DERBY3618 and  DERBY-4856 if modifyThreadGroup privileges are available, DERBY will produce a thread dump in the derby.log upon asserts or session level SQLExceptions
The two permissions that will be needed to dump the thread stack traces are:

permission java.lang.RuntimePermission ""getStackTrace"";
permission java.lang.RuntimePermission ""modifyThreadGroup"";

These should be mentioned in the optional permissions at:
http://db.apache.org/derby/docs/10.8/devguide/cdevbabejgjd.html

These optional permissions will allow extended diagnostics, specifically  the stack traces of all threads to be dumped to derby.log on severe errors and when derby.stream.error.extendedDiagSeverityLevel  is set.

It would be good to mention them here too:

http://db.apache.org/derby/docs/10.8/ref/rrefproperextdiagsevlevel.html

",Major,Camilla Haase,,2012-01-28T00:39:20.000+0000,Document optional modifyThreadGroup permssion in java 2 security permissions,Closed,bug,Bug
2012-05-22T08:38:52.000+0000,DERBY-5760,Fixed,"EmbedBlob and EmbedClob some times wrap IOExceptions in an SQLException with SQLState XJ022 (SQLState.SET_STREAM_FAILURE), but they don't always specify the message argument, so the error message ends up like this:

java.sql.SQLException: Unable to set stream: '{0}'.

(The detailed error message does appear in a chained exception, so it's not a very big problem, but it looks a bit odd.)

I don't know of a way to expose these exceptions in a test. I just noticed it when I added some manual asserts to force a failure when investigating another issue.

The fix should be simple: Use the helper method Util.setStreamFailure() that sets the message argument automatically.",Minor,Knut Anders Hatlen,,2012-05-11T12:32:12.000+0000,Missing argument in some XJ022 errors,Closed,bug,Bug
2014-04-24T07:44:13.000+0000,DERBY-6546,Fixed,"LuceneSupportPermsTest piles on sql authorization, sql authentication, custom policy file, custom locale, and single use decorators. With this combination, the database cannot be removed at test termination on Windows machines. The problem may be that the authentication hurdle prevents the decorator machinery from getting a connection to the database in order to shut it down. So files are left open and Windows can't delete the database directory.",Major,Knut Anders Hatlen,,2014-04-21T14:46:49.000+0000,Database can't be dropped on Windows using the decoration of LuceneSupportPermsTest,Closed,bug,Bug
2014-08-13T14:51:53.000+0000,DERBY-6617,Fixed,"When the Monitor tries to read Derby properties, it silently swallows SecurityExceptions. This means that the properties will be silently ignored if Derby has not been granted sufficient privileges. This means that if you make a mistake crafting your security policy, then you may disable authentication and authorization. You may not realize this until you have incurred a security breach. This swallowing occurs at the following code locations:

{noformat}
org.apache.derby.impl.services.monitor.BaseMonitor readApplicationProperties Catch java.lang.SecurityException 1 line 1360
org.apache.derby.impl.services.monitor.BaseMonitor runWithState Catch java.lang.SecurityException 0 line 280
org.apache.derby.impl.services.monitor.FileMonitor PBgetJVMProperty Catch java.lang.SecurityException 1 line 183
org.apache.derby.impl.services.monitor.FileMonitor PBinitialize Catch java.lang.SecurityException 1 line 120
{noformat}

SecurityExceptions are swallowed at other locations in the Monitor. The implications of these swallowings should be understood and, at a minimum, security problems should be fixed:

{noformat}
org.apache.derby.impl.services.monitor.FileMonitor PBinitialize Catch java.lang.SecurityException 1 line 157
org.apache.derby.impl.services.monitor.FileMonitor createDaemonGroup Catch java.lang.SecurityException 1 line 89
{noformat}
",Major,Dag H. Wanvik,,2014-06-17T13:51:08.000+0000,"Silently swallowed SecurityExceptions may disable Derby features, including security features.",Closed,bug,Bug
2014-07-10T16:54:13.000+0000,DERBY-6616,Fixed,"System procedures are implemented as public static methods in org.apache.derby.catalog.SystemProcedures. These methods can be called by code in user-written procedures. This allows a user-written procedure to circumvent the SQL authorization checks which are supposed to limit some procedures to being called only by the DBO. I will attach a repro.
",Major,Richard N. Hillegas,,2014-06-17T13:32:57.000+0000,"User procedures can call system procedures, circumventing SQL authorization.",Closed,bug,Bug
2014-07-01T16:37:18.000+0000,DERBY-6611,Fixed,"In the javadoc for NetworkServerMBean#getDrdaKeepAlive, there is a
@see link which is broken. It points to:

http://db.apache.org/derby/docs/dev/adminguide/radmindrdakeepalive.html

",Major,Dag H. Wanvik,,2014-06-11T19:28:55.000+0000,Broken link in API docs to derby.drda.keepAlive documentation,Closed,bug,Bug
2014-07-03T18:36:27.000+0000,DERBY-6609,Fixed,"We document Derby as an SQL-92 database. This standard is now very old, and we should describe how Derby conforms to the most current standard (SQL:2011). Knut Anders Hatlen listed the relevant features in a comment to DERBY-6605. 

This will involve at a minimum replacing the ""Derby support for SQL-92 features"" topic (http://db.apache.org/derby/docs/10.10/ref/rrefsql9241891.html) with a new one that describes Derby's support for current features, with notes as needed indicating when the support is partial. Only features Derby supports, fully or partially, should be listed. We should state that features not listed are not supported.

The information would be taken from http://wiki.apache.org/db-derby/SQLvsDerbyFeatures (which currently goes only through the 2003 standard). Listing the Feature IDs in the documentation would also be helpful. 

Other topics should be changed as needed. For example, is the term ""SQL92Identifier"" still correct?",Major,Camilla Haase,,2014-06-11T17:30:21.000+0000,Documentation for SQL features should reflect current standard,Closed,bug,Bug
2014-08-04T22:59:05.000+0000,DERBY-6623,Fixed,"Saw this on the trunk [[http://download.java.net/javadesktop/derby/request_5592737/javadb-task-3883745.html][regression tests]]:

testGetXXportedKeys:

{code}
junit.framework.AssertionFailedError: Column value mismatch @ column 'FK_NAME', row 3:
    Expected: >FKEY3<
    Found:    >FKEY2<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.assertFullResultSet(DatabaseMetaDataTest.java:3930)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetXXportedKeys(DatabaseMetaDataTest.java:4117)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
{code}
",Major,Dag H. Wanvik,,2014-06-18T20:51:56.000+0000,DatabaseMetaDataTest fails intermittently,Closed,bug,Bug
2012-05-17T13:32:49.000+0000,DERBY-5591,Fixed,"This sentence is misleading: ""Any statements referencing the view are invalidated on a DROP VIEW statement. DROP VIEW is disallowed if there are any views or open cursors dependent on the view. The view must be dropped before any objects that it is dependent on can be dropped."" 

This isn't quite true. If a column is dropped with the CASCADE option, any dependent view(s) will be dropped. Are there other cases?",Minor,Camilla Haase,,2012-01-30T15:31:59.000+0000,Imprecise wording in documentation in ref man on DROP VIEW,Closed,bug,Bug
2012-05-18T22:45:32.000+0000,DERBY-5681,Fixed,"If you drop the foreign key constraint for a table, the statistics row does not get removed.   This affects the indexStat daemon because it now finds these statistics row which always appear as out of date, causing an update to be scheduled.

Here is how to get it to happen:

set schema app;

CREATE TABLE TEST_TAB_1
(
    ID INTEGER PRIMARY KEY NOT NULL
);

CREATE TABLE TEST_TAB_2
(
   ID INTEGER PRIMARY KEY NOT NULL
);

ALTER TABLE TEST_TAB_2
ADD CONSTRAINT TEST_TAB_2_FK_1
FOREIGN KEY (ID) REFERENCES TEST_TAB_1(ID);

insert into app.TEST_TAB_1 values (1);
insert into test_tab_2 values(1);

call syscs_util.syscs_update_statistics('APP', 'TEST_TAB_2', null);

select
c.TABLEID,
c.CONGLOMERATENUMBER,
c.CONGLOMERATENAME,
c.ISINDEX,
c.ISCONSTRAINT,
c.CONGLOMERATEID,
t.TABLEID,
t.TABLENAME,
t.TABLETYPE,
s.STATID,
s.REFERENCEID,
s.TABLEID,
s.CREATIONTIMESTAMP,
s.TYPE,
s.VALID,
s.COLCOUNT,
CAST(STATISTICS AS VARCHAR(40)) as STATISTICS
from sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEID
where t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;

-- At this point there are two statistic rows

TABLEID CONGLOMERATENUMBER      CONGLOMERATENAME        ISINDEX ISCONSTRAINT    CONGLOMERATEID  TABLEID TABLENAME       TABLETYPE       STATID  REFERENCEID     TABLEID CREATIONTIMESTAMP       TYPE    VALID   COLCOUNT        STATISTICS
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       edbc8255-0136-6999-c1b4-000065089f97    55410238-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:36:49.629 I       true    1       numunique= 1 numrows= 1
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       05278254-0136-6999-c1b4-000065089f97    63454207-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:36:49.628 I       true    1       numunique= 1 numrows= 1

-- Now drop the constraint

alter table TEST_TAB_2
drop constraint TEST_TAB_2_FK_1;

select
c.TABLEID,
c.CONGLOMERATENUMBER,
c.CONGLOMERATENAME,
c.ISINDEX,
c.ISCONSTRAINT,
c.CONGLOMERATEID,
t.TABLEID,
t.TABLENAME,
t.TABLETYPE,
s.STATID,
s.REFERENCEID,
s.TABLEID,
s.CREATIONTIMESTAMP,
s.TYPE,
s.VALID,
s.COLCOUNT,
CAST(STATISTICS AS VARCHAR(40)) as STATISTICS
from sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEID
where t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;

-- There are still two statistic rows

TABLEID CONGLOMERATENUMBER      CONGLOMERATENAME        ISINDEX ISCONSTRAINT    CONGLOMERATEID  TABLEID TABLENAME       TABLETYPE       STATID  REFERENCEID     TABLEID CREATIONTIMESTAMP       TYPE    VALID   COLCOUNT        STATISTICS
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       edbc8255-0136-6999-c1b4-000065089f97    55410238-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:36:49.629 I       true    1       numunique= 1 numrows= 1
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       05278254-0136-6999-c1b4-000065089f97    63454207-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:36:49.628 I       true    1       numunique= 1 numrows= 1

-- Add another row

insert into app.TEST_TAB_1 values (2);
insert into test_tab_2 values(2);

-- Update the statistics

call syscs_util.syscs_update_statistics('APP', 'TEST_TAB_2', null);

select
c.TABLEID,
c.CONGLOMERATENUMBER,
c.CONGLOMERATENAME,
c.ISINDEX,
c.ISCONSTRAINT,
c.CONGLOMERATEID,
t.TABLEID,
t.TABLENAME,
t.TABLETYPE,
s.STATID,
s.REFERENCEID,
s.TABLEID,
s.CREATIONTIMESTAMP,
s.TYPE,
s.VALID,
s.COLCOUNT,
CAST(STATISTICS AS VARCHAR(40)) as STATISTICS
from sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEID
where t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;

-- There are still two rows but now one show 1 row and one shows 2 rows

TABLEID CONGLOMERATENUMBER      CONGLOMERATENAME        ISINDEX ISCONSTRAINT    CONGLOMERATEID  TABLEID TABLENAME       TABLETYPE       STATID  REFERENCEID     TABLEID CREATIONTIMESTAMP       TYPE    VALID   COLCOUNT        STATISTICS
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       edbc8255-0136-6999-c1b4-000065089f97    55410238-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:36:49.629 I       true    1       numunique= 1 numrows= 1
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       18438274-0136-6999-c1b4-000065089f97    63454207-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:41:19.164 I       true    1       numunique= 2 numrows= 2

-- Add the constraint back on

ALTER TABLE TEST_TAB_2
ADD CONSTRAINT TEST_TAB_2_FK_1
FOREIGN KEY (ID) REFERENCES TEST_TAB_1(ID);

-- Insert another row

insert into app.TEST_TAB_1 values (3);
insert into test_tab_2 values(3);

-- Update the statistics

call syscs_util.syscs_update_statistics('APP', 'TEST_TAB_2', null);

select
c.TABLEID,
c.CONGLOMERATENUMBER,
c.CONGLOMERATENAME,
c.ISINDEX,
c.ISCONSTRAINT,
c.CONGLOMERATEID,
t.TABLEID,
t.TABLENAME,
t.TABLETYPE,
s.STATID,
s.REFERENCEID,
s.TABLEID,
s.CREATIONTIMESTAMP,
s.TYPE,
s.VALID,
s.COLCOUNT,
CAST(STATISTICS AS VARCHAR(40)) as STATISTICS
from sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEID
where t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;

-- Now there are 3 rows

TABLEID CONGLOMERATENUMBER      CONGLOMERATENAME        ISINDEX ISCONSTRAINT    CONGLOMERATEID  TABLEID TABLENAME       TABLETYPE       STATID  REFERENCEID     TABLEID CREATIONTIMESTAMP       TYPE    VALID   COLCOUNT        STATISTICS
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       edbc8255-0136-6999-c1b4-000065089f97    55410238-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:36:49.629 I       true    1       numunique= 1 numrows= 1
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       45eb02e8-0136-6999-c1b4-000065089f97    63454207-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:46:00.211 I       true    1       numunique= 3 numrows= 3
84490209-0136-6999-c1b4-000065089f97    348432  84490209-0136-6999-c1b4-000065089f97    false   false   cccb420a-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    TEST_TAB_2      T       0ea502e9-0136-6999-c1b4-000065089f97    7ab90278-0136-6999-c1b4-000065089f97    84490209-0136-6999-c1b4-000065089f97    2012-03-31 17:46:00.212 I       true    1       numunique= 3 numrows= 3

Note that dropping that recreating the constraint or compressing the table does not fix the problem.",Major,Mamta A. Satoor,,2012-03-31T23:07:52.000+0000,"When a foreign key constraint on a table is dropped, the associated statistics row for the conglomerate is not removed",Closed,bug,Bug
2012-05-18T20:48:23.000+0000,DERBY-5566,Fixed,None,Minor,Camilla Haase,,2012-01-05T09:35:30.000+0000,"CREATE SCHEMA should state that one cannot create a new schema starting with ""SYS"" in case normal form ",Closed,bug,Bug
2012-05-15T20:18:52.000+0000,DERBY-5747,Fixed,"Currently, the schema and the objects remain after the user is dropped, cf. repro2.sh attached.
The authorization id of the schema of the dropped user is still that id (dangling) after DROP.
Perhaps ownership should revert to the DBO when a user is dropped, or should DROP USER do a cascade delete?
There is no way currently to change the ownership of the schema to another user.
At the very least we should document what happens.",Major,Camilla Haase,,2012-05-07T12:35:45.000+0000,Native user authentication: Docs do not describe what happens to schema and its SQL objects on SYSCS_UTIL.SYSCS_DROP_USER call,Closed,bug,Bug
2012-09-18T20:36:07.000+0000,DERBY-5929,Fixed,"A few topics in addition to those modified for DERBY-5925 show release numbers in output and have not been updated since 10.8 or 10.7. These topics should be updated for 10.10 for sure, and possibly earlier (the changes are cosmetic rather than substantive):

src/getstart/twwdactivity2.dita
src/getstart/twwdactivity4.dita
src/tools/rtoolssysinfo1002629.dita
",Minor,Camilla Haase,,2012-09-13T20:31:57.000+0000,Release numbers in a few topics need updating,Closed,bug,Bug
2014-09-23T20:19:20.000+0000,DERBY-6719,Fixed,"The derbyoptionaltools.jar should be added to the class paths constructed by all of the scripts in the bin distros which include derby.jar. Otherwise, the Lucene plugin (and future features which we put in derbyoptionaltools.jar) won't be available when you use the scripts to run ij, the network server, and sysinfo.

For instance, you will see information on this jar file if you run sysinfo this way...

{noformat}
java -jar derbyrun.jar sysinfo
{noformat}

…but not if you run the sysinfo script in the bin directory of a Derby installation.

",Major,Myrna van Lunteren,,2014-08-27T18:19:49.000+0000,Add derbyoptionaltools.jar to the class paths of the scripts in the bin directory,Closed,bug,Bug
2014-09-18T07:36:42.000+0000,DERBY-6737,Fixed,"The version we are running is a bit older (10.8.2.2), but I have tried latest version of Derby @ 10.11.1.1 with it's JDBC drivers that are included with it.  I am having problems with CLOB after moving the cursor forward/backwards. The CLOB(s) themselves are roughly 500000+ characters each. 

Sample Code: 
------------------------------------------------------------------------------------------- 
import java.sql.Clob; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.ResultSet; 
import java.sql.Statement; 

public class testZ { 
        private static String dbURL = ""jdbc:derby://9.42.11.34:1527/TestDB;create=true;user=test;password=test""; 
        
        public static void main(String[] args) { 
                try { 
                        Class.forName(""org.apache.derby.jdbc.ClientDriver"").newInstance(); 
                        Connection conn = DriverManager.getConnection(dbURL); 
                        conn.setAutoCommit(false); 
                        Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY); 
                        ResultSet rs = stmt.executeQuery(""select * from TESTCLOB where EVENTID=30266"");	
                        rs.last(); 
                        System.out.println(rs.getRow()); 
                        rs.first(); 
                        
                        Clob clob = rs.getClob(""GROUPASC""); 
                        int len = (int) ((java.sql.Clob) clob).length(); 
                        String clobData = ((java.sql.Clob) clob).getSubString(1, len); 
                        System.out.println(""Clob Data: "" + clobData);	
                } catch (Exception e) { 
                        e.printStackTrace(); 
                } 
        } 
} 
--------------------------------------------------------------------------------------------- 

Notice I am moving the cursor around. I wanted to get the size of the result set prior to getting the Clob data. So I do a rs.last() and rs.getNum() to get the size of the result set. I then move the cursor back to the first row and obtain the Clob data for first row. If I remove the rs.first() statement and get the Clob data of the rs.last() row, it works fine.  It seems as long as I go forward (not backwards), the CLOB data is retrievable. Note from the code, I am using ResultSet.TYPE_SCROLL_SENSITIVE. I have tried TYPE_SCROLL_INSENSITIVE, but with the same problem.  I also tried enabling/disabling the auto commit, also still have this error. For this code, I am getting the following error: 

java.sql.SQLException: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob's transaction has been committed or rolled back. 
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) 
        at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) 
        at org.apache.derby.client.am.ClientClob.length(Unknown Source) 
        at testZ.main(testZ.java:25) 
Caused by: ERROR XJ215: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob's transaction has been committed or rolled back. 
        at org.apache.derby.client.am.CallableLocatorProcedures.handleInvalidLocator(Unknown Source) 
        at org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(Unknown Source) 
        at org.apache.derby.client.am.ClientClob.getLocatorLength(Unknown Source) 
        at org.apache.derby.client.am.Lob.sqlLength(Unknown Source) 
        ... 2 more 
Caused by: ERROR 38000: The exception 'java.sql.SQLException: The locator that was supplied for this CLOB/BLOB is invalid' was thrown while evaluating an expression. 
        at org.apache.derby.client.am.ClientStatement.completeExecute(Unknown Source) 
        at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(Unknown Source) 
        at org.apache.derby.client.net.NetStatementReply.readExecuteCall(Unknown Source) 
        at org.apache.derby.client.net.StatementReply.readExecuteCall(Unknown Source) 
        at org.apache.derby.client.net.NetStatement.readExecuteCall_(Unknown Source) 
        at org.apache.derby.client.am.ClientStatement.readExecuteCall(Unknown Source) 
        at org.apache.derby.client.am.ClientPreparedStatement.flowExecute(Unknown Source) 
        at org.apache.derby.client.am.ClientPreparedStatement.executeX(Unknown Source) 
        ... 5 more 
Caused by: ERROR XJ217: The locator that was supplied for this CLOB/BLOB is invalid 
        at org.apache.derby.client.am.SqlException.<init>(Unknown Source) 
        at org.apache.derby.client.am.SqlException.<init>(Unknown Source) 
        ... 13 more 

On a related note, when a result set contains a CLOB, when doing a rs.last()/rs.first(), and then calling rs.next(), we get a ""Container has been closed."" SQL exception. 

Sample class: 
---------------------------------------------------------------------------------------------- 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.ResultSet; 
import java.sql.Statement; 

public class testZ { 
        private static String dbURL = ""jdbc:derby://9.42.11.34:1088/TestDB;create=true;user=test;password=derbypass"";     
        
        public static void main(String[] args) { 
                try { 
                        Class.forName(""org.apache.derby.jdbc.ClientDriver"").newInstance(); 
                        Connection conn = DriverManager.getConnection(dbURL); 
                        
                        Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY); 
                        //GROUPASC is column with CLOBS 
                        ResultSet rs = stmt.executeQuery(""select GROUPASC from RE_EVENTGROUPASC where EVENTID=5 OR EVENTID=6""); 
                        //ResultSet rs = stmt.executeQuery(""select EVENTID from RELATEDEVENTS.RE_EVENTGROUPASC where EVENTID=29419 OR EVENTID=29420""); 
                        
                        rs.last(); 
                        rs.first();	
                        
                        if (!rs.next()) { 
                        //exception here	
                        } 
                        
                        rs.close(); 
                        stmt.close(); 
                        conn.close(); 
                } catch (Exception e) { 
                        e.printStackTrace(); 
                } 
        } 
} 
---------------------------------------------------------------------------------------------- 

Note there are two queries (one is commented out). The GROUPASC is the column with the CLOB data type. When I call the second one (without the CLOB column), it works fine. Only happens with CLOBs! 

java.sql.SQLTransactionRollbackException: Container has been closed. 
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) 
        at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) 
        at org.apache.derby.client.am.ClientResultSet.next(Unknown Source) 
        at testZ.main(testZ.java:23) 
Caused by: ERROR 40XD0: Container has been closed. 
        at org.apache.derby.client.am.ClientResultSet.completeSqlca(Unknown Source) 
        at org.apache.derby.client.net.NetResultSetReply.parseFetchError(Unknown Source) 
        at org.apache.derby.client.net.NetResultSetReply.parseCNTQRYreply(Unknown Source) 
        at org.apache.derby.client.net.NetResultSetReply.readScrollableFetch(Unknown Source) 
        at org.apache.derby.client.net.ResultSetReply.readScrollableFetch(Unknown Source) 
        at org.apache.derby.client.net.NetResultSet.readScrollableFetch_(Unknown Source) 
        at org.apache.derby.client.am.ClientResultSet.flowGetRowset(Unknown Source) 
        at org.apache.derby.client.am.ClientResultSet.getNextRowset(Unknown Source) 
        at org.apache.derby.client.am.ClientResultSet.nextX(Unknown Source) 
        ... 2 more 


See posting on derby user forums:
http://apache-database.10148.n7.nabble.com/CLOB-data-errors-after-moving-cursor-around-td142101.html

I tried searching the forums and the existing defects, and couldn't find this issue is already being tracked. Thanks!",Major,Knut Anders Hatlen,,2014-09-15T14:57:51.000+0000,CLOB retrieve exceptions after moving cursor around,Closed,bug,Bug
2013-04-22T12:00:59.000+0000,DERBY-6137,Fixed,"I have an AFTER DELETE trigger on an exchange rate table which inserts data into a history table. It uses a sequence for the key in the history table.

Simplified it looks like this:
CREATE TRIGGER TRG_EXCHANGE_RATES_HIST_DEL
AFTER DELETE ON EXCHANGE_RATES
REFERENCING OLD ROW AS OLD
FOR EACH ROW
 INSERT INTO EXCHANGE_RATE_HISTORY (ID_HISTORY, CUR_FROM, AMNT_FROM, CUR_TO, AMNT_TO, AMNT_RATE, DAT_CREATION)
   VALUES (( NEXT VALUE for HIST_SEQ ), OLD.CUR_FROM, OLD.AMNT_FROM, OLD.CUR_TO, OLD.AMNT_TO, OLD.AMNT_RATE, CURRENT_TIMESTAMP);

The sequence is defined as:
create sequence HIST_SEQ
increment by 1
start with 10000001
 no maxvalue
 minvalue 10000001
no cycle;

Randomly when deleting data the statement will fail with:
ERROR XSTA2: A transaction was already active, when attempt was made to make another transaction active.

I will attach the full stack trace. It looks like the sequence cache needs to be cleared which causes a nested user transaction to start. But my delete statement is already running as part of a transaction (non XA - spring managed - hibernate).

We do not have this exception when testing with derby 10.8.2.2.

I get the same exception after building and running the latest trunk version (revision 1463340, Bundle-Version: 10.11.0000000.1463340)

To rule out the sequence on the history table, I switched it to use a generated column (GENERATED ALWAYS AS IDENTITY (START WITH 10000001, INCREMENT BY 1)) but I still randomly get the exception.

All tables in the application use sequences for their primary keys (through Hibernate's SequenceHiLoGenerator) so it seems to be possibly related to that.
",Major,Richard N. Hillegas,,2013-04-02T00:51:44.000+0000,update/delete statement on table with trigger fails randomly with ERROR XSTA2,Closed,bug,Bug
2015-01-14T20:03:43.000+0000,DERBY-6774,Fixed,"intermittent error in sane test runs in some nightly runs.

java.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailureASSERT FAILED Expected (column_id == format_ids.length)column_id = 1format_ids.length = 2format_ids = [I@2abb6423XJ001.U
	at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:112)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:321)
	at org.apache.derby.client.am.ClientStatement.execute(ClientStatement.java:990)
	at org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest.testAddIdentityColumn(AlterTableTest.java:377)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR XJ001: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailureASSERT FAILED Expected (column_id == format_ids.length)column_id = 1format_ids.length = 2format_ids = [I@2abb6423XJ001.U
	at org.apache.derby.client.am.ClientStatement.completeSqlca(ClientStatement.java:2109)
	at org.apache.derby.client.am.ClientStatement.completeExecuteImmediate(ClientStatement.java:1676)
	at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(NetStatementReply.java:209)
	at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(NetStatementReply.java:60)
	at org.apache.derby.client.net.StatementReply.readExecuteImmediate(StatementReply.java:47)
	at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(NetStatement.java:142)
	at org.apache.derby.client.am.ClientStatement.readExecuteImmediate(ClientStatement.java:1672)
	at org.apache.derby.client.am.ClientStatement.flowExecute(ClientStatement.java:2401)
	at org.apache.derby.client.am.ClientStatement.executeX(ClientStatement.java:995)
	at org.apache.derby.client.am.ClientStatement.execute(ClientStatement.java:981)
",Major,Mike Matrigali,,2014-11-25T03:44:38.000+0000,background post commit threads cause ASSERTS/errors on interaction with alter table add column,Closed,bug,Bug
2015-07-18T18:25:48.000+0000,DERBY-6783,Fixed,"Following sql script was shared on derby-user(http://mail-archives.apache.org/mod_mbox/db-derby-user/201412.mbox/%3c548ABA6D.8000509@zoho.com%3e).

The UPDATE TRIGGER  with the WHEN clause below does not fire as expected. Same script works fine on DB2.
ij version 10.11 
 ij> connect 'jdbc:derby:MyDbTest;create=true'; 
 ij> CREATE TABLE t1 (id INTEGER, done_date DATE, status CHAR(1)); 
 0 rows inserted/updated/deleted 
 ij> CREATE TRIGGER tr1 AFTER UPDATE OF status ON t1 REFERENCING NEW AS newrow FOR EACH ROW WHEN (newrow.status='d') UPDATE t1 SET done_date=current_date WHERE id=newrow.id; 
 0 rows inserted/updated/deleted 
 ij> insert into t1 values (1, null, 'a'); 
 1 row inserted/updated/deleted 
 ij> SELECT * FROM t1; 
 ID         |DONE_DATE |STA& 
 --------------------------- 
 1          |NULL      |a    
  
 1 row selected 
 ij> UPDATE t1 SET status='d'; 
 1 row inserted/updated/deleted 
 ij> SELECT * FROM t1; 
 ID         |DONE_DATE |STA& 
 --------------------------- 
 1          |NULL      |d    
  
 1 row selected 
 ij> exit; ",Major,Abhinav Gupta,,2014-12-12T22:05:59.000+0000,WHEN clause in CREATE TRIGGER for UPDATE is not working for the sql script below,Closed,bug,Bug
2013-08-09T22:46:33.000+0000,DERBY-6289,Fixed,"This issue is being used to track an effort to backport fixes to 10.8.

Now that we can edit closed issues. I suggest a modified approach to the effort

1) Choose a bug to backport from the list:  Look at comment to make sure nobody else has picked up the issue.

https://issues.apache.org/jira/issues/?jql=project%20%3D%20DERBY%20AND%20type%20%3D%20Bug%20and%20resolution%20%3D%20Fixed%20and%20COMPONENT%20NOT%20IN%20%28%22Test%22%2C%20%22Documentation%22%2C%20%22Web%20Site%22%29%20AND%20%20fixVersion%20IN%20%28%2210.9.1.0%22%2C%2210.9.2.2%22%2C%2210.10.1.1%22%2C%2210.10.1.3%22%29%20AND%20%28NOT%20fixVersion%20IN%20%28%2210.8.1.2%22%2C%2210.8.2.2%22%2C%2210.8.3.0%22%2C%20%2210.8.3.1%22%29%29%20AND%20%28labels%20NOT%20IN%20%28derby_backport_reject_10_8%2C%20derby_backport_reject_10_9%29%20OR%20labels%20is%20null%29

2) Reassign the issue to yourself (without reopening), put a comment that you are backporting the fix to 10.8 and link to this issue.

3) After backport reassign the bug to the original owner and adjust fix version.  

4) If you were not able to backport for some reason, label derby_backport_reject10_8 or derby_backport_reject_10_9 as appropriate and unlink from this issue.


",Major,None,,2013-07-09T13:40:33.000+0000,Derby 10.8 backport issue (summer 2013),Closed,bug,Bug
2013-07-25T15:39:29.000+0000,DERBY-6298,Fixed,"Cf syntax description in ref/rrefsqlj16095.html:

Column-level-constraint

{
    NOT NULL |
    [ [CONSTRAINT constraint-Name]
    {
        CHECK (searchCondition) |
        {
            PRIMARY KEY |
            UNIQUE |
            REFERENCES clause
        } 
    }
}

but actually this works:

create table t(i int constraint foo not null); The curly braces around primary, unique and references are redundant as well.
",Major,Camilla Haase,,2013-07-19T11:37:22.000+0000,"Documentation implies column NOT NULL constraint cannot be named, but it can be.",Closed,bug,Bug
2014-06-30T16:34:29.000+0000,DERBY-6625,Fixed,"When I try to run tests on Java SE 8 compact profile 2 with head of trunk, I see lots of permission related errors. If I add the flag -Djava.security.policy=<NONE> to disable the security manager, the errors seem to go away.

For example, if I try to run lang.XMLBindingTest, I see this error:

{noformat}
1) XMLBindingTestjava.sql.SQLException: Java exception: 'access denied (""java.util.PropertyPermission"" ""user.dir"" ""read""): java.security.AccessControlException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:660)
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:647)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:301)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:932)
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)
	at java.sql.DriverManager.getConnection(Unknown Source)
	at java.sql.DriverManager.getConnection(Unknown Source)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:101)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:68)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:44)
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1680)
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)
	at org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest$XBindTestSetup.setUp(XMLBindingTest.java:293)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR XJ001: Java exception: 'access denied (""java.util.PropertyPermission"" ""user.dir"" ""read""): java.security.AccessControlException'.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 36 more
Caused by: java.security.AccessControlException: access denied (""java.util.PropertyPermission"" ""user.dir"" ""read"")
	at java.security.AccessControlContext.checkPermission(Unknown Source)
	at java.security.AccessController.checkPermission(Unknown Source)
	at java.lang.SecurityManager.checkPermission(Unknown Source)
	at java.lang.SecurityManager.checkPropertyAccess(Unknown Source)
	at java.lang.System.getProperty(Unknown Source)
	at java.io.UnixFileSystem.resolve(Unknown Source)
	at java.io.File.getCanonicalPath(Unknown Source)
	at org.apache.derby.impl.io.DirStorageFactory.doInit(DirStorageFactory.java:190)
	at org.apache.derby.impl.io.BaseStorageFactory.init(BaseStorageFactory.java:88)
	at org.apache.derby.impl.io.DirStorageFactory.init(DirStorageFactory.java:39)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.privGetStorageFactoryInstance(StorageFactoryService.java:215)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.access$400(StorageFactoryService.java:71)
	at org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:958)
	at org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:954)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.getCanonicalServiceName(StorageFactoryService.java:952)
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1504)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:963)
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:405)
	... 29 more
{noformat}",Major,Richard N. Hillegas,,2014-06-19T11:39:01.000+0000,Many permission related test failures on Java 8 compact2,Closed,bug,Bug
2012-11-11T22:55:23.000+0000,DERBY-5972,Fixed,"The grammar doesn't accept the OR operator without parentheses in some constructs.

For example, in a select list:

ij> create table t(b1 boolean, b2 boolean);
0 rows inserted/updated/deleted
ij> select b1 or b2 from t;
ERROR 42X01: Syntax error: Encountered ""or"" at line 1, column 11. (errorCode = 30000)
Issue the 'help' command for general information on IJ command syntax.
Any unrecognized commands are treated as potential SQL commands and executed directly.
Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.

However, it does not fail if OR is replaced by AND, or if parentheses are used around the OR expression:

ij> select (b1 or b2) from t;
1    
-----

0 rows selected
ij> select b1 and b2 from t;
1    
-----

0 rows selected

Similar behaviour is seen in VALUES statements:

ij> values true or false;
ERROR 42X01: Syntax error: Encountered ""or"" at line 1, column 13. (errorCode = 30000)
Issue the 'help' command for general information on IJ command syntax.
Any unrecognized commands are treated as potential SQL commands and executed directly.
Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.
ij> values (true or false);
1    
-----
true 

1 row selected
ij> values true and false;
1    
-----
false

1 row selected",Major,Knut Anders Hatlen,,2012-10-31T12:25:49.000+0000,Grammar doesn't accept OR operator without parentheses,Closed,bug,Bug
2012-05-08T11:30:20.000+0000,DERBY-5730,Fixed,"DataDictionaryImpl contains a static field called SYSFUN_AD, which holds an array of AliasDescriptor objects for the functions in the SYSFUN schema. This array is lazily populated as the functions are called, and it is shared between all DataDictionaryImpl instances on the system.

The AliasDescriptors contain references to the DataDictionaryImpl that created them, so SYSFUN_AD may end up referencing indirectly to a number of different DataDictionaryImpl instances, depending on where the respective SYSFUN functions are called the first time. Once an AliasDescriptor has been added to SYSFUN_AD, it stays there until the DataDictionaryImpl class is unloaded (in most cases, until the JVM terminates). This means the array may hold references to DataDictionaryImpl instances that belong to database instances that have been shut down, and that the memory held by those database instances never becomes eligible for garbage collection.",Major,Knut Anders Hatlen,,2012-04-27T08:55:17.000+0000,DataDictionaryImpl leaks references to itself via SYSFUN_AD,Closed,bug,Bug
2012-05-10T17:31:49.000+0000,DERBY-5628,Fixed,"In the description of the DELETE statement in the reference manual, the syntax description gives this:
:
{
    DELETE FROM table-Name [[AS] correlation-Name]
        [WHERE clause] |
    DELETE FROM table-Name WHERE CURRENT OF
}

The last line is wrong. It should read 

DELETE FROM table-Name WHERE CURRENT OF clause. It is already a link to the clause.",Minor,Camilla Haase,,2012-02-24T01:28:15.000+0000,Wrong syntax description in DELETE statement doc,Closed,bug,Bug
2012-05-08T11:26:46.000+0000,DERBY-5736,Fixed,"If I run TriggerTest with the flags -server and -Xmx150M passed to the JVM, I fairly consistently see a NPE being thrown:

java.lang.NullPointerException
        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:221)
        at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:114)
        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:281)
        at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:818)
        at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:280)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1715)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1370)
        at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(TriggerTest.java:880)
        at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(TriggerTest.java:779)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at junit.framework.TestCase.runTest(TestCase.java:164)
        at junit.framework.TestCase.runBare(TestCase.java:130)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
        at junit.framework.TestResult$1.protect(TestResult.java:106)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.framework.TestResult.run(TestResult.java:109)
        at junit.framework.TestCase.run(TestCase.java:120)
        at junit.framework.TestSuite.runTest(TestSuite.java:230)
        at junit.framework.TestSuite.run(TestSuite.java:225)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.textui.TestRunner.doRun(TestRunner.java:121)
        at junit.textui.TestRunner.start(TestRunner.java:185)
        at junit.textui.TestRunner.main(TestRunner.java:143)

In derby.log, there is an OOME right before the NPE:

java.lang.OutOfMemoryError: Java heap space
        at org.apache.derby.impl.jdbc.LOBStreamControl.updateData(LOBStreamControl.java:154)
        at org.apache.derby.impl.jdbc.LOBStreamControl.write(LOBStreamControl.java:247)
        at org.apache.derby.impl.jdbc.LOBStreamControl.<init>(LOBStreamControl.java:89)
        at org.apache.derby.impl.jdbc.EmbedBlob.<init>(EmbedBlob.java:189)
        at org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(EmbedResultSet.java:4072)
        at org.apache.derby.impl.jdbc.EmbedResultSet.getObject(EmbedResultSet.java:1704)
        at org.apache.derby.exe.ac56961bb1x0137x0d04x3d17x00005ffb0f6356.e0(Unknown Source)
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:139)
        at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:148)
        at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)
        at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:507)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:313)
        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:176)
        at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:114)
(...)

The code that fails with NPE, is this call to cleanupOnError() in a catch block in GenericTriggerExecutor.executeSPS():

				/* retrieve the current active SC */
				StatementContext sc = lcc.getStatementContext();
				
				/* make sure that the cleanup is on the new SC */
				if (active_sc != sc) 
				{
					sc.cleanupOnError(e);
				}",Major,Knut Anders Hatlen,,2012-05-02T10:22:42.000+0000,NullPointerException in GenericTriggerExecutor.executeSPS() caused by OutOfMemoryError,Closed,bug,Bug
2013-10-02T14:22:41.000+0000,DERBY-6353,Fixed,"The ""SQL Syntax"" topic in the Getting Started guide (http://db.apache.org/derby/docs/10.10/getstart/rgsdocs10012.html) does not describe the curly braces (""{ }"") as they are actually used in syntax statements, where they actually group required items, normally so choices can be separated by vertical bars (""|""). This should be corrected.

I also plan to adopt the suggestion made in DERBY-6121 that the topic be added to the Reference Manual, where syntax is most used. 

Does anything else in the topic need fixing? I am confused by the statement that the asterisk ""has a special meaning in some SQL statements."" What special meaning can it have other than marking repeatable items?",Minor,Camilla Haase,,2013-09-25T14:47:00.000+0000,"Update syntax description in Getting Started, use in Reference Manual too",Closed,bug,Bug
2013-11-15T10:43:29.000+0000,DERBY-6348,Fixed,"With 10.5.1.1 and newer, the following ij session fails with a NullPointerException (production jars) or an assert failure (debug jars):

ij version 10.10
ij> connect 'jdbc:derby:db;create=true';
ij> create table t(x int);
0 rows inserted/updated/deleted
ij> insert into t values 0;
1 row inserted/updated/deleted
ij> create trigger tr1 after update on t values 1;
0 rows inserted/updated/deleted
ij> create trigger tr2 after update on t for each row update t set x = x + 1 where x < 3;
0 rows inserted/updated/deleted
ij> update t set x = x + 1;
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.

It does not fail on 10.4.2.0:

ij version 10.4
ij> connect 'jdbc:derby:db;create=true';
ij> create table t(x int);
0 rows inserted/updated/deleted
ij> insert into t values 0;
1 row inserted/updated/deleted
ij> create trigger tr1 after update on t values 1;
0 rows inserted/updated/deleted
ij> create trigger tr2 after update on t for each row update t set x = x + 1 where x < 3;
0 rows inserted/updated/deleted
ij> update t set x = x + 1;
1 row inserted/updated/deleted
ij> select * from t;
X          
-----------
3          

1 row selected",Major,Knut Anders Hatlen,,2013-09-18T12:16:49.000+0000,NPE or assert failure in recursive trigger,Closed,bug,Bug
2013-09-26T09:32:02.000+0000,DERBY-6351,Fixed,"If a reference to a transition table in a statement trigger has a correlation name, and that correlation name is equal to the name of the transition table, the CREATE TRIGGER statement fails with a syntax error.

To reproduce:

{noformat}
ij version 10.10
ij> connect 'jdbc:derby:db;create=true';
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create table t2(x int);
0 rows inserted/updated/deleted
ij> create trigger tr1 after insert on t1 referencing new table as n insert into t2 select x from n as n;
ERROR 42X01: Syntax error: Encountered ""as"" at line 1, column 89.
Issue the 'help' command for general information on IJ command syntax.
Any unrecognized commands are treated as potential SQL commands and executed directly.
Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.
{noformat}",Minor,Knut Anders Hatlen,,2013-09-24T10:13:22.000+0000,Syntax error on equal transition table name and correlation name in statement trigger,Closed,bug,Bug
2013-01-10T10:33:32.000+0000,DERBY-6030,Fixed,"When an ESCAPE clause contains multiple characters, but only a single collation element, they are accepted as long as it's not a literal:

ij> connect 'jdbc:derby:memory:nodb;create=true;territory=no;collation=TERRITORY_BASED';
ij> create table t(x varchar(20), y varchar(20), z varchar(20));
0 rows inserted/updated/deleted
ij> insert into t values ('abc', 'def', 'aa');
1 row inserted/updated/deleted
ij> select * from t where x like y escape z;
X                   |Y                   |Z                   
--------------------------------------------------------------

0 rows selected

If the same query is performed with a literal in the ESCAPE clause, the problem is detected and correctly reported:

ij> select * from t where x like y escape 'aa';
ERROR 22019: Invalid escape sequence, 'aa'. The escape string must be exactly one character. It cannot be a null or more than one character.",Major,Mamta A. Satoor,,2013-01-02T16:32:52.000+0000,Length of escape string in LIKE ... ESCAPE not properly checked with territory based collation,Closed,bug,Bug
2013-11-04T10:14:33.000+0000,DERBY-6396,Fixed,"We got a NullPointerException trying to start a Derby database in embedded mode; the stacktrace indicated it happened in org.apache.derby.impl.io.DirFile.deleteAll(); that method got called from org.apache.derby.impl.io.BaseStorageFactory.createTempDir().

After investigating, it appears that the deleteAll() method calls ""super.list()"", which according to the java.io.File specifications, can return null. But the deleteAll() method doesn't handle that case gracefully.",Major,Knut Anders Hatlen,,2013-10-29T00:42:40.000+0000,NullPointerException in DirFile,Closed,bug,Bug
2013-12-02T18:05:45.000+0000,DERBY-6380,Fixed,"DERBY-6350(Provide a rolling file implementation of derby.log) is adding a very useful feature to Derby. To test the feature, I ran the junit suite with rollingFile option as shown below
time java -Dderby.stream.error.style=rollingFile -Dderby.tests.trace=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.suites.All > runall.out 2>&1
I noticed that even though we are running junit suite with the rollingFile, we still create derby.log(although it was empty) along with expected derby-0.log and so on. I had not expected to see the traditional derby.log when running with rollingFile. In addition, when a test failed, the failed directory had empty derby.log copied but the rolling log files did not get copied. The code changes to copy the rolling log files in case of failure probably need to go into org.apache.derbyTesting.junit.BaseTestCase:runBare() in the ""catch (Throwable running) {"" section. The log files are crucial to do any test failure debugging and hence should get copied in the failed directory.",Major,Myrna van Lunteren,,2013-10-16T18:01:29.000+0000,Rolling log files do not get copied in failed directory when a junit test fails,Closed,bug,Bug
2013-12-05T15:56:48.000+0000,DERBY-6362,Fixed,"DERBY-3944 fixed the problem with CHECK constraints invoking different routines depending on who performed the triggering INSERT or UPDATE statement.

The discussion leading up to DERBY-3944 can be found here: http://mail-archives.apache.org/mod_mbox/db-derby-dev/200811.mbox/%3C4919CD4A.5010408@sun.com%3E

Three alternatives are discussed in the thread:

A) The schema that holds the CHECK constraint?
B) The schema that holds the table?
C) The current schema when the CREATE TABLE statement was issued?

The conclusion in the thread was that option C was the correct one. However, what was implemented, was option B.

I cannot find any information in DERBY-3944 about why option B ended up being chosen, so I assume that it was unintended.

Here's an ij script that shows how the CHECK constraint tries to invoke the TO_HEX function in the schema of the target table (S2) instead of the schema that was the current schema at the time of CREATE TABLE:

ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create schema s1;
0 rows inserted/updated/deleted
ij> create schema s2;
0 rows inserted/updated/deleted
ij> create function s1.to_hex(i int) returns char(4) language java parameter style java external name 'java.lang.Integer.toHexString' no sql;
0 rows inserted/updated/deleted
ij> set schema s1;
0 rows inserted/updated/deleted
ij> create table s2.t(x int, constraint cc check(to_hex(x) <> '80'));
0 rows inserted/updated/deleted
ij> insert into s2.t values 1;
ERROR 42Y03: 'TO_HEX' is not recognized as a function or procedure. (errorCode = 30000)
ij> create function s2.to_hex(i int) returns char(4) language java parameter style java external name 'java.lang.Integer.toHexString' no sql;
0 rows inserted/updated/deleted
ij> insert into s2.t values 1;
1 row inserted/updated/deleted",Major,Knut Anders Hatlen,,2013-10-02T09:18:47.000+0000,CHECK constraint uses wrong schema for unqualified routine invocations,Closed,bug,Bug
2013-11-14T07:28:08.000+0000,DERBY-6383,Fixed,"I see this problem on 10.8 and higher. To reproduce, create a database with a trigger like this:

connect 'jdbc:derby:trigdb;create=true';
create table t1(x int, y int);
create table t2(x int, y int);
create trigger tr after update of x on t1 referencing old table as old insert into t2 select * from old;

Then run dblook on the database, and you'll see the following output:

-- ----------------------------------------------
-- DDL Statements for triggers
-- ----------------------------------------------

CREATE TRIGGER ""APP"".""TR"" AFTER UPDATE OF ""X"", ""Y"" ON ""APP"".""T1"" REFERENCING OLD_TABLE AS OLD FOR EACH STATEMENT insert into t2 select * from old;

Notice that the DDL creates an update trigger for columns X and Y, whereas the original trigger was defined on column X only.

I see the expected DDL on 10.7.1.1.",Major,Mamta A. Satoor,,2013-10-21T12:33:28.000+0000,Update trigger defined on one column fires on update of other columns,Closed,bug,Bug
2014-06-09T14:23:40.000+0000,DERBY-6597,Fixed,"DROP TABLE seems to cascade and drop any Lucene indexes defined on the table. However, there seems to be some traces of meta-data left, so that LUCENESUPPORT.LISTINDEXES thinks the index is still there, and fails with FileNotFoundException when trying to access the index:

{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t(x int primary key, c clob);
0 rows inserted/updated/deleted
ij> call syscs_util.syscs_register_tool('luceneSupport', true);
0 rows inserted/updated/deleted
ij> call lucenesupport.createindex('app', 't', 'c', null);
0 rows inserted/updated/deleted
ij> drop table t;
0 rows inserted/updated/deleted
ij> select * from table ( lucenesupport.listindexes() ) li;
SCHEMANAME                                                                                                                      |TABLENAME                                                                                                                       |COLUMNNAME                                                                                                                      |LASTUPDATED                  |LUCENEVERSION       |ANALYZER                                                                                                                        |ANALYZERMAKER                                                                                                                   

ERROR XJ001: Java exception: 'java.io.FileNotFoundException: /tmp/db/LUCENE/APP/T/C/derby-lucene.properties'.
ERROR XJ001: Java exception: '/tmp/db/LUCENE/APP/T/C/derby-lucene.properties: java.io.FileNotFoundException'.
{noformat}",Major,Richard N. Hillegas,,2014-06-03T15:03:38.000+0000,LUCENESUPPORT.LISTINDEXES() fails with FileNotFoundException,Closed,bug,Bug
2014-06-10T18:24:43.000+0000,DERBY-6594,Fixed,"The ""Listing indexes"" topic of the tools guide says two places that the schema is LUCENESCHEMA. It should be LUCENESUPPORT.

The example in the topic lacks an empty argument list in the table function call and fails with a syntax error because of it (after fixing the schema name). It should say:

{code:sql}
SELECT * FROM TABLE( LUCENESUPPORT.LISTINDEXES() ) T
{code}",Minor,Camilla Haase,,2014-06-02T13:08:02.000+0000,"Typos in ""Listing indexes"" topic of the tools guide",Closed,bug,Bug
2014-06-13T14:52:03.000+0000,DERBY-6605,Fixed,"The topic ""Derby support for SQL-92 features"" in the Reference Manual (http://db.apache.org/derby/docs/10.10/ref/rrefsql9241891.html) seems not to have been substantively updated since about 2007.

For one thing, the parenthesis ""(non-deferrable)"" needs to be removed from Table 8 (constraint support). Also, I think we've supported natural joins for some time. 

Could someone more knowledgeable than I am go through the items marked ""No"" and see if any more need updating? I think those two might be the only ones, but I am not quite sure.",Minor,Camilla Haase,,2014-06-06T13:40:30.000+0000,"""Derby support for SQL-92 features"" topic in Reference Manual needs updating",Closed,bug,Bug
2014-06-10T19:12:58.000+0000,DERBY-6598,Fixed,"It's been recommended that we should make the documentation of the SQLJ.INSTALL_JAR procedure (and SQLJ.REPLACE_JAR) state more explicitly that the privilege should only be granted to trusted users. For example:

""Since this procedure can be used to install arbitrary code that runs in the same Java Virtual Machine as the Derby database engine, the execution privilege should only be granted to trusted users.""

This needs to go into the Reference Manual topics on these procedures as well as other locations where they are discussed.",Major,Camilla Haase,,2014-06-03T15:18:04.000+0000,Document permissions recommendations for JAR procedures,Closed,bug,Bug
2014-06-09T17:02:07.000+0000,DERBY-6602,Fixed,"If there's an integer key column with a NULL value, the Lucene query will return a fake key value (0) rather than NULL. The document id and score will be correct. Example:

{noformat}
ij> create table t1(x int, c clob);
0 rows inserted/updated/deleted
ij> insert into t1 values (null, 'abc'), (null, 'def');
2 rows inserted/updated/deleted
ij> call lucenesupport.createindex('app', 't1', 'c', null, 'x');
0 rows inserted/updated/deleted
ij> select * from table(t1__c('abc or def', null, 3, null)) tc;
X          |DOCUMENTID |SCORE          
---------------------------------------
0          |0          |0.35355338     
0          |1          |0.35355338     

2 rows selected
{noformat}

If the key column is a string type, the returned key is correct (NULL). The document id is sometimes correct and sometimes NULL, and the score seems to be NULL always. Example:

{noformat}
ij> create table t2(x varchar(10), c clob);
0 rows inserted/updated/deleted
ij> insert into t2 values (null, 'abc'), (null, 'def');
2 rows inserted/updated/deleted
ij> call lucenesupport.createindex('app', 't2', 'c', null, 'x');
0 rows inserted/updated/deleted
ij> select * from table(t2__c('abc or def', null, 3, null)) tc;
X         |DOCUMENTID |SCORE          
--------------------------------------
NULL      |NULL       |NULL           
NULL      |1          |NULL           

2 rows selected
{noformat}",Major,Richard N. Hillegas,,2014-06-05T12:07:06.000+0000,LuceneQueryVTI handles NULL key values inconsistently,Closed,bug,Bug
2011-11-28T17:22:15.000+0000,DERBY-5514,Fixed,"When running SecureServerTest with jars instrumented with EMMA using the ant emma-all target, I see:

[junit] (net)derbynet.SecureServerTest.testServerStartup used 8475 ms junit.framework.TestListener: endTest(testServerStartup)
    [junit] START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:
    [junit] java.security.policy: error adding Entry:
    [junit] 	java.net.MalformedURLException: no protocol: /export/home/dag/java/sb/sb1/tools/java/emma.jar
    [junit] java.security.AccessControlException: access denied (java.io.FilePermission coverage.ec read)
    [junit] 	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:374)
    [junit] 	at java.security.AccessController.checkPermission(AccessController.java:546)
    [junit] 	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)
    [junit] 	at java.lang.SecurityManager.checkRead(SecurityManager.java:871)
    [junit] 	at java.io.File.exists(File.java:731)
    [junit] 	at com.vladium.emma.data.DataFactory.persist(DataFactory.java:525)
    [junit] 	at com.vladium.emma.data.DataFactory.persist(DataFactory.java:86)
    [junit] 	at com.vladium.emma.rt.RTCoverageDataPersister.dumpCoverageData(RTCoverageDataPersister.java:54)
    [junit] 	at com.vladium.emma.rt.RTExitHook.run(RTExitHook.java:32)
    [junit] 	at java.lang.Thread.run(Thread.java:662)
    [junit] Exception in thread ""EMMA shutdown handler thread"" java.lang.RuntimeException: EMMA failed to dump coverage data: java.security.AccessControlException: access denied (java.io.FilePermission coverage.ec read)
    [junit] 	at com.vladium.emma.rt.RTCoverageDataPersister.dumpCoverageData(RTCoverageDataPersister.java:71)
    [junit] 	at com.vladium.emma.rt.RTExitHook.run(RTExitHook.java:32)
    [junit] 	at java.lang.Thread.run(Thread.java:662)
    [junit] END-SPAWNED  :SpawnedNetworkServer ERROR OUTPUT:

This is presumably because the test spawns a server which runs with the default server policy.

Another thing is that is seems dangerous to let the spawned process write to EMMA's ""coverage.ec"", since we don't know when the parent process will write to it. This behavior could be what's been causing our corrutions in the EMMA runs earlier. The missing permissions just highlight what's happening.

In this case the spawned process was started with this command line (I instrumented the code):

XXX server startup command = /usr/jdk/instances/jdk1.6.0/jre/bin/java -classpath /<my sandbox>/tools/java/emma.jar:/<my sandbox>/jars/sane/derbyTesting.jar:/<my sandbox>/jars/emma/lib/derbyclient.jar:/<my sandbox>/jars/emma/lib/derbynet.jar:/<my sandbox>/jars/emma/lib/derby.jar:/<my sandbox>/jars/emma/lib/derbytools.jar:/<my sandbox>/jars/emma/lib/derbyrun.jar:/<my sandbox>/tools/java/junit.jar:/usr/share/lib/ant/ant-launcher.jar:/usr/share/lib/ant/ant.jar:/usr/share/lib/ant/ant-junit.jar org.apache.derby.drda.NetworkServerControl start -h localhost -p 1527 

Possible approaches:
         run the spawned VMs with plain jars (downside: we won't get coverage for those)
         run the spawned with a special default policy file when we run with EMMA ++
         run the spawned VM with -noSecurityManager if with EMMA jars
",Major,Dag H. Wanvik,,2011-11-24T00:39:57.000+0000,SecureServerTest (and others) don't play nice with EMMA: AccessControlException,Closed,bug,Bug
2011-11-24T08:59:47.000+0000,DERBY-5512,Fixed,"When running the Ant targets that produce code coverage reports for the JUnit tests, the reports are empty:

$ ant -Dderby.junit.testclass=org.apache.derbyTesting.functionTests.tests.lang.CommentTest emma-single 2>&1
(...)
emma-report:
   [report] [EMMA v2.0, build 5312 (2005/06/12 19:32:43)]
   [report] input data path:
   [report] {
   [report]   /code/derby/trunk/junit_20111123_1751/coverage.em
   [report] }
   [report] source path:
   [report] {
   [report]   /code/derby/trunk/java/client
   [report]   /code/derby/trunk/java/demo
   [report]   /code/derby/trunk/java/drda
   [report]   /code/derby/trunk/java/engine
   [report]   /code/derby/trunk/java/shared
   [report]   /code/derby/trunk/java/storeless
   [report]   /code/derby/trunk/java/tools
   [report] }
   [report] processing input file [/code/derby/trunk/junit_20111123_1751/coverage.em] ...
   [report]   loaded 1542 metadata entries
   [report] 1 file(s) read and merged in 194 ms
   [report] nothing to do: no runtime coverage data found in any of the data files
(...)

Running Ant with the -v option revealed that the JUnit test was run with the uninstrumented jar files. I suspect that this is because DERBY-4089 made the build script set derby.junit.classpath automatically if it's not already set. Since Ant properties cannot be changed once they've been assigned a value, this prevents the emma-instrumentation target from building a derby.junit.classpath that points to the instrumented jars.",Minor,Knut Anders Hatlen,,2011-11-23T16:57:05.000+0000,emma-single and emma-all don't use the instrumented jars,Closed,bug,Bug
2014-07-10T15:29:19.000+0000,DERBY-6657,Fixed,"The work on DERBY-6652 now prevents views from being used as the source data sets of MERGE statements. We should adjust the Reference Guide section on the MERGE statement accordingly. This statement in rrefsqljmerge.dita:

""sourceTable must identify a base table, a view, or a table function, and it may not be a synonym""

should be changed to 

""sourceTable must identify a base table or a table function, and it may not be a synonym""",Major,Camilla Haase,,2014-07-10T12:36:22.000+0000,Need to document the fact that views can't be the source data sets of MERGE statements,Closed,bug,Bug
2014-07-14T11:55:42.000+0000,DERBY-6650,Fixed,"http://download.java.net/javadesktop/derby/request_5593638/javadb-task-3898689.html

{noformat}
java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: javax/management/MBeanServerConnection' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(EmbedCallableStatement.java:134)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertUpdateCount(BaseJDBCTestCase.java:1415)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testCreateAndQueryIndex(LuceneSupportTest.java:115)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR 38000: The exception 'java.lang.NoClassDefFoundError: javax/management/MBeanServerConnection' was thrown while evaluating an expression.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
Caused by: java.lang.NoClassDefFoundError: javax/management/MBeanServerConnection
	at org.apache.lucene.index.BufferedUpdates.<clinit>(BufferedUpdates.java:53)
	at org.apache.lucene.index.DocumentsWriterDeleteQueue.<init>(DocumentsWriterDeleteQueue.java:86)
	at org.apache.lucene.index.DocumentsWriterDeleteQueue.<init>(DocumentsWriterDeleteQueue.java:82)
	at org.apache.lucene.index.DocumentsWriter.<init>(DocumentsWriter.java:115)
	at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:772)
	at org.apache.derby.optional.lucene.LuceneSupport$5.run(LuceneSupport.java:1694)
	at org.apache.derby.optional.lucene.LuceneSupport$5.run(LuceneSupport.java:1689)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.optional.lucene.LuceneSupport.getIndexWriter(LuceneSupport.java:1687)
	at org.apache.derby.optional.lucene.LuceneSupport.createOrRecreateIndex(LuceneSupport.java:514)
	at org.apache.derby.optional.lucene.LuceneSupport.createIndex(LuceneSupport.java:421)
	at org.apache.derby.exe.ac7e434f4ax0147x151ex54d2x0000594f050da.g0(Unknown Source)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
Caused by: java.lang.ClassNotFoundException: javax.management.MBeanServerConnection
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
{noformat}",Major,Knut Anders Hatlen,,2014-07-08T11:59:17.000+0000,Lucene tests fail on compact profile 2,Closed,bug,Bug
2014-07-10T16:54:51.000+0000,DERBY-6646,Fixed,"By default, only the DBO can call SYSCS_EXPORT_TABLE and SYSCS_IMPORT_TABLE. But applications can bypass these authorization check by calling Export.exportTable() and Import.importTable() directly. 

Here's a repro for the bypassing of SYSCS_EXPORT_TABLE. I think that the repro for SYSCS_IMPORT_TABLE is similar. First compile this class...

{noformat}
import java.sql.*;
import org.apache.derby.impl.load.Export;

public class ExportWrapper
{
    public  static  void    export
        (
         String schemaName, 
         String tableName, String outputFileName,  
         String columnDelimiter, String characterDelimiter,
         String codeset
         )
        throws Exception
    {
        Connection  conn = DriverManager.getConnection( ""jdbc:default:connection"" );
        
        Export.exportTable
            ( conn, schemaName, tableName, outputFileName, columnDelimiter, characterDelimiter, codeset );
    }
}
{noformat}

…then run this script:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

connect 'jdbc:derby:memory:db1;create=true;user=test_dbo';

call syscs_util.syscs_create_user( 'TEST_DBO', 'test_dbopassword' );
call syscs_util.syscs_create_user( 'RUTH', 'ruthpassword' );

-- shutdown in order to enable NATIVE authentication
connect 'jdbc:derby:memory:db1;shutdown=true';

connect 'jdbc:derby:memory:db1;user=ruth;password=ruthpassword' as ruth;

create table t( a int );
insert into t( a ) values ( 1 );

create procedure exportWrapper
(
  in schemaname  varchar(128),
  in tablename varchar(128),
  in filename varchar(32672),
  in columndelimiter char(1),
  in characterdelimiter char(1),
  in codeset VARCHAR(128)
)
language java parameter style java reads sql data
external name 'ExportWrapper.export';

-- ruth lacks privilege to export the table
call syscs_util.syscs_export_table( null, 'T', 'z.dat', null, null, null );

-- but ruth can bypass authorization checks by directly calling Export.exportTable()
-- inside this procedure
call exportWrapper( null, 'T', 'z.dat', null, null, null ); 
{noformat}

",Major,Richard N. Hillegas,,2014-07-02T15:44:20.000+0000,Applications can bypass the authorization checks on SYSCS_EXPORT_TABLE and SYSCS_IMPORT_TABLE by calling Export.exportTable() and Import.importTable() directly,Closed,bug,Bug
2014-07-10T12:19:11.000+0000,DERBY-6652,Fixed,"Mamta found the following problem when using a view as the source data set of a MERGE statement:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

CREATE TABLE employee (
employee_id int,
first_name  VARCHAR(20),
last_name   VARCHAR(20),
dept_no     int,
salary      int);

create view v1employee as select * from employee;

CREATE TABLE bonuses (
employee_id int, bonus int DEFAULT 100);

create view v2bonuses as select * from bonuses;

-- compiles without the view
MERGE INTO bonuses B
USING employee E
ON B.employee_id = E.employee_id
WHEN MATCHED AND E.dept_no=20 THEN
  UPDATE SET B.bonus = E.salary * 0.1
WHEN NOT MATCHED AND dept_no=20 THEN
  INSERT (employee_id, bonus)
  VALUES (E.employee_id, E.salary * 0.05);

-- compilation error with the view
MERGE INTO bonuses B
USING v1employee E
ON B.employee_id = E.employee_id
WHEN MATCHED AND E.dept_no=20 THEN
  UPDATE SET B.bonus = E.salary * 0.1
WHEN NOT MATCHED AND dept_no=20 THEN
  INSERT (employee_id, bonus)
  VALUES (E.employee_id, E.salary * 0.05);
{noformat}
",Major,None,,2014-07-09T12:38:07.000+0000,Compilation error using a view as the source data set for a MERGE statement,Closed,bug,Bug
2014-07-10T14:09:39.000+0000,DERBY-6649,Fixed,"The server.policy and template.policy files grant the following meaningless permissions in every block related to sysinfo:

  permission java.io.FilePermission ""java.runtime.version"", ""read"";
  permission java.io.FilePermission ""java.fullversion"", ""read"";
",Major,Camilla Haase,,2014-07-07T13:06:38.000+0000,Meaningless permissions granted to sysinfo.,Closed,bug,Bug
2014-07-11T13:46:04.000+0000,DERBY-6653,Fixed,"The Tuning Guide topic ""Create useful indexes"" (http://db.apache.org/derby/docs/10.10/tuning/ctundepth1002853.html) has the following excessively vague note at the end:

""Note: Derby does not support indexing on columns with data types like BLOB, CLOB, and XML.""

The topic also has a cross-reference to the ""CREATE INDEX statement"" topic in the Derby Reference Manual, but that topic says nothing about data type limitations for index columns. 

In an email exchange, Knut says that LONG VARCHAR and user-defined types should be added to make the list complete, but he also suggests moving this information from the tuning guide to the ""CREATE INDEX statement"" topic in the Reference Manual, since we already reference that topic and since the information needs to be there.",Minor,Camilla Haase,,2014-07-09T13:47:38.000+0000,Data type limitations on indexes should be in Reference Manual,Closed,bug,Bug
2013-04-18T09:29:47.000+0000,DERBY-6184,Fixed,I see some FindBugs warnings in impl.store.raw.xact.GlobalXactId and iapi.store.access.xa.XAXactId about internal arrays being exposed through public methods. We should silence the warnings by making the methods non-public or by exposing copies of the arrays instead.,Minor,Knut Anders Hatlen,,2013-04-16T07:40:09.000+0000,Clean up warnings in XA transaction id classes,Closed,bug,Bug
2013-04-18T14:52:43.000+0000,DERBY-6182,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-15T18:12:50.000+0000,Cleanup suspect coding practices in org.apache.derby.iapi.error package,Closed,bug,Bug
2013-04-19T14:59:34.000+0000,DERBY-6177,Fixed,Cleanup suspect coding practices such as accessor methods returning mutable objects which can be corrupted by callers.,Minor,Richard N. Hillegas,,2013-04-12T14:49:09.000+0000,Cleanup suspect coding practices in org.apache.derby.catalog.types,Closed,bug,Bug
2014-09-05T09:11:30.000+0000,DERBY-6724,Fixed,"If an insert statement that has fired a trigger, is needs recompilation during execution, it fails with a NullPointerException in InternalTriggerExecutionContext.cleanup():

{noformat}
java.lang.NullPointerException
	at org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.cleanup(InternalTriggerExecutionContext.java:236)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.cleanup(TriggerEventActivator.java:291)
	at org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp(InsertResultSet.java:2199)
	at org.apache.derby.impl.sql.conn.GenericStatementContext.cleanupOnError(GenericStatementContext.java:543)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:476)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1337)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1394)
{noformat}",Major,Knut Anders Hatlen,,2014-09-02T12:23:27.000+0000,NPE if insert statement needs recompilation after having fired a trigger,Closed,bug,Bug
2014-09-04T11:54:13.000+0000,DERBY-6720,Fixed,The new derbyoptionaltools.jar is not published to the maven repositories along with the other Derby jar files.,Major,None,,2014-08-27T18:27:51.000+0000,Add derbyoptionaltools.jar to the maven artifacts we publish,Closed,bug,Bug
2014-06-05T22:01:04.000+0000,DERBY-6576,Fixed,"Similar to the issue in DERBY-6559, except here we modify the key in the referenced table. This leads Derby to check for any referencing FK and throw, even if there are other (formerly) duplicate rows that satisfy the FK constraint.

",Major,Dag H. Wanvik,,2014-05-13T18:54:56.000+0000,A immediate Fk constraint blows up iff its referenced PK is deferred and we modify a duplicate key column,Closed,bug,Bug
2012-06-25T23:03:11.000+0000,DERBY-5816,Fixed,"store.ServicePropertiesFileTest fails on z/OS with two failures below. Looks like likely test encoding issue 

1) testSevicePropertiesFileWithBackup(org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest)junit.
framework.AssertionFailedError
        at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.assertEOFToken(ServicePropertiesF
ileTest.java:275)
        at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.testSevicePropertiesFileWithBacku
p(ServicePropertiesFileTest.java:178)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testSevicePropertiesFileCorruptedWithBackup(org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTe
st)junit.framework.ComparisonFailure: expected:<[#--- last line, don't put anything after this line ---]> but was:<[{```
@    @    k@   } @   @        @     @    @    @```§]>
        at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.removeEOFToken(ServicePropertiesF
ileTest.java:301)
        at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.testSevicePropertiesFileCorrupted
WithBackup(ServicePropertiesFileTest.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)

FAILURES!!!
Tests run: 290,  Failures: 2,  Errors: 0",Major,Katherine Marsden,,2012-06-13T20:12:35.000+0000,store.ServicePropertiesFileTest fails on z/OS,Closed,bug,Bug
2012-02-22T22:31:15.000+0000,DERBY-5580,Fixed,"Multiple errors during teardown while trying to delete files/directories of the test databases on vista against sun jdk16 on vista, but passed against same jvm on sun nightly runs againstlinux and solaris.

As of time of this report the tests against other sun jvms had not finished.  Errors were also seen in ibm nightly runs, I'll rerport those in following comments.

The following checkin that was included in the reported test failures changed the Native authentication tests, so seems likely to have caused the issues:
r1233377 | rhillegas | 2012-01-19 14:51:13 +0100 (Thu, 19 Jan 2012) | 1 line
First version of NATIVE authentication service, including first tranche of tests for it.

vista run had 6 errors:
http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/vista/1233467-suitesAll_diff.txt
1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$6.tearDown(TestConfiguration.java:828)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
3) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
4) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26 (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$6.tearDown(TestConfiguration.java:828)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
5) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27 (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
6) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28 (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)


vista 64 bit run had 6 errors also:
http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/vista-64/1233467-suitesAll_diff.txt
1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1d (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$6.tearDown(TestConfiguration.java:828)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1e (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
3) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse1f (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
4) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse26 (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$6.tearDown(TestConfiguration.java:828)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
5) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse27 (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
6) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28): C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\db.lck (isDir=false, canRead=true, canWrite=true, size=38), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\log\log1.dat (isDir=false, canRead=true, canWrite=true, size=1048576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\log (isDir=true, canRead=true, canWrite=true, size=0), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c10.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c101.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c111.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c121.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c130.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c141.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c150.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c161.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c171.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c180.dat (isDir=false, canRead=true, canWrite=true, size=36864), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c191.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1a1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1b1.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1e0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c1f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c20.dat (isDir=false, canRead=true, canWrite=true, size=28672), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c200.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c211.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c221.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c230.dat (isDir=false, canRead=true, canWrite=true, size=114688), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c241.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c251.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c260.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c271.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c281.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c290.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2c1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2d0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c2f0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c300.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c31.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c311.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c321.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c331.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c340.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c351.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c361.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c371.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c380.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c391.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3a1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3b1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3c0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3d1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3e1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c3f1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c400.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c41.dat (isDir=false, canRead=true, canWrite=true, size=16384), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c411.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c421.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c430.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c441.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c451.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c461.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c470.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c481.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c51.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c60.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c71.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c81.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\c90.dat (isDir=false, canRead=true, canWrite=true, size=20480), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\ca1.dat (isDir=false, canRead=true, canWrite=true, size=24576), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cb1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cc0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cd1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\ce1.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0\cf0.dat (isDir=false, canRead=true, canWrite=true, size=8192), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28\seg0 (isDir=true, canRead=true, canWrite=true, size=12288), C:\cludev\jagtmp\autoderbyN_regression\suitesAll_7\log\system\singleUse\oneuse28 (isDir=true, canRead=true, canWrite=true, size=0)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92)
	at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)


",Major,Knut Anders Hatlen,,2012-01-20T20:21:21.000+0000,NativeAuthenticationServiceTest getting multiple errors trying to delete files/directories during teardown,Closed,bug,Bug
2012-04-06T17:34:38.000+0000,DERBY-5596,Fixed,"Derby accepts nanosecond fractions. e,g.

create table t(i timestamp);
insert into t values TIMESTAMP('1962-09-23 03:23:34.123456789');

but the refman doc states:

> Derby supports the following formats for TIMESTAMP:
>
> yyyy-mm-dd hh:mm:ss[.nnnnnn]
> yyyy-mm-dd-hh.mm.ss[.nnnnnn]
>
> The first of the two formats above is the java.sql.Timestamp format.
>
>The year must always have four digits. Months, days, and hours may have one or two digits. Minutes and seconds must have two digits. 
>Nanoseconds, if present, may have between one and six digits.

Nine digits are accepted, not six:

select * from t;
I                            
-----------------------------
1962-09-23 03:23:34.123456789
",Major,Camilla Haase,,2012-02-02T03:36:31.000+0000,TIMESTAMP doc gives wrong precision limitation,Closed,bug,Bug
2012-02-14T22:43:26.000+0000,DERBY-5574,Fixed,"encryption tests in nightly are intermittently failing.  The suite runs same set of tests with a number of different
encryption algorithms.  Different ones of these runs sometimes fail.  

What has changed on this nightly platform is that we are now running each jvm set of tests concurrently to
get better throughput.  This has changed load on machine and timing of operations.  Each JVM puts results
into a different part of file system.  

At least after the fact the file being renamed still exists and the destination file does not exist.

nightly test failure, jdk16, current 10.7 branch, windows.

http://people.apache.org/~myrnavl/derby_test_results/v10_7/windows/testlog/ibm16/1231439-derbyall_diff.txt

Failure Details:
********* Diff file derbyall/derbynetclientmats/DerbyNetClient/encodingTests/TestEnc.diff
*** Start: TestEnc jdk1.6.0 DerbyNetClient derbynetclientmats:encodingTests 2012-01-14 01:42:10 ***
derbyTesting.encoding can only be used with jdk15, skipping test
*** End:   TestEnc jdk1.6.0 DerbyNetClient derbynetclientmats:encodingTests 2012-01-14 01:42:10 ***
********* Diff file derbyall/encryptionAll/encryptionAES/encryptDatabase.diff
*** Start: encryptDatabase jdk1.6.0 encryptionAll:encryptionAES 2012-01-14 01:51:40 ***
74 del
< 0 rows inserted/updated/deleted
74a74,76
> ERROR 38000: The exception 'org.apache.derby.iapi.error.PassThroughException: encryptionAll:encryptionAES 'F:\jartest\JarResults.2012-01-13\ibm16_derbyall\derbyall\encryptionAll\encryptionAES\encryptDatabase\wombat\service.properties' to 'F:\jartest\JarResults.2012-01-13\ibm16_derbyall\derbyall\encryptionAll\encryptionAES\encryptDatabase\wombat\service.propertiesold'' was thrown while evaluating an expression.
> ERROR XJ001: Java exception: 'ERROR XBM0S: Unable to rename file 'F:\jartest\JarResults.2012-01-13\ibm16_derbyall\derbyall\encryptionAll\encryptionAES\encryptDatabase\wombat\service.properties' to 'F:\jartest\JarResults.2012-01-13\ibm16_derbyall\derbyall\encryptionAll\encryptionAES\encryptDatabase\wombat\service.propertiesold': org.apache.derby.iapi.error.PassThroughException'.
> ERROR XBM0S: Unable to rename file 'F:\jartest\JarResults.2012-01-13\ibm16_derbyall\derbyall\encryptionAll\encryptionAES\encryptDatabase\wombat\service.properties' to 'F:\jartest\JarResults.2012-01-13\ibm16_derbyall\derbyall\encryptionAll\encryptionAES\encryptDatabase\wombat\service.propertiesold'
94,95d95
< ERROR XJ040: Failed to start database 'wombat' with class loader XXXX,  see the next exception for details.
< ERROR XBM06: Startup failed. An encrypted database cannot be accessed without the correct boot password.  
97 del
< ij> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('bootPassword');
97a97
> ij(CONNECTION1)> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('bootPassword');
101 del
< ij> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('encryptedBootPassword');
101a101
> ij(CONNECTION1)> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('encryptedBootPassword');
105 del
< ij> -- change it again, make sure it trims white spaces
105a105
> ij(CONNECTION1)> -- change it again, make sure it trims white spaces
107 del
< 0 rows inserted/updated/deleted
108 del
< ij> call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('bootPassword', 'bbderbypwdx, derbypwdxx ');
109 del
< 0 rows inserted/updated/deleted
110 del
< ij> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('bootPassword');
110a107,110
> ERROR XBCXA: Wrong boot password.
> ij(CONNECTION1)> call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('bootPassword', 'bbderbypwdx, derbypwdxx ');
> ERROR XBCXA: Wrong boot password.
> ij(CONNECTION1)> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('bootPassword');
114 del
< ij> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('encryptedBootPassword');
114a114
> ij(CONNECTION1)> values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('encryptedBootPassword');
118 del
< ij> disconnect;
118a118
> ij(CONNECTION1)> disconnect;
124a125,126
> ERROR XJ040: Failed to start database 'wombat' with class loader XXXX,  see the next exception for details.
> ERROR XBM06: Startup failed. An encrypted database cannot be accessed without the correct boot password.  
126 del
< A                   
127 del
< --------------------
128 del
< hello world         
128a128
> IJ ERROR: Unable to establish connection
132 del
< ERROR XBCXD: The encryption algorithm cannot be changed after the database is created.
132a132
> IJ ERROR: Unable to establish connection
134 del
< ERROR XBCXE: The encryption provider cannot be changed after the database is created.
134a134
> IJ ERROR: Unable to establish connection
Test Failed.
*** End:   encryptDatabase jdk1.6.0 encryptionAll:encryptionAES 2012-01-14 01:51:49 ***
------------------------------------------------------
",Major,Mike Matrigali,,2012-01-19T00:00:31.000+0000,encryption test in encryption nightly suite test fails with ERROR XBM0S: Unable to rename file error,Closed,bug,Bug
2012-03-06T16:01:13.000+0000,DERBY-5586,Fixed,"Due to licensing issues, we should remove this script from the Derby repository and we should no longer use this script to generate monohtml output. The licensing issues are discussed on this derby-dev email thread: http://old.nabble.com/Copyright-clairification-for-fo2html.xsl-in-Derby-software.-to33087407.html#a33087407",Major,Knut Anders Hatlen,,2012-01-25T18:02:17.000+0000,Remove the fo2html.xsl script from the docs repository and fix the docs and release builds so that they don't build monohtml versions of the Derby manuals.,Closed,bug,Bug
2012-04-20T13:09:10.000+0000,DERBY-5587,Fixed,The monohtml versions of Derby's docs (from 10.3 onwards) need a legal notice. We should either add that notice to the monohtml docs or we should remove them from the Derby website. This issue is discussed in the following derby-dev email thread: http://old.nabble.com/Copyright-clairification-for-fo2html.xsl-in-Derby-software.-to33087407.html#a33087407,Major,Kristian Waagan,,2012-01-25T19:06:55.000+0000,"Due to licensing issues, fix or remove the monohtml docs posted on Derby's documentation page.",Closed,bug,Bug
2012-02-28T19:06:14.000+0000,DERBY-5552,Fixed,"The issue arrives when multiple XA transactions are done in parallel and there is either a lock timeout or a lock deadlock detected.  When this happens the connection is leaked in the Glassfish connection pool and the client thread hangs in ""org.apache.derby.client.netReply.fill(Reply.java:172)"".  

Shutting down the app server fails because the thread has a lock in ""org.apache.derby.client.net.NetConnection40"" and another task is calling ""org.apache.derby.client.ClientPooledConnection.close(ClientPooledConnection.java:214)"" which is waiting for the lock.

Killing the appsever using ""kill"" and then attempting to shutdown Derby network server causes the Network Server to hang.  One of the threads hangs waiting for a lock at ""org.apache.derby.impl.drda.NeworkServerControlImpl.removeFromSessionTable(NetworkServerControlImpl.java:1525)"" and the ""main"" thread has this locked at ""org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2242)"" and it itself is waiting for a lock which belongs to a thread that is stuck at ""org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(ActiveLock.java:118) which is in the TIMED_WAITING state.

Only by killing the Network Server using ""kill"" is possible at this point.

There are transactions left even though all clients have been removed.  

",Blocker,Brett Wooldridge,,2011-12-22T15:54:55.000+0000,Derby threads hanging when using ClientXADataSource and a deadlock or lock timeout occurs,Closed,bug,Bug
2012-02-22T06:07:30.000+0000,DERBY-5584,Fixed,"Steps to reproduce:

1. Create database, connect to database with any JDBC client

2. create two tables:

CREATE TABLE TEST_5 (
       profile_id INTEGER NOT NULL,
       group_ref INTEGER NOT NULL,
       matched_count INTEGER NOT NULL
   );


   CREATE TABLE TEST_6 (
       profile_id INTEGER NOT NULL,
       group_ref INTEGER NOT NULL,
       matched_count INTEGER NOT NULL
   );

3. Insert two records for each table:

insert into test_5 values (1, 10000,1);
insert into test_5 values (2, 10000, 2);

insert into test_6 values (1, 10000,1);
insert into test_6 values (2, 10000, 2);

4. Run following statement

SELECT *
FROM
 (SELECT ps1.group_ref,
   COUNT(DISTINCT ps1.matched_count) AS matched_count
 FROM test_5 ps1
 GROUP BY ps1.group_ref,
   ps1.profile_id
 ) a,
 (SELECT ps2.group_ref,
   COUNT( DISTINCT ps2.matched_count) AS matched_count
 FROM test_6 ps2
 GROUP BY ps2.group_ref,
   ps2.profile_id
 ) b


As a result I've got 3 records instead of 4 - at least Oracle 10g
returns 4 records for this statement. Maybe i'm doing something wrong.
Do you have any suggestions / possible workarounds for this problem",Major,Bryan Pendleton,,2012-01-23T13:44:10.000+0000,Select statement with subqueries with group by and count distinct statements returns wrong number of results,Closed,bug,Bug
2012-02-10T17:33:11.000+0000,DERBY-5582,Fixed,"I user reported this exception with 10.8.2.3 - (1212722) when running regression tests against 10.8.
As soon as the Index Statistics Thread was initialized they got the stack trace below.

There was some discussion of this issue on the dev list:
http://old.nabble.com/Report-of-security-manager-issue-with-10.8-and-ndexStatisticsDaemonImpl.schedule-to33137398.html

I assume the failure is in 
  runningThread = new Thread(this, ""index-stat-thread"");


Stack Trace:

java.security.AccessControlException: Access denied
(java.lang.RuntimePermission modifyThreadGroup)
          at
java.security.AccessController.checkPermission(AccessController.java:108)
          at
java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
          at
com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:208)
          at
com.ibm.ws.security.core.SecurityManager.checkAccess(SecurityManager.java:407)
          at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:226)
          at java.lang.Thread.initialize(Thread.java:345)
          at java.lang.Thread.<init>(Thread.java:281)
          at java.lang.Thread.<init>(Thread.java:179)
          at
org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.schedule(Unknown
Source)
          at
org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
          at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown
Source)
          at
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown
Source)
          at
org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)
          at
org.apache.derby.impl.jdbc.EmbedPreparedStatement20.<init>(Unknown Source)
          at
org.apache.derby.impl.jdbc.EmbedPreparedStatement30.<init>(Unknown Source)
          at
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.<init>(Unknown Source)
          at
org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source)
          at
org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
          at
org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
          at

",Major,Katherine Marsden,,2012-01-21T00:18:04.000+0000, Access denied (java.lang.RuntimePermission modifyThreadGroup) in IndexStatisticsDaemonImpl.schedule(),Closed,bug,Bug
2011-11-11T17:53:59.000+0000,DERBY-5498,Fixed,"AuthenticationTest failed with this error on trunk (intermittent error, passed when I reran suites.All):

java.sql.SQLException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ040, SQLERRMC: Failed to start database 'singleUse/oneuse2c' with class loader sun.misc.Launcher$AppClassLoader@1ff5ea7, see the next exception for details.::SQLSTATE: XJ001Java exception: 'ASSERT FAILED Unable to Acquire Exclusive Lock on /export/home/hudsond/.hudson/jobs/Derby-JUnit/workspace/test/system/singleUse/oneuse2c/dbex.lck: org.apache.derby.shared.common.sanity.AssertFailure'.::SQLSTATE: XJ001Java exception: ': java.nio.channels.ClosedByInterruptException'.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:99)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1574)
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)
	at org.apache.derbyTesting.junit.DatabasePropertyTestSetup.tearDown(DatabasePropertyTestSetup.java:280)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:24)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ040, SQLERRMC: Failed to start database 'singleUse/oneuse2c' with class loader sun.misc.Launcher$AppClassLoader@1ff5ea7, see the next exception for details.::SQLSTATE: XJ001Java exception: 'ASSERT FAILED Unable to Acquire Exclusive Lock on /export/home/hudsond/.hudson/jobs/Derby-JUnit/workspace/test/system/singleUse/oneuse2c/dbex.lck: org.apache.derby.shared.common.sanity.AssertFailure'.::SQLSTATE: XJ001Java exception: ': java.nio.channels.ClosedByInterruptException'.
	at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125)
	at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538)
	at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431)
	at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294)
	at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121)
	at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826)
	at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762)
	at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591)
	at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406)
	at org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:220)
	at org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:74)
	at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269)
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157)

The server side log was not preserved because the failure happened inside a decorator.",Major,Dag H. Wanvik,,2011-11-09T13:05:45.000+0000,ClosedByInterruptException in AuthenticationTest,Closed,bug,Bug
2011-11-21T19:57:11.000+0000,DERBY-5509,Fixed,"The javadoc for the NetServlet and NetworkServerControl classes are missing a few closing </LI> and </P> tags.
Html-checking software (for instance for accessibility checks) will stumble over this (if it's smart enough).

It would be good to fix this for 10.8 and trunk.",Trivial,Myrna van Lunteren,,2011-11-20T05:51:03.000+0000,javadoc for NetServlet and NetworkServerControl are missing a few closing tags,Closed,bug,Bug
2012-08-13T09:54:43.000+0000,DERBY-5897,Fixed,"Some of the code handling paths in compatibility/VersionCombinationConfigurator is broken.
The issue is that the location of a given class is given as a URL. This means the path will be URL encoded, and, for instance, spaces will be encoded as '%20'.

This bug typically shows itself as an NPE when invoking compatibility._Suite.",Minor,Kristian Waagan,,2012-08-09T07:39:57.000+0000,Broken handling of paths with special characters in compatibility/VersionCombinationConfigurator,Closed,bug,Bug
2012-08-13T18:38:58.000+0000,DERBY-5900,Fixed,"The Reference Guide section on SYS.SYSPERMS says that the OBJECTTYPE column can take the following values:

'SEQUENCE' and 'USER-DEFINED TYPE'

This is not correct. The legal values are:

'SEQUENCE' and 'TYPE'",Major,Camilla Haase,,2012-08-13T12:43:16.000+0000,Need to correct Reference Guide description of contents of SYS.SYSPERMS.OBJECTTYPE,Closed,bug,Bug
2012-01-23T20:31:23.000+0000,DERBY-5564,Fixed,"I see a problem in the code handling lock timeout exceptions.  In the code in various places there are calls such as:

            // 2 kinds of errors here expected here.  Either container not 
            // found or could not obtain lock (LOCK_TIMEOUT or DEADLOCK).
            //
            // It is possible by the time this post commit work gets scheduled 
            // that the container has been dropped and that the open container 
            // call will return null - in this case just return assuming no 
            // work to be done.

                                                if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT) ||
                                                                se.getMessageId().equals(SQLState.DEADLOCK))


Or  


        // First try to do the work in the nested transaction. Fail if we can't
        // get a lock immediately.
        if ( nestedTransaction != null )
        {
            try {
                return updateCurrentValueOnDisk( nestedTransaction, oldValue, newValue, false );
            }
            catch (StandardException se)
            {
                if ( !se.getMessageId().equals( SQLState.LOCK_TIMEOUT ) ) { throw se; }
            }


Or

            // exception might have occured either container got dropper or lock not granted.
            // It is possible by the time this post commit work gets scheduled 
            // that the container has been dropped and that the open container 
            // call will return null - in this case just return assuming no 
            // work to be done.

                                                //If this expcetion is because lock could not be obtained , work is requeued.
                                                if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT) || 
                                                                se.getMessageId().equals(SQLState.DEADLOCK))
                                                {
                                                                requeue_work = true;
                                                }

The problem that I see is that if the property ""derby.locks.deadlockTrace=true"" is set, then instead of a SQLState.LOCK_TIMEOUT, the code will see a SQLState.LOCK_TIMEOUT_LOG.  Note that this is not being checked for in the above tests and others as well, so now the code behavior is going to change basd on whether the lock tracing is enabled or not.    

I think that 99% of the code that is testing for SQLState.LOCK_TIMEOUT should also be checking for SQLState.LOCK_TIMEOUT_LOG as well.    I only see one place in DDLConstantAction where it is explicitly mentioned that SQLState.LOCK_TIMEOUT_LOG is not being looked at.
",Major,Mike Matrigali,,2012-01-03T14:40:11.000+0000,Code does different things depending if derby.locks.deadlockTrace=true is set,Closed,bug,Bug
2012-11-29T14:12:02.000+0000,DERBY-6001,Fixed,"I occasionally see this test failure on some ARM devices:

junit.framework.AssertionFailedError: Only one of the waiters should be aborted
	at org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.testDeadlockTimeout(ErrorMessageTest.java:206)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

It's probably timing-dependent, since the failing test case runs two threads, and the devices where it's seen are slow compared to most other test servers.",Major,Knut Anders Hatlen,,2012-11-21T10:06:57.000+0000,ErrorMessageTest assert failure: Only one of the waiters should be aborted,Closed,bug,Bug
2012-12-07T20:28:50.000+0000,DERBY-6002,Fixed,"http://db.apache.org/derby/docs/dev/ref/rrefattrib56769.html

First it says: ""When creating or upgrading a database, use this attribute to associate a non-default territory with the database.""

Later it says: ""The territory attribute is used only when creating a database.""

I believe the latter is correct, and we should drop ""or upgrading"" from the first sentence.",Minor,Camilla Haase,,2012-11-21T14:10:45.000+0000,Reference manual is unclear on when territory can be set,Closed,bug,Bug
2013-01-29T13:40:36.000+0000,DERBY-6058,Fixed,"Since the build of 1433263 on trunk, we see the following test failures:

1) noSpecialCollation(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: The class 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines' does not exist or is inaccessible. This can happen if the class is not public.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)
	at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(BaseJDBCTestCase.java:217)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2579)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2568)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.derby_6040(TableFunctionTest.java:2370)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.miscBugs(TableFunctionTest.java:1936)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:1005)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.noSpecialCollation(TableFunctionTest.java:971)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
Caused by: java.sql.SQLException: Java exception: 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6: java.lang.ClassNotFoundException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	... 37 more
Caused by: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.iapi.services.loader.ClassInspector.getClass(Unknown Source)
	at org.apache.derby.iapi.services.loader.ClassInspector.accessible(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(Unknown Source)
	at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(Unknown Source)
	at org.apache.derby.impl.sql.compile.FromList.bindTables(Unknown Source)
	at org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source)
	at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 33 more
2) specialCollation(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: The class 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines' does not exist or is inaccessible. This can happen if the class is not public.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)
	at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(BaseJDBCTestCase.java:217)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2579)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2568)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.derby_6040(TableFunctionTest.java:2370)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.miscBugs(TableFunctionTest.java:1936)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:1005)
	at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.specialCollation(TableFunctionTest.java:981)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Java exception: 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6: java.lang.ClassNotFoundException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	... 52 more
Caused by: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.iapi.services.loader.ClassInspector.getClass(Unknown Source)
	at org.apache.derby.iapi.services.loader.ClassInspector.accessible(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(Unknown Source)
	at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(Unknown Source)
	at org.apache.derby.impl.sql.compile.FromList.bindTables(Unknown Source)
	at org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source)
	at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 48 more

Things were fine with build 1432788.
Things are also fine with ibm 1.5, 1.6, 1.7.

See also: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-1433263.html
",Major,Richard N. Hillegas,,2013-01-28T22:57:49.000+0000,2 ClassNotFoundException failures on trunk with ibm's weme6.2 since build 1433263,Closed,bug,Bug
2012-05-18T16:14:45.000+0000,DERBY-5769,Fixed,"In reviewing a DERBY-5767 patch, Rick Hillegas noticed that in the derby.authentication.provider topic, ""In the second, longer paragraph of the BUILTIN bullet, we recommend LDAP and user-supplied schemes as alternatives to BUILTIN, but we don't recommend NATIVE. Did we decide to not recommend NATIVE here or should this be adjusted to include it beside the other safe schemes? Thanks.""

In several topics, the notes were not modified to recommend NATIVE authentication the same way they were elsewhere: ""It is strongly recommended that production systems rely on NATIVE authentication, an external directory service such as LDAP, or a user-defined class for authentication."" These notes need to be tidied up.",Major,Camilla Haase,,2012-05-17T20:11:36.000+0000,Notes deprecating BUILTIN authentication need fixing,Closed,bug,Bug
2012-05-17T21:02:21.000+0000,DERBY-5767,Fixed,"The bullet items in the Developer's Guide and Reference Manual that show ""NATIVE::LOCAL"" as a valid setting for derby.authentication.provider, but that then tell users that it should not be explicitly specified, should be removed. ",Major,Camilla Haase,,2012-05-16T20:24:53.000+0000,Remove mentions of NATIVE::LOCAL authentication provider setting,Closed,bug,Bug
2013-12-04T18:10:02.000+0000,DERBY-6415,Fixed,"It would be good if the sample query for SYSCS_DIAG.SPACE_TABLE  also showed the schema name as that will be required by SYSCS_UTIL.SYSCS_COMPRESS_TABLE  if the tables are compressed.

The doc page as at:
http://db.apache.org/derby/docs/10.10/ref/rrefsyscsdiagspacetable.html


The query for all tables and indexes could be:

SELECT sysschemas.schemaname,  T2.*
    FROM
        SYS.SYSTABLES systabs, SYS.SYSSCHEMAS sysschemas,
        TABLE (SYSCS_DIAG.SPACE_TABLE()) AS T2
    WHERE systabs.tabletype = 'T'
    AND sysschemas.schemaid = systabs.schemaid
    AND systabs.tableid = T2.tableid;",Trivial,Camilla Haase,,2013-11-12T18:48:44.000+0000,SYSCS_DIAG.SPACE_TABLE sample query to show all tables and indexes should include schema,Closed,bug,Bug
2012-03-09T08:44:45.000+0000,DERBY-5603,Fixed,"In EmbedConnection.clearLOBMapping()  the code which iterates over lobFiles has a finally block which clears the Set.  This causes a ConcurrentModificationException to be thrown and even using a concurrent data structure would still result in only one LOBFile being correctly closed.

This will occur anytime the lobFiles Set contains more than 1 LOBFile.

Stack Trace:
java.sql.SQLException: Java exception: ': java.util.ConcurrentModificationException'. 
 at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) 
 at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) 
 at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) 
 at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) 
 at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) 
 at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) 
 at org.apache.derby.impl.jdbc.EmbedConnection.commit(Unknown Source) 
<lines removed>
Caused by: java.sql.SQLException: Java exception: ': java.util.ConcurrentModificationException'. 
 at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) 
 at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) 
 ... 16 more 
Caused by: java.util.ConcurrentModificationException 
 at java.util.HashMap$HashIterator.nextEntry(Unknown Source) 
 at java.util.HashMap$KeyIterator.next(Unknown Source) 
 at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(Unknown Source) 
 ... 10 more",Critical,Kristian Waagan,,2012-02-04T18:26:51.000+0000,EmbedConnection.clearLOBMapping() incorrectly clears lobFiles causing a ConcurrentModificationException,Closed,bug,Bug
2012-04-18T14:06:18.000+0000,DERBY-5612,Fixed,"The ""Accessing databases from the classpath"" section of the Derby Developer's Guide says that you can access a database on the classpath by putting a forward slash in front of the database name (and then adding other path legs as needed). I don't find that it works this way. I ran the following experiment:

1) I put a database called nast in the testRun/extin subdirectory of the current directory.

2) Then I put testRun/extin on the classpath.

3) Then I tried connecting to the database with various URLs.

The following URLs could not find the database:

connect 'jdbc:derby:/nast;user=KIWI;password=KIWI_password';
connect 'jdbc:derby:nast;user=KIWI;password=KIWI_password';
connect 'jdbc:derby:classpath:/nast;user=KIWI;password=KIWI_password';

But the following URL found the database:

connect 'jdbc:derby:classpath:nast;user=KIWI;password=KIWI_password';

This is not what I expected from the documentation in the Developer's Guide.",Major,Camilla Haase,,2012-02-13T18:50:03.000+0000,Puzzling documentation about the URL to a database on the classpath,Closed,bug,Bug
2012-04-02T18:45:00.000+0000,DERBY-5624,Fixed,"The system currently recursively calls xact.notifyObservers() from DropOnCommit.update().  It does this because in some cases
new observers can be added while processing the list of notifyObservers and those were being missed before the change, causing
Assertions in the tests and possibly files not properly dropped on commit.

Multiple users on the Derby user list have had failures running SYSCS_UTIL.SYSCS_COMPRESS_TABLE(), running out of stack track
with a heavily recursive stack trace of the form (see more detail from these reports in subsequent comments):
Caused by: java.lang.StackOverflowError
at java.lang.ThreadLocal.get(ThreadLocal.java:125)
at java.lang.StringCoding.deref(StringCoding.java:46)
at java.lang.StringCoding.encode(StringCoding.java:258)
at java.lang.String.getBytes(String.java:946)
at java.io.UnixFileSystem.getBooleanAttributes0(Native Method)
at java.io.UnixFileSystem.getBooleanAttributes(UnixFileSystem.java:228)
at java.io.File.exists(File.java:733)
at org.apache.derby.impl.store.raw.data.StreamFileContainer.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.derby.impl.store.raw.data.StreamFileContainer.privExists(Unknown Source)
at org.apache.derby.impl.store.raw.data.StreamFileContainer.open(Unknown Source)
at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openStreamContainer(Unknown Source)
at org.apache.derby.impl.store.raw.xact.Xact.openStreamContainer(Unknown Source)
at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropStreamContainer(Unknown Source)
at org.apache.derby.impl.store.raw.xact.Xact.dropStreamContainer(Unknown Source)
at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)
at java.util.Observable.notifyObservers(Observable.java:142)
at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)
at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)
at java.util.Observable.notifyObservers(Observable.java:142)
at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)
at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)
at java.util.Observable.notifyObservers(Observable.java:142)
at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)
at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)
at java.util.Observable.notifyObservers(Observable.java:142)",Major,Mike Matrigali,,2012-02-20T17:38:58.000+0000,System can run out of stack space while processing DropOnCommit requests.,Closed,bug,Bug
2012-04-17T14:02:57.000+0000,DERBY-5608,Fixed,"BaseTestCase.readProcessOutput() reads the streams from Process.getInputStream() and Process.getErrorStream() sequentially 
InputStream is = pr.getInputStream();
InputStream es = pr.getErrorStream();
...
 output += ""<STDOUT> "" + inputStreamToString(is) + ""<END STDOUT>\n"";
 output += ""<STDERR>"" + inputStreamToString(es) + ""<END STDERR>\n"";


I think that to be really correct the  two streams need to be read in separate threads because if the error output  is  large it could block and cause a hang  if they are read sequentially like this.

I noticed during the DERBY-5601 discussion as Myrna referenced in that  the addition of draining the error stream caused a different problem (an InterruptException). I don't understand how it could cause that problem but do think a hang blocking on  reading the input would be possible if the error output was large enough both  before and after the change to add the reading of the error stream sequentially.




",Minor,Kristian Waagan,,2012-02-08T19:55:33.000+0000,BaseTestCase.readProcessOutput should read getInputStream()  and getErrorStream() in separate threads,Closed,bug,Bug
2012-03-22T11:38:09.000+0000,DERBY-5643,Fixed,"We occasionally see hangs in the replication tests on Linux. For example here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/sles/1298470-suitesAll_diff.txt

This test run was stuck in tearDown() after ReplicationRun_Local_Derby4910.testSlaveWaitsForMaster(). (Waiting for Thread.join() to return.)",Major,Knut Anders Hatlen,,2012-03-09T08:37:45.000+0000,Occasional hangs in replication tests on Linux,Closed,bug,Bug
2012-04-20T16:55:05.000+0000,DERBY-5645,Fixed,"http://db.apache.org/derby/docs/dev/ref/rrefjdbc96386.html says

""Derby implements all of the methods for these interfaces except for the setBlob, getBlob, setClob, and getClob methods of the CallableStatement interface.""

Derby does implement all four methods, so that line should be removed.",Major,Camilla Haase,,2012-03-12T09:28:55.000+0000,Reference manual says setBlob()/setClob()/getBlob()/getClob() are not supported on CallableStatement,Closed,bug,Bug
2012-04-12T20:59:20.000+0000,DERBY-5653,Fixed,The NetServlet does not require credentials in order to bring the server up and down (or for any operations for that matter). See DERBY-5401. This lack of security makes the NetServlet unsuited for production use. We should document that NetServlet is only appropriate for testing purposes.,Major,Camilla Haase,,2012-03-14T16:25:57.000+0000,We should document that the NetServlet is a testing tool and not appropriate for production use.,Closed,bug,Bug
2014-08-06T01:37:51.000+0000,DERBY-6676,Fixed,"I see the following error printed to stderr during the nightly tests (nn):

{noformat}
stderr

-- Note: At least one unexpected error/warning message was
-- encountered during DDL generation.  See dblook.log
-- to review the message(s).
{noformat}
",Major,None,,2014-07-25T16:49:19.000+0000,dblook warning printed on std err during nightly test runs,Closed,bug,Bug
2014-07-30T23:57:15.000+0000,DERBY-6666,Fixed,"Run the following script with the {{derby.language.logQueryPlan}} system property set to {{true}}:

{code:sql}
connect 'jdbc:derby:memory:db;create=true';
create table t1(x int primary key);
create table t2(y int, constraint c check(y > 0) initially deferred, constraint fk foreign key(y) references t1 initially deferred);
autocommit off;
insert into t1 values -1, 1;
insert into t2 values 1;
update t2 set y = -1;
delete from t1 where x = -1;
commit;
{code}

The commit statement will fail with the following error message: ""ERROR 40XC0: Dead statement. This may be caused by catching a transaction severity error inside this statement.""

If you run the script without setting the {{derby.language.logQueryPlan}} system property, it will fail (correctly) with this error message: ""ERROR 23514: The transaction was aborted because of a deferred constraint violation: Check constraint identified by 'C' defined on ""APP"".""T2"" as '(y > 0)'.""",Major,Dag H. Wanvik,,2014-07-16T11:04:16.000+0000,"Deferred constraint validation fails with ""dead statement"" when query plan logging is enabled",Closed,bug,Bug
2014-07-30T21:54:48.000+0000,DERBY-6670,Fixed,"The bug is illustrated by the following code snippet:

{code}
        Connection c = DriverManager.getConnection(""jdbc:derby:memory:db;create=true"");
        c.setAutoCommit(false);
        Statement s = c.createStatement();
        s.execute(""create table t1(x int primary key initially deferred)"");
        s.execute(""insert into t1 values 1,1,1,1"");

        Savepoint sp = c.setSavepoint();
        s.execute(""drop table t1"");
        c.rollback(sp);

        // Since there are four identical rows in T1, this call should have
        // failed because the primary key was violated.
        c.commit();

        // Instead, it succeeds, and all four rows are committed, as can
        // be seen here:
        ResultSet rs = s.executeQuery(""select * from t1"");
        while (rs.next()) {
            System.out.println(rs.getInt(1));
        }

        // Insert yet another row, so that we have five identical rows ...
        s.execute(""insert into t1 values 1"");
        // ... and now commit complains ...
        c.commit();
{code}

With auto-commit off, add duplicates into a deferred primary key. Then set a savepoint, drop the table, and roll back to the savepoint.

Apparently, when you drop the table, information about any constraint violations seen on that table is lost, and that information is not restored when the drop table operation is undone by the rollback to savepoint.

So when you commit the transaction after having rolled back the drop operation, no deferred checking of constraints happens, and the duplicates you have inserted are committed.",Major,Dag H. Wanvik,,2014-07-17T16:38:55.000+0000,Rollback to savepoint allows violation of deferrable constraints,Closed,bug,Bug
2014-07-30T12:31:19.000+0000,DERBY-6665,Fixed,"See the following script:

{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t1(x int primary key);
0 rows inserted/updated/deleted
ij> create table t2(x int primary key);
0 rows inserted/updated/deleted
ij> create table t3(x int, constraint fk1 foreign key (x) references t1 initially deferred, constraint fk2 foreign key (x) references t2 initially deferred);
0 rows inserted/updated/deleted
ij> insert into t1 values 1;
1 row inserted/updated/deleted
ij> autocommit off;
ij> insert into t3 values 1;
1 row inserted/updated/deleted
ij> insert into t2 values 1;
1 row inserted/updated/deleted
ij> delete from t1;
1 row inserted/updated/deleted
ij> commit;
ij> select * from t1;
X          
-----------

0 rows selected
ij> select * from t2;
X          
-----------
1          

1 row selected
ij> select * from t3;
X          
-----------
1          

1 row selected
{noformat}

Since T3.X contains a value (1) that is not present in T1, the foreign key FK1 is violated, and the COMMIT statement should have failed.",Major,Dag H. Wanvik,,2014-07-15T22:42:46.000+0000,Violation of deferred constraints not detected when conglomerates are erroneously shared,Closed,bug,Bug
2012-01-13T18:02:22.000+0000,DERBY-5559,Fixed,"Since revision 1221569, on windows XP I see some failures in the nightly test like this:

1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs)junit.framework.AssertionFailedError
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.vetResetPassword(NativeAuthProcs.java:364)
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.resetPasswordTests(NativeAuthProcs.java:332)
	at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.testAll(NativeAuthProcs.java:189)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

See for instance: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1222901-suites.All_diff.txt
There might be an intermittent issue here, one of the runs lists only 7 failures. But mostly there's 8.
This does not occur on Linux with the same jvm versions.

The changes between this run and the previous one when these failures did not occur: 
================
SUBVERSION LOG FROM 1221076 TO 1221569:
------------------------------------------------------------------------
r1221456 | rhillegas | 2011-12-20 11:35:44 -0800 (Tue, 20 Dec 2011) | 1 line

DERBY-866: Add regression tests for GRANT/REVOKE on new procedures supporting NATIVE authentication.
------------------------------------------------------------------------
r1221434 | rhillegas | 2011-12-20 10:59:09 -0800 (Tue, 20 Dec 2011) | 1 line

DERBY-866: Adjust RolesTest to account for new tuple in SYSROUTINEPERMS.
------------------------------------------------------------------------
r1221423 | rhillegas | 2011-12-20 10:44:33 -0800 (Tue, 20 Dec 2011) | 1 line

DERBY-866: Add syscs_reset_password() and syscs_modify_password() system procedures.
================


derby.log in the failed directory only shows a start and shutdown.",Major,Mike Matrigali,,2011-12-27T19:23:13.000+0000,"AssertFailures (7, or 8) with ibm 1.6 and 1.5 on Windows XP in lang.NativeAuthProcs fixture testAll",Closed,bug,Bug
2012-01-13T08:22:44.000+0000,DERBY-5562,Fixed,"From the EmbedConnection.java comment for ""xa_prepare"".


					// On a prepare call, xa allows an optimization that if the
					// transaction is read only, the RM can just go ahead and
					// commit it.  So if store returns this read only status -
					// meaning store has taken the liberty to commit already - we
					// needs to turn around and call internalCommit (without
					// committing the store again) to make sure the state is
					// consistent.  Since the transaction is read only, there is
					// probably not much that needs to be done.

When XATransactionController.XA_RDONLY is returned, no ""commit"" or ""rollback"" will be received.  If a XA transaction timer was started (could be through the derby.jdbc.xaTransactionTimeout=xxx for example), then these transactions will not have their timer canceled and will later attempt to cancel the transaction and fail as the transaction no longer exists.

",Major,Knut Anders Hatlen,,2011-12-30T14:37:14.000+0000,An read-only XA transaction that has a timeout never has the timer canceled when the transaction is complete,Closed,bug,Bug
2014-07-03T18:19:46.000+0000,DERBY-6643,Fixed,"Knut Anders Hatlen points out in a comment on DERBY-6609 that the columnAlteration syntax in the ALTER TABLE statement topic is not quite correct. It is possible to set the data type to BLOB or CLOB, in addition to VARCHAR and VARCHAR FOR BIT DATA.

Also, for VARCHAR FOR BIT DATA, he notes, ""the length argument is on the wrong spot. It should be columnName SET DATA TYPE VARCHAR ( integer ) FOR BIT DATA,  rather than columnName SET DATA TYPE VARCHAR FOR BIT DATA( integer ).""

DERBY-6644 also requires a change to the columnAlteration syntax.
",Minor,Camilla Haase,,2014-07-01T12:51:42.000+0000,ALTER TABLE columnAlteration syntax needs fixing,Closed,bug,Bug
2013-10-30T20:02:40.000+0000,DERBY-6389,Fixed,"The admin guide has a chapter that describes known differences between the client driver and the embedded driver: http://db.apache.org/derby/docs/10.10/adminguide/cadminapps.html

Most of this information was added for the original network client implementation in 10.1 (DERBY-371) and has not been updated since.

For example, http://db.apache.org/derby/docs/10.10/adminguide/cadminappsclientdiffs.html says SQLStates for exceptions on the client may be null. I believe this was fixed in 10.2 as part of DERBY-254.

It also says that SQLExceptions (and SQLWarnings) won't be chained, but that was fixed in 10.3 (DERBY-2692). That outdated information is also repeated here: http://db.apache.org/derby/docs/10.10/adminguide/radminapps811974.html",Major,Camilla Haase,,2013-10-22T14:22:32.000+0000,Update adminguide's list of differences between client and embedded,Closed,bug,Bug
2013-10-01T09:08:49.000+0000,DERBY-6357,Fixed,"The reference manual's section on the DECLARE GLOBAL TEMPORARY TABLE statement says: Temporary tables cannot be referenced in a triggered-SQL-statement

It detects most cases and reports:

ERROR XCL51: The requested function can not reference tables in SESSION schema.

However, some references are not detected if they are in a subquery. For example:

ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> declare global temporary table temptable(x int) not logged;
0 rows inserted/updated/deleted
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create table t2(b boolean);
0 rows inserted/updated/deleted
ij> create trigger tr1 after insert on t1 insert into t2 values exists(select * from session.temptable);
0 rows inserted/updated/deleted

This CREATE TRIGGER statement should have raised an error.",Major,Knut Anders Hatlen,,2013-09-30T12:22:10.000+0000,CREATE TRIGGER doesn't detect all illegal references to SESSION schema,Closed,bug,Bug
2013-10-01T21:21:47.000+0000,DERBY-6356,Fixed,"Seeing more test failures because of an intentional security change in TimeZone.setDefault(). Therefore need to wrap Timezone.setDefault in a priv block in the test. 

5) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.security.AccessControlException: Access denied (""java.util.PropertyPermission"" ""user.timezone"" ""write"")
        at java.security.AccessController.throwACE(AccessController.java:100)
        at java.security.AccessController.checkPermission(AccessController.java:174)
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
        at java.util.TimeZone.hasPermission(TimeZone.java:756)
        at java.util.TimeZone.setDefault(TimeZone.java:778)
        at org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest.setUp(LocalizedDisplayScriptTest.java:140)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
and:
6) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.security.AccessControlException: Access denied (""java.util.PropertyPermission"" ""user.timezone"" ""write"")
        at java.security.AccessController.throwACE(AccessController.java:100)
        at java.security.AccessController.checkPermission(AccessController.java:174)
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
        at java.util.TimeZone.hasPermission(TimeZone.java:756)
        at java.util.TimeZone.setDefault(TimeZone.java:778)
        at org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest.setUp(LocalizedDisplayScriptTest.java:140)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)

",Major,Myrna van Lunteren,,2013-09-27T16:59:54.000+0000,java.security.AccessControlException in i18n.LocalizedDisplayScriptTest,Closed,bug,Bug
2013-06-21T11:31:16.000+0000,DERBY-6270,Fixed,"The infrastructure team recommends that we update the javadocs on the web site to fix a vulnerability. We can either regenerate javadocs using JDK 7u25 or use a tool that updates the docs in-place. I'll take a look at running the tool, which can be found here: http://www.oracle.com/technetwork/java/javase/downloads/java-doc-updater-tool-1955731.html",Major,Knut Anders Hatlen,,2013-06-20T10:49:29.000+0000,Run Java API Documentation Updater Tool on the published javadocs,Closed,bug,Bug
2013-06-24T11:17:18.000+0000,DERBY-6268,Fixed,Run-time statistics don't seem to be collected if the query contains a predicate that is known to always evaluate to false. See this thread on derby-dev: http://mail-archives.apache.org/mod_mbox/db-derby-dev/201306.mbox/%3C51BF194D.5040207%40oracle.com%3E,Major,Knut Anders Hatlen,,2013-06-18T09:09:38.000+0000,Run-time statistics not collected if query contains always false predicate,Closed,bug,Bug
2012-05-02T07:18:14.000+0000,DERBY-5733,Fixed,"The test lang.OrderByAndSortAvoidance contains characters that can't be mapped to 7-bit ASCII. This results in warnings when generating the Javadocs.
For instance:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java:2959: warning: unmappable character for encoding ASCII
    insertTable2(it2, 15032385537L, ""BatchTypeInstructions"", ""Ne pas jeter ces documents.  Ils ont ??t?? faits pour quelque chose."");

This can be remedied by using a different system locale, but the question is whether we should use char literals in the source code instead?
Most systems use the C locale by default, as is the case for (at least one of) the build servers we use (search for ""Ils ont"" or move down a few pages):
https://builds.apache.org/job/Derby-trunk/1306/console
",Minor,Knut Anders Hatlen,,2012-04-30T09:00:45.000+0000,Source file for OrderByAndSortAvoidance contains characters not available in the C locale,Closed,bug,Bug
2012-05-07T16:25:50.000+0000,DERBY-5696,Fixed,"DERBY-5489 points out some issues with multiple getXXX calls on LOBs that are not fully documented. The information should probably be added to ""Notes on mapping of java.sql.Blob and java.sql.Clob interfaces"". In addition, the topic ""Mapping of java.sql.Blob and java.sql.Clob interfaces"" has a typo and could probably use some additional information as well.",Major,Camilla Haase,,2012-04-19T14:38:24.000+0000,Documentation on LOBs needs some fixes,Closed,bug,Bug
2013-04-10T19:28:13.000+0000,DERBY-6122,Fixed,"During the test run with the 10.10.1.1 (RC2, i.e. build at revision 1458268) candidate I saw the following failure:

2) testInterruptShutdown(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest)junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XBDA0]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:853)
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownDatabase(TestConfiguration.java:1801)
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testInterruptShutdown(InterruptResilienceTest.java:661)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Login timeout exceeded.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.jdbc.Driver20.timeLogin(Unknown Source)
	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)
	at org.apache.derby.jdbc.Driver20.connect(Unknown Source)
	at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)
	at java.sql.DriverManager.getConnection(DriverManager.java:572)
	at java.sql.DriverManager.getConnection(DriverManager.java:165)
	at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:204)
	at org.apache.derbyTesting.junit.DriverManagerConnector.shutDatabase(DriverManagerConnector.java:157)
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownDatabase(TestConfiguration.java:1798)
	... 40 more

This is *after* a failure with AutoLoadTest, not sure if that matters...

The test output also showed this:
(emb)store.InterruptResilienceTest.testInterruptBatch used 797 ms .
(emb)store.InterruptResilienceTest.testInterruptShutdown java.io.FileNotFoundException: system\singleUse\oneusef1\tmp (The system cannot find the file specified.)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:135)
	at org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.copySingleFile(PrivilegedFileOpsForTests.java:304)
	at org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.recursiveCopy(PrivilegedFileOpsForTests.java:276)
	at org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.access$000(PrivilegedFileOpsForTests.java:49)
	at org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests$8.run(PrivilegedFileOpsForTests.java:235)
	at java.security.AccessController.doPrivileged(AccessController.java:241)
	at org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.copy(PrivilegedFileOpsForTests.java:233)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:141)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.textui.TestRunner.doRun(TestRunner.java:121)
	at junit.textui.TestRunner.start(TestRunner.java:185)
	at junit.textui.TestRunner.main(TestRunner.java:143)
used 11953 ms F.
(emb)store.InterruptResilienceTest.testCreateDropInterrupted used 2250 ms E.
(net)store.InterruptResilienceTest.testRAFWriteInterrupted used 44094 ms .

",Major,Mike Matrigali,,2013-03-21T19:47:25.000+0000,InterruptResilienceTest fails with: junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XBDA0]>,Closed,bug,Bug
2014-03-19T18:37:54.000+0000,DERBY-6513,Fixed,"When I build the 10.10 branch using JDK 8, I see the following warnings:

{noformat}
    [javac] warning: [options] source value 1.4 is obsolete and will be removed in a future release
    [javac] warning: [options] target value 1.4 is obsolete and will be removed in a future release
    [javac] warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
    [javac] 3 warnings
{noformat}",Major,Richard N. Hillegas,,2014-03-17T12:45:10.000+0000,Warnings when building 10.10 branch with Java 8,Closed,bug,Bug
2014-03-20T21:39:36.000+0000,DERBY-6509,Fixed,Another low hanging fruit.,Minor,Dag H. Wanvik,,2014-03-13T17:13:50.000+0000,Convert lang/currentSchema.sql to JUnit CurrentSchemaTest,Closed,bug,Bug
2014-06-06T18:00:41.000+0000,DERBY-6600,Fixed,You get a ClassNotFoundException if you try to use an Analyzer or a QueryParser stored in a jar file in the database. This is probably easy to fix: the class resolution needs to use the database class loader.,Major,Richard N. Hillegas,,2014-06-04T12:26:35.000+0000,Make the Lucene plugin use the database class path to resolve ANALYZERMAKERs and QUERYPARSERMAKERs,Closed,bug,Bug
2014-10-01T22:43:44.000+0000,DERBY-6751,Fixed,User code can cast a java.sql.Connection to an EmbedConnection and then get the LanguageConnectionContext by calling EmbedConnection.getLanguageConnection(). We should prevent user code from doing this.,Major,Richard N. Hillegas,,2014-09-29T19:12:44.000+0000,Prevent user code from getting the LanguageConnectionContext from an EmbedConnection,Closed,bug,Bug
2014-01-22T13:11:02.000+0000,DERBY-6456,Fixed,"When size of reply in NetworkServerControlImpl  equals to 32k (max size for short) ensureDataInBuffer is in infinite loop. clientIs.read(..., replyBuffer.length - replyBufferCount) return 0 because 'replyBuffer.length - replyBufferCount' is 0 (bytes to read).

Steps to reproduce:
Open many connections (for me 34) with at least 1 SELECT query. and call getRuntimeInfo(). Runtime info string.length > 32kB. Leading to infinite loop.",Major,Knut Anders Hatlen,,2014-01-13T17:01:31.000+0000,Infinite loop in NetworkServerControlImpl when reply >= 32k,Closed,bug,Bug
2014-01-22T13:10:17.000+0000,DERBY-6455,Fixed,"NetworkServerControlImpl.ensureDataInBuffer missing check for return -1 (EOF) from 'clientIs.read'. When read returns -1 thread consumes 100% CPU. Method NetworkServerControlImpl.fillReplyBuffer correctly throw exception.

Fix: add two lines:
    private void ensureDataInBuffer(int minimumBytesNeeded) throws Exception
    {
        // make sure the buffer is large enough
        while ((replyBufferCount - replyBufferPos) < minimumBytesNeeded)
        {
            try {
                int bytesRead = clientIs.read(replyBuffer, replyBufferCount, replyBuffer.length - replyBufferCount);
+                if (bytesRead == -1)
+                    consolePropertyMessage(""DRDA_InvalidReplyTooShort.S"", true);
                replyBufferCount += bytesRead;
        
            } catch (IOException e)
            {
                clientSocketError(e);
            }
        }
    }

StackTrace:
  java.lang.Thread.State: RUNNABLE
          at java.net.SocketInputStream.read(Unknown Source:-1)
          at org.apache.derby.impl.drda.NetworkServerControlImpl.ensureDataInBuffer(Unknown Source:-1)
          at org.apache.derby.impl.drda.NetworkServerControlImpl.readLDString(Unknown Source:-1)
          at org.apache.derby.impl.drda.NetworkServerControlImpl.readStringReply(Unknown Source:-1)
          at org.apache.derby.impl.drda.NetworkServerControlImpl.runtimeInfo(Unknown Source:-1)
          at org.apache.derby.drda.NetworkServerControl.getRuntimeInfo(Unknown Source:-1)
          at com.crcdata.dbadmin.server.DerbyEngine.getRuntimeInfo(DerbyEngine.java:134)
          at com.crcdata.dbadmin.server.DerbyEngine$DerbyServerMonitorTask.run(DerbyEngine.java:305)
          at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source:-1)
          at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source:-1)
          at java.util.concurrent.FutureTask.run(Unknown Source:-1)
          at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source:-1)
          at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source:-1)
          at java.lang.Thread.run(Unknown Source:-1)
",Critical,None,,2014-01-13T15:56:33.000+0000,Infinite loop in NetworkServerControlImpl.ensureDataInBuffer,Closed,bug,Bug
2012-02-22T14:35:46.000+0000,DERBY-5616,Fixed,"The demo script demo/vtis/sql/demoFileVtis.sql needs to be adjusted:

messages_en.properties is no longer found in source tree, but in the generated tree.

",Minor,Dag H. Wanvik,,2012-02-14T18:44:18.000+0000,demo/vtis/sql/demoFileVtis.sql needs to be adjusted: messages_en.properties has moved,Closed,bug,Bug
2013-10-24T10:40:32.000+0000,DERBY-6373,Fixed,"After executing a batch in a prepared statement, I call getWarnings() on that statement. A NPE is thrown.

	at org.apache.derby.client.am.SqlWarning.getSQLWarning(SqlWarning.java:117)
	at org.apache.derby.client.am.Statement.getWarnings(Statement.java:862)
...

Addtional info:

In a unit test, which worked for 10.8.2.2, a batch of 4 deletes were issued.
They were expected to fail, as there were no matching rows. There was a SQLWarning chain in the statement, 4 deep, one for each row that failed 
with text:

No row was found for FETCH, UPDATE or DELETE; or the result of a query is an empty table.

However, each warning had 'nextException_' null. When attempting to chain on the exceptions when building the warning, a NPE is thrown.

Perhaps something like changing line 105 of SqlWarning.java to

if ( nextWarning_ != null && nextException_ != null )

Of course perhaps there's always supposed to be a corresponding exception.
",Minor,Knut Anders Hatlen,,2013-10-04T20:15:06.000+0000,NPE in Statement.getWarnings(),Closed,bug,Bug
2012-10-16T19:10:36.000+0000,DERBY-5951,Fixed,"When using territory-based collation with Clobs, Derby raises an error trying to invoke a missing method. The following script shows this problem:

connect 'jdbc:derby:memory:db;create=true;collation=TERRITORY_BASED';

create function makeClob( contents varchar( 32672 ) ) returns clob
language java parameter style java no sql deterministic
external name 'org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest.makeClob';

create table clobTable( a clob );

-- fails with a java.lang.NoSuchMethodError exception
insert into clobTable( a ) values ( makeClob( 'a' ) );

connect 'jdbc:derby:memory:db1;create=true';

create function makeClob( contents varchar( 32672 ) ) returns clob
language java parameter style java no sql deterministic
external name 'org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest.makeClob';

create table clobTable( a clob );

-- succeeds
insert into clobTable( a ) values ( makeClob( 'a' ) );

Here is the error:

ERROR 38000: The exception 'java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;' was thrown while evaluating an expression.
ERROR XJ001: Java exception: 'org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;: java.lang.NoSuchMethodError'.

...and here is the stack trace:

Tue Oct 16 08:27:23 PDT 2012 Thread[main,5,main] (XID = 172), (SESSIONID = 1), (DATABASE = memory:db), (DRDAID = null), Failed Statement is: -- fails with a java.lang.NoSuchMethodError exception
insert into clobTable( a ) values ( makeClob( 'a' ) )
ERROR 38000: The exception 'java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;' was thrown while evaluating an expression.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.unexpectedUserException(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)
	at org.apache.derby.tools.ij.main(Unknown Source)
Caused by: java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;
	at org.apache.derby.exe.ace50d80a4x013ax6a2fxb54bx00000467ed600.e0(Unknown Source)
	... 17 more
",Major,Richard N. Hillegas,,2012-10-16T15:33:53.000+0000,Missing method exception raised when using Clobs with territory based collation,Closed,bug,Bug
2013-09-18T12:15:53.000+0000,DERBY-6346,Fixed,"Derby trips over an NPE while processing a left join whose inner table has a generated column. The NPE is not printed to derby.log, indicating another problem. The bug goes as far back as 10.5.1.1, the release which introduced generated columns. The NPE does NOT crash the connection. The application can continue issuing statements on the connection.

The following script shows this problem:

connect 'jdbc:derby:memory:db;create=true';

create table t1( c1 int, c2 int generated always as ( -c1 ) );
create table t2( c1 int );

insert into t1( c1 ) values ( 2 ), ( 20 );
insert into t2( c1 ) values ( 2 ), ( 200 );

-- raises a SQLException wrapping an NPE
select * from t2 left join t1 on t1.c1 = t2.c1;
",Major,Richard N. Hillegas,,2013-09-16T19:42:10.000+0000,NPE in left join whose inner table has a generated column,Closed,bug,Bug
2014-05-05T08:07:21.000+0000,DERBY-6562,Fixed,"This test failed as follows. See the test results at http://download.java.net/javadesktop/derby/request_5590583/javadb-task-3853722.html


{noformat}
junit.framework.AssertionFailedError
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_005_deleteDirectory(LuceneSupportPermsTest.java:506)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}
",Major,Knut Anders Hatlen,,2014-05-02T17:43:44.000+0000,Failed to delete directory in LuceneSupportPermsTest.test_005_deleteDirectory(),Closed,bug,Bug
2014-05-05T21:14:13.000+0000,DERBY-6561,Fixed,"The ""How this guide is organized"" topic of the Reference Manual does not list two top-level sections: ""Argument matching"" and ""XPLAIN style tables.""

The equivalent topic of ""Tuning Derby"" contains no description of one of the sections, ""Selectivity and cardinality statistics,"" although it is listed.

The equivalent topic of the Admin Guide does not list ""Using Java Management Extensions (JMX) technology.""

The equivalent topic of the Tools Guide does not list ""Optional tools.""
",Minor,Camilla Haase,,2014-05-01T17:18:20.000+0000,Organization topics of some manuals need updating,Closed,bug,Bug
2012-04-19T18:50:05.000+0000,DERBY-5692,Fixed,"I am seeing an irregularly occurring failure with ibm 1.4.2 on one machine - which happens to be the only 4 CPU machine and the only one running Windows 2008...And I've got 10.8 nightly tests running on it.

I have not seen this with other jvms on the same machine.
It's possible this would also happen on trunk, but we stopped supporting 1.4.2 with trunk and so I do not run tests against trunk with (ibm) 1.4.2.

When the test passes, the output contains 5 identical lines 'Got a Deadlock'.
The test failures are of 2 kinds:
- 1 (or more?) of the 'Got a Deadlock' lines is missing
- we get a '40XL1' error (timeout) instead of a deadlock.

As the second situation seems to match what DERBY-715 was about, I thought it worthwhile reporting as a separate JIRA. We should check it's not somehow a regression.
",Minor,Myrna van Lunteren,,2012-04-17T18:16:58.000+0000,intermittent test failure in storetests/st_derby715.java,Closed,bug,Bug
2012-04-19T02:12:22.000+0000,DERBY-5671,Fixed,"As I understand it at least since September 30 of last year, the system test NsTest has been broken on trunk.   In  these six months the test has not been runnable, so we do not know if  new issues have been introduced with sequence generators or most importantly with auto-increment columns that are now based on them, which many, many applications rely upon.  Even if the known  problems are fixed later in the 10.9 release cycle and new problems are exposed, we won't be able to  go back to any point in time to discover when they might be released.

In 10.8 we coped with this problem by backing out the concurrency improvements (DERBY-5448) pending fixes for DERBY-5422, DERBY-5454, DERBY-5430.   Currently none of those issues have been assigned.  Since this has been going on now for six months, I think we urgently need to stabiliize auto-increment columns and get this test running again on trunk.   I can see three possible options.
    1) Someone with interest assign themselves to these issues and make significant progress over the next few weeks.
    2)  Make the concurrency improvements optional  with a property which defaults to false (I don't know if this is practical)
    3) Back the concurrency performance improvements out of trunk until these issues have been resolved and the change can be resubmitted.

I realize that NsTest is not the easiest test to work with but it does seem to have found serious problems with generated columns that I think users are likely to hit.  In the past, a  similiar disregard for mailjdbc exposing a corruption issue meant that we actually released a bad  corruption issue that I know hit many users of Derby before we addressed it.  Autoincrement is widely, widely, used. We need to get it stabilized and the test running on trunk.   Although the system tests are not particularly easy to deal with, they are all we have and they do find issues.


",Critical,None,,2012-03-25T18:53:18.000+0000,NsTest does not run on trunk do multiple issues stemming from concurrency improvements ,Closed,bug,Bug
2013-02-15T19:15:04.000+0000,DERBY-6061,Fixed,"In the Developer's Guide we describe two kinds of upgrade, ""full"" and ""soft"". I think we used to use the terms ""hard"" and ""soft"", and ""hard"" was changed to ""full"" to provide a more accurate description of what happens. There are still a few leftover occurrences of ""hard"" in the docs here and there.

However, ""soft"" doesn't provide much indication of what happens in that kind of upgrade. Would ""partial"" be more correct? If not, is there a good alternative?

I can go through the docs and fix the language based on whatever you all think makes sense.",Minor,Camilla Haase,,2013-01-31T16:39:41.000+0000,Upgrade language is inconsistent,Closed,bug,Bug
2013-02-08T17:25:17.000+0000,DERBY-6065,Fixed,"I happened to notice that some of the links in the documentation are broken.

For example, on http://db.apache.org/derby/docs/10.9/devguide/cdevconcepts50894.html
the link to LockTable API documentation is broken.

There are also broken links to the documentation in the wiki, but that's not something we track with JIRA issues, I think. But it would be nice to figure out if we can clean up those links easily. For example, on  http://wiki.apache.org/db-derby/LockDebugging there are broken links to the LockTable API documentation, as well as to the SYSCS_DIAG table documentation.",Minor,Camilla Haase,,2013-02-03T17:33:36.000+0000,LockTable API link in the documentation is broken,Closed,bug,Bug
2013-10-10T11:06:06.000+0000,DERBY-6371,Fixed,"If you define a trigger in another schema than the current schema, and the trigger action references tables in the current schema without explicit schema names, ALTER TABLE DROP COLUMN may get confused when checking dependencies.

For example:

ij> create table s1.t1(x int, y int);
0 rows inserted/updated/deleted
ij> create table s1.t2(x int, y int);
0 rows inserted/updated/deleted
ij> set schema s1;
0 rows inserted/updated/deleted
ij> create trigger s2.tr after update of x on t1 for each row insert into t2(x) select x from t1;
0 rows inserted/updated/deleted
ij> alter table s1.t1 drop column y restrict;
ERROR X0Y25: Operation 'DROP COLUMN' cannot be performed on object 'Y' because TRIGGER 'TR' is dependent on that object.

The ALTER TABLE statement should have succeeded, because the trigger does not depend on column Y.

If you create dummy tables in S2 with the same names as those in S1, the same ALTER TABLE statement succeeds:

ij> create table s2.t1(x int);
0 rows inserted/updated/deleted
ij> create table s2.t2(x int);
0 rows inserted/updated/deleted
ij> alter table s1.t1 drop column y restrict;
0 rows inserted/updated/deleted

The existence of these unrelated tables should not affect whether you're allowed to drop the column.",Major,Knut Anders Hatlen,,2013-10-04T11:52:41.000+0000,DROP COLUMN looks in wrong schema when checking trigger dependencies,Closed,bug,Bug
2013-04-02T21:30:05.000+0000,DERBY-6138,Fixed,"Depending on classpath order, I believe if derbyclient.jar is before derby.jar in the classpath ClassLoaderBootTest fails with a sealing violation.,


There were 2 errors:
1) testBootingAnAlreadyBootedDatabase(org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest)java.lang.ExceptionInInitializerError
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:255)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.findDriver(EmbeddedBaseDataSource.java:366)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:615)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:552)
	at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest.testBootingAnAlreadyBootedDatabase(ClassLoaderBootTest.java:178)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.services.sanity is sealed
	at java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:623)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:655)
	at java.net.URLClassLoader.access$400(URLClassLoader.java:92)
	at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:1159)
	at java.security.AccessController.doPrivileged(AccessController.java:288)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:594)
	at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:293)
	at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:303)
	at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:365)
	at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:342)
	at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58)
	at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285)
	at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67)
	at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:196)
	at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:92)
	at java.lang.J9VMInternals.initializeImpl(Native Method)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:233)
	... 41 more
2) testBootingDatabaseShutdownByAnotherCLR(org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest)java.lang.ExceptionInInitializerError
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:255)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.findDriver(EmbeddedBaseDataSource.java:366)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:615)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:552)
	at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest.testBootingDatabaseShutdownByAnotherCLR(ClassLoaderBootTest.java:208)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.services.sanity is sealed
	at java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:623)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:655)
	at java.net.URLClassLoader.access$400(URLClassLoader.java:92)
	at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:1159)
	at java.security.AccessController.doPrivileged(AccessController.java:288)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:594)
	at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:293)
	at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:303)
	at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:365)
	at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:342)
	at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58)
	at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285)
	at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67)
	at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:196)
	at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:92)
	at java.lang.J9VMInternals.initializeImpl(Native Method)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:233)
	... 41 more

My classpath when this occurred was:
.;C:/cygwin/svn/trunk/jars/sane/derbyclient.jar;C:/cygwin/svn/trunk/jars/sane/derby.jar;C:/cygwin/svn/trunk/jars/sane/de
rbyrun.jar;C:/cygwin/svn/trunk/jars/sane/derby.jar;C:/cygwin/svn/trunk/jars/sane/derbyTesting.jar;C:/cygwin/svn/trunk/to
ols/java/junit.jar;C:/cygwin/svn/trunk/tools/java/jakarta-oro-2.0.8.jar

Taking out all but derbyrun.jar and derbyTesting.jar resolved the issue.
",Major,Katherine Marsden,,2013-04-02T18:14:31.000+0000,org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest fails with  sealing violation: package org.apache.derby.iapi.services.sanity is sealed depending on classpath order,Closed,bug,Bug
2013-04-11T23:21:03.000+0000,DERBY-6144,Fixed,"failure in nightly regression test, candidate 10.10 branch, ibm17

may be related to daylight savings time change, there were similar resolved bugs that were marked fixed,
so reporting new one in case this is different.

http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/ibm17/1461391-suites.All_diff.txt

There was 1 failure:
1) testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError
	at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testStatisticsCorrectness(AutomaticIndexStatisticsTest.java:332)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
",Major,Mike Matrigali,,2013-04-03T01:18:50.000+0000,"nightly regression test failure, intermittent error : testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError ",Closed,bug,Bug
2013-04-11T15:13:04.000+0000,DERBY-6129,Fixed,"The Reference Manual says that SYSCOLUMNS.COLUMNNAME has datatype CHAR(128). It's actual datatype is VARCHAR(128). It's probably worth running the following script to confirm the datatypes of all catalog columns described by the Reference Manual:

connect 'jdbc:derby:memory:db;create=true';

select cast(t.tablename as varchar( 20 )), cast(c.columnname as varchar(20)), c.columndatatype
from sys.syscolumns c, sys.systables t
where t.tablename like 'SYS%'
and t.tableid = c.referenceid
order by t.tablename, c.columnname;
",Major,Camilla Haase,,2013-03-26T14:20:15.000+0000,Reference Manual gives incorrect datatype for SYSCOLUMNS.COLUMNNAME,Closed,bug,Bug
2013-04-10T19:12:46.000+0000,DERBY-6131,Fixed,"the issue can be reproduced
1. create table myTbl1 (name varchar(1000));
2. create table myTbl2 (name varchar(1000));
3. create view myView (name) as select t1.name from myTbl1 t1 union all select t2.name from myTbl2 t2;
4. select name from myView where upper(name) in ('AA', 'BB');
#4 failed with ""org.apache.derby.impl.sql.compile.SimpleStringOperatorNode incompatible with org.apache.derby.impl.sql.compile.ColumnReference: java.lang.ClassCastException""

If the view is created as ""create myView (name) as select t1.name from myTbl1 t1"", the query worked fine.",Major,Mike Matrigali,,2013-03-27T13:17:37.000+0000,"select from view with ""upper"" and ""in"" list throws a ClassCastException",Closed,bug,Bug
2013-04-04T09:17:21.000+0000,DERBY-6147,Fixed,http://mail-archives.apache.org/mod_mbox/db-derby-dev/201304.mbox/%3CCADjEm_WJjDwDJ-vE-swq6XXvKD018ZZFFKgapF%3DTchPU9H3Pug%40mail.gmail.com%3E,Major,Knut Anders Hatlen,,2013-04-03T08:28:30.000+0000,ClosedObjectTest fails on the 10.9 branch when running on Java 8,Closed,bug,Bug
2011-12-07T01:24:03.000+0000,DERBY-5519,Fixed,"The method derbyVMLevel gives correct result only up to and including Java 6, cf. this snippet:

public static String derbyVMLevel()
{
    switch (JDK_ID)
    {
    case J2SE_14: return J2ME ? ""J2ME - JDBC for CDC/FP 1.1"" : ""J2SE 1.4 - JDBC 3.0"";
    case J2SE_142: return ""J2SE 1.4.2 - JDBC 3.0"";
    case J2SE_15: return ""J2SE 5.0 - JDBC 3.0"";
    case J2SE_16: return ""Java SE 6 - JDBC 4.0"";
    default: return ""?-?"";
    }
}

This is exposed through our MBean implementation in org.apache.derby.jdbc.JDBC#getDriverLevel
",Major,Dag H. Wanvik,,2011-12-02T23:29:32.000+0000,Update code in JVMInfo#derbyVMLevel to give correct results for Java 7 and provisionally for 8.,Closed,bug,Bug
2011-12-12T14:22:33.000+0000,DERBY-5517,Fixed,"http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/sles/1206494-suitesAll_diff.txt

There was 1 error:
1) testReplication_Local_3_p1_StateNegativeTests(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p1)java.lang.Exception: DRDA_NoIO.S:Could not connect to Derby Network Server on host 127.0.0.1, port 1532: Connection refused
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.setUpSocket(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.ping(ReplicationRun.java:2419)
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.pingServer(ReplicationRun.java:2406)
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startServer(ReplicationRun.java:2126)
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p1.testReplication_Local_3_p1_StateNegativeTests(ReplicationRun_Local_3_p1.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:208)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)",Major,Knut Anders Hatlen,,2011-12-02T18:08:45.000+0000,testReplication_Local_3_p1_StateNegativeTests failed with connection refused,Closed,bug,Bug
2011-12-09T01:26:07.000+0000,DERBY-5521,Fixed,"Cf these lines:

assert(driverLevelString.indexOf('?') == -1);
assert(driverLevelString.matches(""^JRE - JDBC: "" + JDBCVersion + "".*""));

The ""assert"" is a Java built-in rather than the JUnit assertTrue we need.

The string driverLevelString is also wrong, since it is a mere toString of the bean name. We need to use getAttribute on it to get the driver level
for asserting.",Minor,Dag H. Wanvik,,2011-12-05T16:47:19.000+0000,JDBCMBeanTest#testAttributeDriverLevel uses Java assert in lieu of JUnit assert: no real testing happens,Closed,bug,Bug
2014-03-05T20:09:06.000+0000,DERBY-6495,Fixed,"The nightly test results at http://download.java.net/javadesktop/derby/request_5588377/javadb-task-3815121.html show this error:

    junit.framework.AssertionFailedError: Column value mismatch @ column 'STATS', row 1:
    Expected: >numunique= 3 numrows= 7<
    Found:    >numunique= 7 numrows= 7<
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1291)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1203)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1090)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1013)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:970)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:928)
	at org.apache.derbyTesting.functionTests.tests.lang.SelectivityTest.testBasic(SelectivityTest.java:1181)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
",Major,Myrna van Lunteren,,2014-03-05T13:09:44.000+0000,Error in SelectivityTest.testBasic,Closed,bug,Bug
2014-07-09T10:55:52.000+0000,DERBY-6651,Fixed,"http://download.java.net/javadesktop/derby/request_5593638/javadb-task-3898689.html

{noformat}
junit.framework.AssertionFailedError: Minion did not start or boot db in 600 seconds.
exitValue = 1----Process exited. Minion's stderr:
----Minion's stderr ended
	at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.waitForMinionBoot(BootLockTest.java:239)
	at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBootLock(BootLockTest.java:130)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}",Major,Knut Anders Hatlen,,2014-07-08T12:04:42.000+0000,BootLockTest fails on compact profile 2,Closed,bug,Bug
2013-09-04T09:28:07.000+0000,DERBY-6323,Fixed,Many javadoc comments have @throws or @exception tags that either misspell the name of the exception class or name an exception that is not actually thrown from the method. We should fix those references.,Minor,Knut Anders Hatlen,,2013-08-29T11:16:49.000+0000,Fix incorrect @throws and @exception tags in javadoc,Closed,bug,Bug
2013-09-05T18:51:26.000+0000,DERBY-6324,Fixed,"Now that the work on DERBY-6000 is done, DatabaseMetaData.getJDBCMinorVersion() should return 2 rather than 1. The following script shows that we're still returning 1:

connect 'jdbc:derby:memory:db;create=true';

call syscs_util.syscs_register_tool( 'databaseMetaData', true );

values getJDBCMajorVersion();
values getJDBCMinorVersion();

call syscs_util.syscs_register_tool( 'databaseMetaData', false );
",Major,Myrna van Lunteren,,2013-08-29T12:27:39.000+0000,DatabaseMetaData.getJDBCMinorVersion() should return 2 now that we've implemented JDBC 4.2,Closed,bug,Bug
2013-05-31T07:41:20.000+0000,DERBY-6233,Fixed,"java.sql.SQLDataException: Invalid XML Document: External DTD: Failed to read external DTD 'personal.dtd', because 'file' access is not allowed.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:79)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:349)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:85)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1438)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1695)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1379)
	at org.apache.derbyTesting.junit.XML.insertDocWithDTD(XML.java:240)
	at org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest$XBindTestSetup.setUp(XMLBindingTest.java:301)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
Caused by: java.sql.SQLException: Invalid XML Document: External DTD: Failed to read external DTD 'personal.dtd', because 'file' access is not allowed.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:126)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
Caused by: java.sql.SQLException: Java exception: 'External DTD: Failed to read external DTD 'personal.dtd', because 'file' access is not allowed.: org.xml.sax.SAXException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:126)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:370)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:432)
Caused by: org.xml.sax.SAXException: External DTD: Failed to read external DTD 'personal.dtd', because 'file' access is not allowed.
org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 119; External DTD: Failed to read external DTD 'personal.dtd', because 'file' access is not allowed.
	at org.apache.derby.iapi.types.SqlXmlUtil$XMLErrorHandler.fatalError(SqlXmlUtil.java:767)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:180)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368)
	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1388)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1158)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1050)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:964)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:509)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:858)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:787)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:237)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:329)
	at org.apache.derby.iapi.types.SqlXmlUtil$1.run(SqlXmlUtil.java:320)
	at org.apache.derby.iapi.types.SqlXmlUtil$1.run(SqlXmlUtil.java:317)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.iapi.types.SqlXmlUtil.serializeToString(SqlXmlUtil.java:315)
	at org.apache.derby.iapi.types.XML.XMLParse(XML.java:632)
	at org.apache.derby.exe.acbfcc1aadx013exeff7x4f4fx000077cfc4780.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:148)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:185)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:128)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:520)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:453)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:334)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1346)
Caused by: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 119; External DTD: Failed to read external DTD 'personal.dtd', because 'file' access is not allowed.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)",Major,Knut Anders Hatlen,,2013-05-29T12:02:50.000+0000,XMLBindingTest fails on latest JDK 8 EA,Closed,bug,Bug
2014-08-07T12:30:39.000+0000,DERBY-6685,Fixed,"I saw many permission problems when I set up a build job for the 10.11 branch. See for example this log: https://builds.apache.org/job/Derby-10.11-suites.All/1/console

First stack trace:

{noformat}
    [junit] Running org.apache.derby.PackagePrivateTestSuite
    [junit] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.662 sec
    [junit] Exception in thread ""main"" java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/home/jenkins/jenkins-slave/workspace/Derby-10.11-suites.All/10.11-head/junit_20140804_1122/TEST-org.apache.derby.PackagePrivateTestSuite.xml"" ""write"")
    [junit] 	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)
    [junit] 	at java.security.AccessController.checkPermission(AccessController.java:884)
    [junit] 	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
    [junit] 	at java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
    [junit] 	at java.io.FileOutputStream.<init>(FileOutputStream.java:194)
    [junit] 	at java.io.FileOutputStream.<init>(FileOutputStream.java:156)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.FormatterElement$DelayedFileOutputStream.write(FormatterElement.java:381)
    [junit] 	at java.io.OutputStream.write(OutputStream.java:116)
    [junit] 	at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
    [junit] 	at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)
    [junit] 	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:295)
    [junit] 	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141)
    [junit] 	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229)
    [junit] 	at java.io.BufferedWriter.flush(BufferedWriter.java:254)
    [junit] 	at org.apache.tools.ant.util.DOMElementWriter.openElement(DOMElementWriter.java:371)
    [junit] 	at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:209)
    [junit] 	at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222)
    [junit] 	at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.endTestSuite(XMLJUnitResultFormatter.java:188)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.fireEndTestSuite(JUnitTestRunner.java:840)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:575)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030)
    [junit] Running org.apache.derby.PackagePrivateTestSuite
    [junit] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0 sec
    [junit] Test org.apache.derby.PackagePrivateTestSuite FAILED (crashed)
{noformat}

I can reproduce these failures in my environment by running the junit-single target with Ant 1.9.4. For example:

{noformat}
ant -Dderby.junit.testclass=org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest junit-single
{noformat}

If I use an older Ant version (I've tried 1.9.0 and 1.8.2) it does not fail.",Major,Knut Anders Hatlen,,2014-08-04T13:59:45.000+0000,Permission problems when running JUnit tests with Ant 1.9.4,Closed,bug,Bug
2014-08-07T16:38:24.000+0000,DERBY-6693,Fixed,"This (meaningless) statement gives NPE in insane builds and
assert failure in sane builds:
{code}
s.execute(""create table t2(x int)"");
s.execute(""create table t1(x int)"");
s.execute(""insert into t2 values 3,4"");
s.executeUpdate(""merge into t1 using t2 on (t1.x=t2.x) "" + 
   ""when not matched then insert values (count(*))"");
{code}
I see it also applies to other aggregates, e.g. MAX.
stack trace (insane):
{code}
Exception in thread ""main"" java.sql.SQLException: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
        at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
        at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
        at derby6565.Derby6565.main(Derby6565.java:46)
Caused by: ERROR XJ001: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'.
        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
        ... 12 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: -1
        at org.apache.derby.impl.services.bytecode.BCMethod.popStack(Unknown Source)
        at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(Unknown Source)
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source)
        at org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(Unknown Source)
        at org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.MergeNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source)
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
        at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
        ... 4 more
{code}
",Minor,Dag H. Wanvik,,2014-08-06T18:10:17.000+0000,Assert failure/ArrayIndexOutOfBoundsException when using COUNT in MERGE matching clause,Closed,bug,Bug
2014-08-07T13:49:07.000+0000,DERBY-6689,Fixed,"sane build:
{noformat}
ij version 10.12
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create table t2(x int);
0 rows inserted/updated/deleted
ij> merge into t1 using t2 on (t1.x=t2.x) when not matched then insert values (row_number() over ());
ERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.
{noformat}

insane build:
{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t1(x int);
0 rows inserted/updated/deleted
ij> create table t2(x int);
0 rows inserted/updated/deleted
ij> merge into t1 using t2 on (t1.x=t2.x) when not matched then insert values (row_number() over ());
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
{noformat}

Full stack trace of the assert failure:
{noformat}
org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED cannot get interface without operand
	at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.getReceiverInterfaceName(UnaryOperatorNode.java:663)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(UnaryOperatorNode.java:622)
	at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:1061)
	at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(ResultColumnList.java:1458)
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(MatchingClauseNode.java:1342)
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(MatchingClauseNode.java:1237)
	at org.apache.derby.impl.sql.compile.MergeNode.generate(MergeNode.java:1012)
	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:317)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:549)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
{noformat}",Major,Dag H. Wanvik,,2014-08-06T07:15:06.000+0000,Assert failure/NPE when using ROW_NUMBER in MERGE ... INSERT,Closed,bug,Bug
2014-08-07T12:30:28.000+0000,DERBY-6692,Fixed,"Create a database called ""wombat"" with Derby 10.10.2.0.

Then, in the same directory, execute the following code using the 10.11.1.0 release candidate:

{code}
        Connection c = DriverManager.getConnection(""jdbc:derby:wombat"");
        c.setAutoCommit(false);
        Statement s = c.createStatement();
        s.execute(""create table t(i int generated always as identity)"");
        s.execute(""insert into t values (default)"");
        c.rollback();
{code}

The INSERT statement will fail with a self-deadlock:

{noformat}
Exception in thread ""main"" java.sql.SQLTransactionRollbackException: Self-deadlock.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at Kladd.main(Kladd.java:12)
Caused by: ERROR 40XL2: Self-deadlock.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(Unknown Source)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(Unknown Source)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(Unknown Source)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(Unknown Source)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(Unknown Source)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getOldStyleIdentityValue(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(Unknown Source)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(Unknown Source)
	at org.apache.derby.exe.acaaeec04ex0147xab31x1ccax000007dedc900.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 4 more
{noformat}",Major,Richard N. Hillegas,,2014-08-06T12:09:23.000+0000,Self-deadlock when inserting row with identity column in soft-upgraded database,Closed,bug,Bug
2012-08-30T23:45:43.000+0000,DERBY-5912,Fixed,"The following test has been seen to fail as below  in some runs where the machine is under heavy load  and slow running options are specified and the isValid() call takes more than a second to return.

1) testIsValidImplemented(org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest)junit.framework.AssertionFailedError
	at org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testIsValidImplemented(ConnectionTest.java:168)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
	at junit.extensions.TestSetup.run(TestSetup.java:23)


The test does:
   // Test with a 1 second timeout
        assertTrue(getConnection().isValid(1));

assuming it will return in one second.  For embedded the int parameter is not implemented so indeed this always passes. For the Network implementation in NetConnection40.java we actually do timeout and perform a query as part of the implementation so might indeed return false. 


",Major,Myrna van Lunteren,,2012-08-29T00:43:59.000+0000,testIsValidImplemented fails for NetworkServer in some slow running machines/configurations,Closed,bug,Bug
2014-06-25T18:42:50.000+0000,DERBY-6637,Fixed,"With trunk built at revision 1604994, I see errors and failures like the following:
1) testXMLQuery(org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest)java.sql.SQLException: Encountered error while evaluating XML query expression for XMLQUERY operator: Could not load any resource bundles.org.apache.xpath.res.XPATHErrorResources
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1075)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLQuery(XMLTypeAndOpsTest.java:1618)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
Caused by: ERROR 10000: Encountered error while evaluating XML query expression for XMLQUERY operator: Could not load any resource bundles.org.apache.xpath.res.XPATHErrorResources
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 49 more
Caused by: java.util.MissingResourceException: Could not load any resource bundles.org.apache.xpath.res.XPATHErrorResources
	at org.apache.xml.res.XMLMessages.loadResourceBundle(XMLMessages.java:189)
	at org.apache.xpath.res.XPATHMessages.createXPATHMessage(XPATHMessages.java:53)
	at org.apache.xpath.objects.XObject.error(XObject.java:701)
	at org.apache.xpath.objects.XObject.nodelist(XObject.java:455)
	at org.apache.xpath.jaxp.XPathExpressionImpl.getResultAsType(XPathExpressionImpl.java:357)
	at org.apache.xpath.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:100)
	at org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:184)
	at org.apache.derby.iapi.types.SqlXmlUtil.evaluate(Unknown Source)
	at org.apache.derby.iapi.types.SqlXmlUtil.evalXQExpression(Unknown Source)
	at org.apache.derby.iapi.types.XML.XMLQuery(Unknown Source)
	at org.apache.derby.exe.acf63284d8x0146xcb97x285bx000029929fd62.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(Unknown Source)
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)
	... 41 more

See for instance this windows/ibm1.6 result: 
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1604993-suites.All_diff.txt",Major,Knut Anders Hatlen,,2014-06-24T18:49:08.000+0000,"test errors failures in lang.XMLTypeAndOpsTest, XMLBindingTest and XMLConcurrencyTest with ibm jvms",Closed,bug,Bug
2012-12-14T20:04:41.000+0000,DERBY-6010,Fixed,"The documentation should state explicitly that ALTER TABLE ADD COLUMN adds the new column at the end of the table row. If you need to change a column (for example, to change its data type), the only way to do so is to drop the column and add a new one, and this changes the ordering of the columns.
",Minor,Camilla Haase,,2012-12-07T22:56:55.000+0000,Reference Manual should clarify what ALTER TABLE ADD COLUMN does,Closed,bug,Bug
2013-02-01T04:20:53.000+0000,DERBY-6060,Fixed,"The javadoc says the old versions are contained in a list in _Suite. The old versions have been factored out into the class OldVersions since svn 764912 (DERBY-4157).
",Trivial,Dag H. Wanvik,,2013-01-31T10:40:05.000+0000,Fix Javadoc for UpgradeTrajectoryTest dangling reference,Closed,bug,Bug
2013-02-05T11:46:33.000+0000,DERBY-6064,Fixed,"The upgrade test fails when run with 10.8.3. The reason is that a fix has been backported to 10.8.3, and older branches back to 10.3, and this fix invalidates assumptions made in some of the tests in Changes10_9.

Example of failures:
https://builds.apache.org/job/Derby-10.9-suites.All/60/testReport/

As a side note, I'm wondering if we don't have good enough routines to make sure we run the upgrade tests with maintenance releases on older branches before releasing them. I don't know if we can avoid this situation in general, that would at least require very careful consideration on how to write the upgrade test.
",Major,Kristian Waagan,,2013-02-01T11:58:01.000+0000,Failures in upgradeTests.Changes10_9 related to index cardinality statistics,Closed,bug,Bug
2014-04-16T17:13:05.000+0000,DERBY-6528,Fixed,"Starting with friday night runs the nightly testing against the ibm jvm's
have gotten a number of test failures associated with lucene.  I am
wondering if the new tests assume new jars while running the tests.

Here are the first test failures, which I assume are associated with
checkin 1580387.

There were 9 errors:
1) testCreateAndQueryIndex(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertUpdateCount(BaseJDBCTestCase.java:1403)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.setUp(LuceneSupportTest.java:260)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR 38000: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 41 more
Caused by: java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at java.lang.Class.forNameImpl(Native Method)
	at java.lang.Class.forName(Class.java:182)
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Unknown Source)
	at org.apache.derby.exe.ac1bbbc146x0144xf731x3981xffffdb4fd6ba5.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 34 more
Caused by: java.lang.ClassNotFoundException: org.apache.lucene.index.IndexableField
	at java.net.URLClassLoader.findClass(URLClassLoader.java:434)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:677)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:358)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	... 50 more
2) testUpdateIndex(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest)java.sql.SQLException: Table/View 'TITLES' already exists in Schema 'LUCENETEST'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.setUp(LuceneSupportTest.java:252)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR X0Y32: Table/View 'TITLES' already exists in Schema 'LUCENETEST'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source)
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 32 more
3) testListIndex(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest)java.sql.SQLException: Table/View 'TITLES' already exists in Schema 'LUCENETEST'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.setUp(LuceneSupportTest.java:252)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR X0Y32: Table/View 'TITLES' already exists in Schema 'LUCENETEST'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source)
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 32 more
4) testDropIndexBadCharacters(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest)java.sql.SQLException: Table/View 'TITLES' already exists in Schema 'LUCENETEST'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.setUp(LuceneSupportTest.java:252)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR X0Y32: Table/View 'TITLES' already exists in Schema 'LUCENETEST'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source)
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 32 more
5) test_001_basicNoGrant(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.goodStatement(BaseJDBCTestCase.java:1677)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_001_basicNoGrant(LuceneSupportPermsTest.java:162)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR 38000: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 69 more
Caused by: java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at java.lang.Class.forNameImpl(Native Method)
	at java.lang.Class.forName(Class.java:182)
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Unknown Source)
	at org.apache.derby.exe.ac4b390189x0144xf731x3981xffffdb4fd6ba0.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 62 more
Caused by: java.lang.ClassNotFoundException: org.apache.lucene.index.IndexableField
	at java.net.URLClassLoader.findClass(URLClassLoader.java:434)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:677)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:358)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	... 78 more
6) test_002_userGrant(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest)java.sql.SQLException: Table/View 'POEMS' already exists in Schema 'RUTH'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.goodStatement(BaseJDBCTestCase.java:1677)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.createPoemsTable(LuceneSupportPermsTest.java:483)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.createSchema(LuceneSupportPermsTest.java:477)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_002_userGrant(LuceneSupportPermsTest.java:257)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR X0Y32: Table/View 'POEMS' already exists in Schema 'RUTH'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source)
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 64 more
7) test_004_datatypes(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.goodStatement(BaseJDBCTestCase.java:1677)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_004_datatypes(LuceneSupportPermsTest.java:386)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR 38000: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 69 more
Caused by: java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at java.lang.Class.forNameImpl(Native Method)
	at java.lang.Class.forName(Class.java:182)
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Unknown Source)
	at org.apache.derby.exe.ac4b390189x0144xf731x3981xffffdb4fd6ba0.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 62 more
Caused by: java.lang.ClassNotFoundException: org.apache.lucene.index.IndexableField
	at java.net.URLClassLoader.findClass(URLClassLoader.java:434)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:677)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:358)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	... 78 more
8) test_005_deleteDirectory(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest)java.sql.SQLException: Table/View 'POEMS' already exists in Schema 'RUTH'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.goodStatement(BaseJDBCTestCase.java:1677)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.createPoemsTable(LuceneSupportPermsTest.java:483)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.createSchema(LuceneSupportPermsTest.java:477)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_005_deleteDirectory(LuceneSupportPermsTest.java:444)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR X0Y32: Table/View 'POEMS' already exists in Schema 'RUTH'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source)
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 64 more
9) test_002_basic(org.apache.derbyTesting.functionTests.tests.lang.LuceneCollationTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.goodStatement(BaseJDBCTestCase.java:1677)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneCollationTest.test_002_basic(LuceneCollationTest.java:146)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR 38000: The exception 'java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField' was thrown while evaluating an expression.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 55 more
Caused by: java.lang.NoClassDefFoundError: org.apache.lucene.index.IndexableField
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at java.lang.Class.forNameImpl(Native Method)
	at java.lang.Class.forName(Class.java:182)
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Unknown Source)
	at org.apache.derby.exe.ac19b80240x0144xf731x3981xffffdb4fd6ba1.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 48 more
Caused by: java.lang.ClassNotFoundException: org.apache.lucene.index.IndexableField
	at java.net.URLClassLoader.findClass(URLClassLoader.java:434)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:677)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:358)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	... 64 more
There were 3 failures:
1) testTriggersInGeneral(org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest)junit.framework.ComparisonFailure: expected:<...,(3,3,'3'),(4,4,'4')[
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <5th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}
]
> but was:<...,(3,3,'3'),(4,4,'4')[
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <5th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}

]
>
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest.assertTriggerOutput(TriggerGeneralTest.java:2362)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest.testTriggersInGeneral(TriggerGeneralTest.java:444)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testTriggersInGeneral(org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest)junit.framework.ComparisonFailure: expected:<...,(3,3,'3'),(4,4,'4')[
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <5th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}
]
> but was:<...,(3,3,'3'),(4,4,'4')[
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <2nd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <3rd> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{3,3,3}

TRIGGER: <4th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{4,4,4}

TRIGGER: <5th> on statement insert into t values (2,2,'2'),(3,3,'3'),(4,4,'4')
BEFORE RESULT SET
<NULL>

AFTER RESULT SET
	 X,Y,C
	 - - -
	{2,2,2}
	{3,3,3}
	{4,4,4}

]
>
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest.assertTriggerOutput(TriggerGeneralTest.java:2362)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest.testTriggersInGeneral(TriggerGeneralTest.java:444)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
3) test_003_loading(org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:<[4251D]> but was:<[XJ001]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:876)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:905)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:905)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:940)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1308)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.expectExecutionError(BaseJDBCTestCase.java:1818)
	at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportPermsTest.test_003_loading(LuceneSupportPermsTest.java:348)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Java exception: 'org.apache.lucene.index.IndexableField: java.lang.ClassNotFoundException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1303)
	... 59 more
Caused by: ERROR XJ001: Java exception: 'org.apache.lucene.index.IndexableField: java.lang.ClassNotFoundException'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 73 more
Caused by: java.lang.ClassNotFoundException: org.apache.lucene.index.IndexableField
	at java.net.URLClassLoader.findClass(URLClassLoader.java:434)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:677)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:358)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at java.lang.Class.forNameImpl(Native Method)
	at java.lang.Class.forName(Class.java:182)
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source)
	at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Unknown Source)
	at org.apache.derby.exe.ac06b1817dx0144xf731x3981xffffdb4fd6ba1.g0(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 63 more

FAILURES!!!
Tests run: 18534,  Failures: 3,  Errors: 9
",Major,Richard N. Hillegas,,2014-03-25T18:30:38.000+0000,many nightly test failures following checkin of lucene work.,Closed,bug,Bug
2014-03-31T15:13:17.000+0000,DERBY-6529,Fixed,"consistent nightly regression test failure in testTriggersInGeneral newly
added junit test.  The error happens consistently in windows ibm16 and 
ibm17 but not in linux ibm16 and ibm17.

summary of failures: 
1) testTriggersInGeneral(org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest)junit.framework.ComparisonFailure: expected:<...,(3,3,'3'),(4,4,'4')[
2) testTriggersInGeneral(org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest)junit.framework.ComparisonFailure: expected:<...,(3,3,'3'),(4,4,'4')[
3) testDerby5866TriggerExecutionOrder(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_11)junit.framework.AssertionFailedError: Column value mismatch @ column 'Y', row 1:",Major,Dag H. Wanvik,,2014-03-25T20:59:34.000+0000,nightly regression test failure in newly added junit test TriggerGeneralTest,Closed,bug,Bug
2012-12-06T16:34:37.000+0000,DERBY-6006,Fixed,"A NullPointerException was reported by Harm-Jan Zwinderman on derby-user:
http://mail-archives.apache.org/mod_mbox/db-derby-user/201211.mbox/%3C50B66527.5040906%40gmail.com%3E

I've managed to reproduce it on 10.9.1.0 like this:

ij version 10.9
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table t(x double);
0 rows inserted/updated/deleted
ij> insert into t values (0);
1 row inserted/updated/deleted
ij> prepare ps as 'insert into t select 1 from t order by x';
ij> execute ps;
1 row inserted/updated/deleted
ij> execute ps;
2 rows inserted/updated/deleted
ij> execute ps;
4 rows inserted/updated/deleted
ij> execute ps;
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.

Full stack trace:

java.lang.NullPointerException
	at org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createFormatIds(Unknown Source)
	at org.apache.derby.impl.store.access.heap.Heap.create(Unknown Source)
	at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(Unknown Source)
	at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(Unknown Source)
	at org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.ExecuteStatement(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)
	at org.apache.derby.tools.ij.main(Unknown Source)
	at org.apache.derby.iapi.tools.run.main(Unknown Source)",Major,Knut Anders Hatlen,,2012-12-03T13:02:16.000+0000,NullPointerException in INSERT INTO ... SELECT FROM ... ORDER BY,Closed,bug,Bug
2013-10-07T10:48:25.000+0000,DERBY-6363,Fixed,"Logical expressions with AND and OR operators inside WHEN inside CASE expression nested in SELECT part of statement are wrongly evaluated.
Evaluation results depends on position of OR subexpression. If OR is placed on left side of AND it is evaluated incorrectly.

Following code shows the error.

create table t ( a int, b char );

insert into t values (1, 'a');
insert into t values (2, 'b');
insert into t values (3, 'a');
insert into t values (4, 'b');
insert into t values (5, 'a');
insert into t values (6, 'b');

select
a,
b,
case
    when (( b = 'a' or b = 'b' ) and a < 4) then 'x'
    else '-'
end,
case
    when (a < 4 and ( b = 'a' or b = 'b' )) then 'y'
    else '-'
end
from t;

Actual result:
1 a x y
2 b - y
3 a x y
4 b - -
5 a - -
6 b - -

Expected result
1 a x y
2 b x y
3 a x y
4 b - -
5 a - -
6 b - -
",Major,Knut Anders Hatlen,,2013-10-02T10:27:45.000+0000,Incorrect evaluation of logical expressions in CASE,Closed,bug,Bug
2013-10-07T15:54:39.000+0000,DERBY-6369,Fixed,"Two Reference Manual topics, ""Parameters to getProcedureColumns"" (rrefpgc1.dita) and ""Columns in the ResultSet returned by getProcedureColumns"" (rrefcrsrgpc1.dita), put their information in bullet lists. For readability, these should be converted to two-column tables.",Trivial,Camilla Haase,,2013-10-03T20:16:39.000+0000,Make bullet lists into tables in two Reference Manual topics,Closed,bug,Bug
2013-10-03T13:49:59.000+0000,DERBY-6367,Fixed,"The Reference Manual section titled ""constraint-Name"" incorrectly states that you can't schema-qualify the names of constraints. This is not true. What is true is that the schema name, if supplied, must be the same as the table's schema name. This behavior of Derby is correct and conforms to the SQL Standard, part 2, section 11.6 (table constraint definition), syntax rule 2. The following script shows Derby's behavior:

connect 'jdbc:derby:memory:db;create=true';

create schema s1;

-- fails
create table t1
(
    a int,
    constraint s1.c1 check ( a > 0 )
);

-- succeeds
create table t2
(
    a int,
    constraint c2 check ( a > 0 )
);

-- succeeds
create table t3
(
    a int,
    constraint app.c3 check ( a > 0 )
);

-- fails because the name conflicts with an existing constraint name
create table t4
(
    a int,
    constraint c3 check ( a > 0 )
);
",Major,Camilla Haase,,2013-10-02T18:18:31.000+0000,Reference Manual incorrectly states that you can't schema-qualify constraint names,Closed,bug,Bug
2012-01-05T14:37:01.000+0000,DERBY-5558,Fixed,"Since November 27 the weme 6.2 tests have reported the following failure and error:

1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryTest)junit.framework.AssertionFailedError: expectedExitValue:0 does not match exitValue:1
expected output strings:
	[0]OK (1 test)
 actual output:<STDOUT> .E
Time: 0.156
There was 1 error:
1) launchRecoveryInsert(org.apache.derbyTesting.functionTests.tests.store.RecoveryTest)java.lang.NullPointerException
	at com.ibm.oti.util.DefaultPolicy.addGrant(DefaultPolicy.java:619)
	at com.ibm.oti.util.DefaultPolicy.readPolicy(DefaultPolicy.java:608)
	at com.ibm.oti.util.DefaultPolicy.getSystemPolicy(DefaultPolicy.java:922)
	at com.ibm.oti.util.DefaultPolicy.getPermissionsImpl(DefaultPolicy.java:114)
	at com.ibm.oti.util.DefaultPolicy$1.run(DefaultPolicy.java:67)
	at java.security.AccessController.doPrivileged(AccessController.java:204)
	at com.ibm.oti.util.DefaultPolicy.privateGetPermissions(DefaultPolicy.java:65)
	at com.ibm.oti.util.DefaultPolicy.getPermissions(DefaultPolicy.java:53)
	at java.security.Policy.getPermissions(Policy.java:131)
	at java.security.ProtectionDomain.implies(ProtectionDomain.java:177)
	at java.security.AccessController.checkPermission(AccessController.java:99)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:534)
	at java.security.Policy.getPolicy(Policy.java:49)
	at org.apache.derbyTesting.junit.SecurityManagerSetup$1.run(SecurityManagerSetup.java:191)
	at java.security.AccessController.doPrivileged(AccessController.java:204)
	at org.apache.derbyTesting.junit.SecurityManagerSetup.installSecurityManager(SecurityManagerSetup.java:185)
	at org.apache.derbyTesting.junit.SecurityManagerSetup.installSecurityManager(SecurityManagerSetup.java:145)
	at org.apache.derbyTesting.junit.TestConfiguration.defaultSecurityManagerSetup(TestConfiguration.java:1904)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)

FAILURES!!!
Tests run: 1,  Failures: 0,  Errors: 1

<END STDOUT>
<STDERR><END STDERR>
 expected:<0> but was:<1>
	at junit.framework.AssertionFailedError.<init>(AssertionFailedError.java:13)
	at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(BaseTestCase.java:516)
	at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(BaseTestCase.java:855)
	at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBasicRecovery(RecoveryTest.java:89)
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

FAILURES!!!
Tests run: 6526,  Failures: 1,  Errors: 0


---------------
This started occurring with revision 1206656.

The change since the revision previous to that was:
SUBVERSION LOG FROM 1206392 TO 1206656:
------------------------------------------------------------------------
r1206409 | kahatlen | 2011-11-26 00:11:10 -0800 (Sat, 26 Nov 2011) | 4 lines

DERBY-5514: SecureServerTest (and others) don't play nice with EMMA: AccessControlException

Grant permissions to write coverage data to all code bases, to work
around EMMA's lack of doPrivileged blocks.
------------------------------------------------------------------------

I assume this is because we run weme6.2 with the following emma flag:
-Demma.active=""""

We've been running with this set for a very long time, I cannot remember why.
I'll see if I can find that out, at least.",Major,Myrna van Lunteren,,2011-12-27T18:28:03.000+0000,NullPointerException in store.RecoveryTest launchRecoveryInsert and failure in testBasicRecovery with weme 6.2,Closed,bug,Bug
2012-02-08T10:12:35.000+0000,DERBY-5598,Fixed,"I saw this failure on 10.8 IBM 1.6 on Windows for Feb 1, 2012, build 1239450


testStartWithPrintWriter(org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServerTest)junit.framework.AssertionFailedError: Num of log item should add
	at org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServerTest.testStartWithPrintWriter(DerbyNetNewServerTest.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)

http://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1239450-suites.All_diff.txt
",Major,Knut Anders Hatlen,,2012-02-03T16:15:59.000+0000,testStartWithPrintWriter(org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServerTest)junit.framework.AssertionFailedError: Num of log item should add,Closed,bug,Bug
2012-02-21T18:43:18.000+0000,DERBY-5599,Fixed,"I saw this failure for the Feb 1 run at: 
http://people.apache.org/~myrnavl/derby_test_results/v10_8/linux/testlog/ibm15/1239442-derbyall_diff.txt

I think it is likely the index statistics update kicking in during the test. I am thinking  should not be disabled for the derbyall store tests as having it kick in can cause upredictable reporting of locks pages used, etc.
*** Start: readlocks jdk1.5.0 storeall:storemore 2012-02-01 21:11:01 ***
11113a11114
> APP     |UserTran|ROW     |1   |S   |A           |(2,6)     |GRANT|ACTIVE  
11122a11124
> APP     |UserTran|ROW     |1   |S   |A           |(2,6)     |GRANT|ACTIVE  
11131a11134
> APP     |UserTran|ROW     |1   |S   |A           |(2,6)     |GRANT|ACTIVE  
11138a11142
> APP     |UserTran|ROW     |1   |S   |A           |(2,6)     |GRANT|ACTIVE  
Test Failed.
*** End:   readlocks jdk1.5.0 storeall:storemore 2012-02-01 21:13:31 ***

",Major,Mike Matrigali,,2012-02-03T16:27:25.000+0000,readlocks.sql fails with extra locks.,Closed,bug,Bug
2013-06-26T16:31:46.000+0000,DERBY-6273,Fixed,"Calls to COALESCE fail with NullPointerExceptions if there are multiple ? parameters:

ij version 10.10
ij> connect 'jdbc:derby:memory:db;create=true';
ij> prepare ps as 'values coalesce(?,?,1)';
ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)

java.lang.NullPointerException
	at org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumnList.generate(Unknown Source)
	at org.apache.derby.impl.sql.compile.RowResultSetNode.generate(Unknown Source)
	at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(Unknown Source)
	at org.apache.derby.impl.sql.compile.CursorNode.generate(Unknown Source)
	at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.<init>(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.<init>(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.<init>(Unknown Source)
	at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.PrepareStatement(Unknown Source)
	at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)
	at org.apache.derby.tools.ij.main(Unknown Source)",Major,Knut Anders Hatlen,,2013-06-24T09:46:02.000+0000,NullPointerException when using more than one parameter in COALESCE,Closed,bug,Bug
2012-07-23T07:10:21.000+0000,DERBY-5872,Fixed,"I noticed this when I refactored the logical statement classes in DERBY-5868. The isWrapperFor() method forwards calls to the underlying physical statement, but the unwrap() method works purely at the logical level.

For example, if you produce a LogicalPreparedStatement40 instance with this code

        ClientConnectionPoolDataSource ds = new ClientConnectionPoolDataSource();
        ds.setDatabaseName(""testdb"");
        ds.setCreateDatabase(""create"");
        ds.setMaxStatements(10);
        PooledConnection pc = ds.getPooledConnection();
        Connection c = pc.getConnection();
        PreparedStatement ps = c.prepareStatement(""values 1"");

you'll see that

        System.out.println(ps.isWrapperFor(LogicalPreparedStatement40.class));

prints false, telling that ps is not a wrapper for LogicalPreparedStatement40. However, trying to unwrap ps as a LogicalPreparedStatement succeeds:

        LogicalPreparedStatement40 lps = ps.unwrap(LogicalPreparedStatement40.class);

On the other hand

        System.out.println(ps.isWrapperFor(PreparedStatement40.class));

prints true, indicating that ps is a wrapper for PreparedStatement40, but trying to unwrap it as one, fails:

        PreparedStatement40 ps4 = ps.unwrap(PreparedStatement40.class);

Exception in thread ""main"" java.sql.SQLException: Unable to unwrap for 'class org.apache.derby.client.am.PreparedStatement40'
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:108)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)
	at org.apache.derby.client.am.LogicalStatementEntity.unwrap(LogicalStatementEntity.java:258)
	at org.apache.derby.client.am.LogicalPreparedStatement.unwrap(LogicalPreparedStatement.java:57)
	at Test.main(Test.java:37)
Caused by: org.apache.derby.client.am.SqlException: Unable to unwrap for 'class org.apache.derby.client.am.PreparedStatement40'
	... 3 more",Major,Knut Anders Hatlen,,2012-07-21T09:16:17.000+0000,Inconsistency between isWrapperFor() and unwrap() in logical statements,Closed,bug,Bug
2013-11-15T13:23:39.000+0000,DERBY-6411,Fixed,"DERBY-4191 added checks for minimal select privilege in cases where a SELECT query didn't access any actual column in the base table, such as SELECT COUNT(*) FROM USER1.T and SELECT 1 FROM USER1.T. That privilege checking is only done for top-level SELECT statements. It should also be done for subqueries.

Examples of queries where Derby does not currently check for minimal select privileges on the accessed tables (performed as USER2, which has no privileges on any of USER1's tables):

SELECT * FROM (SELECT COUNT(*) FROM USER1.T) S

SELECT 1 FROM USER1.T UNION SELECT 2 FROM USER1.T

INSERT INTO USER2.T SELECT 1 FROM USER1.T

I believe that the above statements should have failed, but currently they succeed.",Major,Knut Anders Hatlen,,2013-11-08T12:47:44.000+0000,Minimal select privilege should be checked in subqueries,Closed,bug,Bug
2013-11-13T18:10:28.000+0000,DERBY-6413,Fixed,"With the recently release IBM jvm 1.6 SR15 update I see the following failures:

1) testTypesInActionStatement(org.apache.derbyTesting.functionTests.tests.lang.TriggerTest)java.sql.SQLException: Java exception: 'Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils): java.security.AccessControlException'.
	at <unknown class>.<unknown method>(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesSetup(TriggerTest.java:958)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypeTest(TriggerTest.java:922)
	at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testTypesInActionStatement(TriggerTest.java:906)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:102)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
Caused by: java.sql.SQLException: Java exception: 'Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils): java.security.AccessControlException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	at <unknown class>.<unknown method>(Unknown Source)
	... 38 more
Caused by: java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils)
	at java.security.AccessController.throwACE(AccessController.java:100)
	at java.security.AccessController.checkPermission(AccessController.java:174)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1539)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse(Unknown Source)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.compile.CreateTriggerNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 32 more
2) XML Type and Operators Suite
java.sql.SQLException: Java exception: 'Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils): java.security.AccessControlException'.
	at <unknown class>.<unknown method>(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertUpdateCount(BaseJDBCTestCase.java:1130)
	at org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest$XMLTestSetup.setUp(XMLTypeAndOpsTest.java:2692)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
Caused by: java.sql.SQLException: Java exception: 'Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils): java.security.AccessControlException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	at <unknown class>.<unknown method>(Unknown Source)
	... 25 more
Caused by: java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils)
	at java.security.AccessController.throwACE(AccessController.java:100)
	at java.security.AccessController.checkPermission(AccessController.java:174)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1539)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse(Unknown Source)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 19 more
3) XML Binding Suitejava.sql.SQLException: Java exception: 'Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils): java.security.AccessControlException'.
	at <unknown class>.<unknown method>(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)
	at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derbyTesting.junit.XML.insertFile(XML.java:180)
	at org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest$XBindTestSetup.setUp(XMLBindingTest.java:291)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Java exception: 'Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils): java.security.AccessControlException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	at <unknown class>.<unknown method>(Unknown Source)
	... 31 more
Caused by: java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.xml.utils)
	at java.security.AccessController.throwACE(AccessController.java:100)
	at java.security.AccessController.checkPermission(AccessController.java:174)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1539)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:643)
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:73)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:135)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse(Unknown Source)
	at org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 25 more

",Major,Myrna van Lunteren,,2013-11-11T23:30:48.000+0000,"test failure in XML tests, TriggerTests and BooleanValuesTest with ibm 1.6 sr 15 in 10.7 and earlier",Closed,bug,Bug
2012-04-27T07:21:33.000+0000,DERBY-5723,Fixed,Its tearDown() method should call super.tearDown() to free resources.,Major,Knut Anders Hatlen,,2012-04-25T11:54:31.000+0000,LongColumnTest doesn't call super.tearDown(),Closed,bug,Bug
2012-04-25T11:25:02.000+0000,DERBY-5719,Fixed,"UniqueConstraintMultiThreadedTest has a tearDown() method that doesn't call super.tearDown().

It also keeps a DataSource in an instance variable and doesn't appear to null out the reference to it on completion.",Major,Knut Anders Hatlen,,2012-04-24T14:36:59.000+0000,UniqueConstraintMultiThreadedTest doesn't call super.tearDown(),Closed,bug,Bug
2012-04-25T11:26:17.000+0000,DERBY-5715,Fixed,"InbetweenTest keeps connections, statements and result sets in instance variables, but never clears the variables, so they are kept forever.",Major,Knut Anders Hatlen,,2012-04-24T14:09:37.000+0000,InbetweenTest holds on to resources after completion,Closed,bug,Bug
2012-04-25T11:23:37.000+0000,DERBY-5714,Fixed,"ColumnDefaultsTest keeps connections, statements and result sets in instance variables, but never clears the variables, so they are kept forever.",Major,Knut Anders Hatlen,,2012-04-24T13:56:42.000+0000,ColumnDefaultsTest holds on to resources after completion,Closed,bug,Bug
2012-04-25T11:24:14.000+0000,DERBY-5718,Fixed,"UniqueConstraintSetNullTest calls super.tearDown() first in its tearDown() method. After that, it opens a new connection and does some more cleanup. This connection is not closed or nulled out. If super.tearDown() had been called last, it would have been cleaned up correctly.",Major,Knut Anders Hatlen,,2012-04-24T14:23:32.000+0000,UniqueConstraintSetNullTest calls super.tearDown() too early,Closed,bug,Bug
2012-04-27T07:20:08.000+0000,DERBY-5722,Fixed,Its tearDown() method should call super.tearDown() to free resources.,Major,Knut Anders Hatlen,,2012-04-25T11:51:42.000+0000,InternationalConnectTest forgets to call super.tearDown(),Closed,bug,Bug
2012-04-25T11:20:07.000+0000,DERBY-5705,Fixed,"Some decorators used to test authorization don't close and null out references to Connection objects when they have completed. Since these tests often create/boot single-use databases, and the Connection objects have references to the database instance and, directly or indirectly, many of its modules, this prevents much garbage from being removed from the heap after the tests have completed and shut down their single-use databases. We should close the default connection and clear the reference to it when tearing down these decorators, so the space is released for subsequent tests to use.

This problem affects decorators returned by the following methods:

DatabasePropertyTestSetup.builtinAuthenticationNoTeardown()
TestConfiguration.sqlAuthorizationDecorator()
TestConfiguration.sqlAuthorizationDecoratorSingleUse()

These methods return modified versions of DatabasePropertyTestSetup where the tearDown() method is a no-op.",Major,Knut Anders Hatlen,,2012-04-24T08:55:46.000+0000,Authorization decorators don't null out connections when done,Closed,bug,Bug
2012-04-25T11:22:16.000+0000,DERBY-5713,Fixed,"AlterTableTest keeps connections, statements and result sets in instance variables, but never clears the variables, so they are kept forever.",Major,Knut Anders Hatlen,,2012-04-24T13:30:00.000+0000,AlterTableTest holds on to resources after completion,Closed,bug,Bug
2012-04-27T07:22:33.000+0000,DERBY-5725,Fixed,None,Major,Knut Anders Hatlen,,2012-04-25T12:20:57.000+0000,ErrorStreamTest doesn't call super.tearDown(),Closed,bug,Bug
2012-04-25T06:15:53.000+0000,DERBY-5709,Fixed,ResultSetFromPreparedStatementTest keeps references to non-default connections in the fields c2 and c3. c2 is closed and nulled out in tearDown(). c3 is only closed. It should be nulled out too in order to allow gc of resources after test completion.,Major,Knut Anders Hatlen,,2012-04-24T12:31:15.000+0000,ResultSetFromPreparedStatementTest keeps references to non-default connections,Closed,bug,Bug
2012-04-25T11:20:55.000+0000,DERBY-5708,Fixed,"The simpleThread test, which is run by LangHarnessJavaTest, stores its connection in a static field. It doesn't close the connection, or clear the static field, before returning. So the connection is left open for the rest of the test run (potentially for the entire duration of suites.All).",Major,Knut Anders Hatlen,,2012-04-24T12:14:16.000+0000,simpleThread test doesn't release connection,Closed,bug,Bug
2012-04-27T07:22:03.000+0000,DERBY-5724,Fixed,"EncryptionKeyTest has this code to clean up the connection:

        if (con != null && !con.isClosed()) {
            con.rollback();
            con.close();
            con = null;
        }

If the connection is already closed, it won't null out the reference. It should set con to null unconditionally.",Major,Knut Anders Hatlen,,2012-04-25T11:57:09.000+0000,EncryptionKeyTest sometimes keeps reference to connection,Closed,bug,Bug
2012-04-25T11:21:39.000+0000,DERBY-5712,Fixed,"CheckConstraintTest keeps connections, statements and result sets in instance variables, but never clears the variables, so they are kept forever.",Major,Knut Anders Hatlen,,2012-04-24T13:10:04.000+0000,CheckConstraintTest holds on to resources after completion,Closed,bug,Bug
2012-04-25T05:58:43.000+0000,DERBY-5711,Fixed,"NullsTest has the following tearDown() method:

    public void tearDown() throws SQLException{
        getConnection().setAutoCommit(true);
    }

Since it doesn't call super.tearDown(), it doesn't release connections and statements.",Major,Knut Anders Hatlen,,2012-04-24T12:55:53.000+0000,NullsTest doesn't call super.tearDown(),Closed,bug,Bug
2012-04-25T06:01:47.000+0000,DERBY-5710,Fixed,"BigDataTest's tearDown() method doesn't call super.tearDown(), causing it to leave statements and connections open and not eligible for gc.",Major,Knut Anders Hatlen,,2012-04-24T12:39:17.000+0000,BigDataTest.tearDown() doesn't call super.tearDown(),Closed,bug,Bug
2012-04-27T07:20:56.000+0000,DERBY-5721,Fixed,ParameterMappingTest.tearDown() should call super.tearDown() to release connections/statements.,Major,Knut Anders Hatlen,,2012-04-25T11:45:46.000+0000,ParameterMappingTest lacks call to super.tearDown(),Closed,bug,Bug
2012-04-25T11:12:07.000+0000,DERBY-5717,Fixed,"The test cases in TableFunctionTest store a DatabaseMetaData instance in an instance variable. The DatabaseMetaData instance references the default connection, and the connection can therefore not be gc'ed after the test has completed.",Major,Knut Anders Hatlen,,2012-04-24T14:19:42.000+0000,TableFunctionTest keeps reference to connection after completion,Closed,bug,Bug
2012-04-25T11:26:48.000+0000,DERBY-5716,Fixed,"TimestampArithTest keeps references to statements in static fields, but never closes them or clears the fields.",Major,Knut Anders Hatlen,,2012-04-24T14:15:41.000+0000,TimestampArithTest keeps references to statements after completion,Closed,bug,Bug
2012-04-25T11:25:31.000+0000,DERBY-5720,Fixed,"    public void tearDown() throws SQLException {
        dropTable(""t1"");
        dropTable(""t2"");
    }

Should call super.tearDown() to close and release connection and statements.",Major,Knut Anders Hatlen,,2012-04-24T14:57:38.000+0000,UngroupedAggregatesNegativeTest doesn't call super.tearDown(),Closed,bug,Bug
2013-01-11T09:22:29.000+0000,DERBY-6038,Fixed,"Seen intermittently after LangProcedureTest was enabled:

1) testDynamicResultSets(org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest)java.sql.SQLException: Operation 'DROP TABLE' cannot be performed on object 'DELLATER3' because there is an open ResultSet dependent on that object.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2400)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559)
	at org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testDynamicResultSets(LangProcedureTest.java:976)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Operation 'DROP TABLE' cannot be performed on object 'DELLATER3' because there is an open ResultSet dependent on that object.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)
	... 47 more
Caused by: ERROR X0X95: Operation 'DROP TABLE' cannot be performed on object 'DELLATER3' because there is an open ResultSet dependent on that object.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:295)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.verifyNoOpenResultSets(GenericLanguageConnectionContext.java:2146)
	at org.apache.derby.impl.sql.GenericPreparedStatement.prepareToInvalidate(GenericPreparedStatement.java:778)
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(BasicDependencyManager.java:437)
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.invalidateFor(BasicDependencyManager.java:298)
	at org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(DropTableConstantAction.java:265)
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:61)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:452)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:333)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)
	... 41 more",Major,Knut Anders Hatlen,,2013-01-10T09:16:20.000+0000,Intermittent failure in LangProcedureTest: cannot drop table because of open ResultSet,Closed,bug,Bug
2011-12-09T21:55:07.000+0000,DERBY-5526,Fixed,"I have very few details yet, but  user upgrading from 10.5 to 10.8.2  reports this error in one of their tests  creating a database.

Caused by: java.sql.SQLException: Failed to create database 'clientdb', see the next exception for details.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 71 more
Caused by: java.sql.SQLException: The database directory 'C:\cygwin\home\debugfat\clientdb' exists. However, it does not contain the expected 'service.properties' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	... 68 more
Caused by: ERROR XBM0A: The database directory 'C:\cygwin\home\debugfat\clientdb' exists. However, it does not contain the expected 'service.properties' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.vetService(Unknown Source)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.access$600(Unknown Source)
	at org.apache.derby.impl.services.monitor.StorageFactoryService$9.run(Unknown Source)
	at java.security.AccessController.doPrivileged(AccessController.java:254)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.createServiceRoot(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(Unknown Source)
	at org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Unknown Source)
	... 68 more
caused by: ERROR XBM0A: The database directory 'C:\cygwin\home\debugfat\clientdb' exists. However, it does not contain the expected 'service.properties' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.vetService(Unknown Source)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.access$600(Unknown Source)
	at org.apache.derby.impl.services.monitor.StorageFactoryService$9.run(Unknown Source)
	at java.security.AccessController.doPrivileged(AccessController.java:254)
	at org.apache.derby.impl.services.monitor.StorageFactoryService.createServiceRoot(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)
	at org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(Unknown Source)
	at org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Unknown Source)
	... 68 more

DERBY-4589 is where vetService was added, but I am not sure what has changed from 10.5.    I don't see any release note associated with DERBY-4589.  I will test an existing database scenario with 10.5 vs 10.8., vetService just checks that service.properties exists.


       Verify that the service directory looks ok before objecting that the database
       already exists.
    */
    private void    vetService( StorageFactory storageFactory, String serviceName ) throws StandardException
    {
        // check for existence of service.properties descriptor file
        StorageFile    service_properties = storageFactory.newStorageFile( PersistentService.PROPERTIES_NAME );

        if ( !service_properties.exists() )
        {
            throw StandardException.newException
                ( SQLState.SERVICE_PROPERTIES_MISSING, serviceName, PersistentService.PROPERTIES_NAME );
        }
    }",Major,Katherine Marsden,,2011-12-08T18:07:01.000+0000,"on upgrade from 10.5 to 10.8.2 , getting  ERROR XBM0A: The database directory 'C:\cygwin\home\debugfat\clientdb' exists. However, it does not contain the expected 'service.properties' file.",Closed,bug,Bug
2012-05-31T18:45:31.000+0000,DERBY-5780,Fixed,"Mamta has run some performance tests on windows, with (Enable write caching on the device AND Turn off Windows write-cache buffer flushing on the device) that shows 
performance degredation of identity columns.  See results posted in DERBY-5471, copied here:
Rick, first of all, I want to apologize for not responding to this jira sooner. I allowed other jiras to prioritize over this but I finally got around to running a long set of tests and here are the results of them. I have truned off debugging prints in these test runs.

I ran lots of test as explained below on released 10.8.2.2 jars and top of the trunk(revision 1341151) insane jars with write caching off and the test results between the 2 set of jars do vary. I have Windows7 service pack1 laptop(Intel(R) Core(TM) i7-2720QM CPU @2.20GHz, 8GB RAM) with IBM jdk 1.6

I chose to run with preallocation sizes of 5 and 20 because I think the default preallocation for 10.8 is 5 and for trunk is 20.

Variations of test(with 3 test runs of each on 10.8 and trunk jars)
1)Identity column 10 threads with 20 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=20 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=1 -gen b2b -threads 10 	

	10.8 Runs
Test run 1)
Number of transactions: 10630
Average throughput (tx/s):      177.16666666666666
15427 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 10432
Average throughput (tx/s):      173.86376893718437
15282 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 10377
Average throughput (tx/s):      172.89524983755143
14908 successful transactions, including warmup phase.	

	Trunk Runs
Test run 1)
Number of transactions: 3002
Average throughput (tx/s):      50.021661612290465
4542 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 2924
Average throughput (tx/s):      48.733333333333334
4370 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 2547
Average throughput (tx/s):      42.45
4023 successful transactions, including warmup phase.

2)Identity column 10 threads with 5 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=5 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=1 -gen b2b -threads 10 
	10.8 Runs
Test run 1)
Number of transactions: 10677
Average throughput (tx/s):      177.92627649646712
15222 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 11188
Average throughput (tx/s):      186.46355894068432
15744 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 10571
Average throughput (tx/s):      176.18039699338345
15012 successful transactions, including warmup phase.

	Trunk Runs
Test run 1)
Number of transactions: 2453
Average throughput (tx/s):      40.88333333333333
3716 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 2531
Average throughput (tx/s):      42.18333333333333
3668 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 3076
Average throughput (tx/s):      51.266666666666666
4615 successful transactions, including warmup phase.


3)Identity column 1 thread with 20 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=20 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=1 -gen b2b -threads 1 
	10.8 Runs
Test run 1)
Number of transactions: 5865
Average throughput (tx/s):      97.75
8773 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 5753
Average throughput (tx/s):      95.88173530441159
8359 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 6326
Average throughput (tx/s):      105.43333333333334
9231 successful transactions, including warmup phase.
	Trunk Runs
Test run 1)
Number of transactions: 526
Average throughput (tx/s):      8.766666666666667
801 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 546
Average throughput (tx/s):      9.1
831 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 572
Average throughput (tx/s):      9.533174447092549
841 successful transactions, including warmup phase.



4)Identity column 1 thread with 5 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=5 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=1 -gen b2b -threads 1 
	10.8 Runs
Test run 1)
Number of transactions: 5948
Average throughput (tx/s):      99.13333333333334
8799 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 5658
Average throughput (tx/s):      94.3
8337 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 6314
Average throughput (tx/s):      105.21755070072822
9197 successful transactions, including warmup phase.
	Trunk Runs
Test run 1)
Number of transactions: 470
Average throughput (tx/s):      7.833202779953668
737 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 548
Average throughput (tx/s):      9.133333333333333
814 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 559
Average throughput (tx/s):      9.315424610051993
851 successful transactions, including warmup phase.



5)Sequence column 10 threads with 20 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=20 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=0 -gen b2b -threads 10 
	10.8 Runs
Test run 1)
Number of transactions: 20978
Average throughput (tx/s):      349.6275062082299
31469 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 20496
Average throughput (tx/s):      341.6
30196 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 17433
Average throughput (tx/s):      290.545157580707
24772 successful transactions, including warmup phase.
	Trunk Runs
Test run 1)
Number of transactions: 470
Average throughput (tx/s):      7.833202779953668
737 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 548
Average throughput (tx/s):      9.133333333333333
814 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 559
Average throughput (tx/s):      9.315424610051993
851 successful transactions, including warmup phase.


6)Sequence column 10 threads with 5 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=5 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=0 -gen b2b -threads 10 
	10.8 Runs
Test run 1)
Number of transactions: 19927
Average throughput (tx/s):      332.11113148114197
30250 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 21048
Average throughput (tx/s):      350.8
31331 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 20707
Average throughput (tx/s):      345.1166666666667
30251 successful transactions, including warmup phase.
	Trunk Runs
Test run 1)
Number of transactions: 7038
Average throughput (tx/s):      117.29804503258279
13041 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 10129
Average throughput (tx/s):      168.8138531024483
15210 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 13775
Average throughput (tx/s):      229.58333333333334
19609 successful transactions, including warmup phase.




7)Sequence column 1 thread with 20 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=20 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=0 -gen b2b -threads 1
	10.8 Runs
Test run 1)
Number of transactions: 12989
Average throughput (tx/s):      216.47972533791105
19048 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 12521
Average throughput (tx/s):      208.68333333333334
18560 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 11970
Average throughput (tx/s):      199.5
17763 successful transactions, including warmup phase.

	Trunk Runs
Test run 1)
Number of transactions: 6853
Average throughput (tx/s):      114.21476308728188
10286 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 7277
Average throughput (tx/s):      121.2813119781337
10733 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 7293
Average throughput (tx/s):      121.55
10772 successful transactions, including warmup phase.


8)Sequence column 1 thread with 5 preallocation
java -Dderby.system.home=$derbyHome -Dderby.language.sequence.preallocator=5 org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=0,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=0 -gen b2b -threads 1
	10.8 Runs
Test run 1)
Number of transactions: 12059
Average throughput (tx/s):      200.93979637745156
17215 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 11071
Average throughput (tx/s):      184.51359144014268
16884 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 12073
Average throughput (tx/s):      201.21331311144814
17489 successful transactions, including warmup phase.

	Trunk Runs
Test run 1)
Number of transactions: 2479
Average throughput (tx/s):      41.31597806703222
3673 successful transactions, including warmup phase.
Test run 2)
Number of transactions: 2657
Average throughput (tx/s):      44.2825952900785
3921 successful transactions, including warmup phase.
Test run 3)
Number of transactions: 2518
Average throughput (tx/s):      41.96596723387943
3698 successful transactions, including warmup phase.

                
> Stress test for identity columns and sequence seem to be taking longer on trunk compared to 10.8.2.2 RC3
> --------------------------------------------------------------------------------------------------------
>
>                 Key: DERBY-5471
>                 URL: https://issues.apache.org/jira/browse/DERBY-5471
>             Project: Derby
>          Issue Type: Task
>          Components: Test
>    Affects Versions: 10.9.1.0
>         Environment: Windows XP version 2.18
> Genuine Intel(R) CPU T2600 dual core @2.16GHz 2.00GB of RAM 
> $ java -version
> java version ""1.6.0""
> Java(TM) SE Runtime Environment (build pwi3260sr9fp1-20110208_03(SR9 FP1))
> IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260sr9-201102
> 03_74623 (JIT enabled, AOT enabled)
> J9VM - 20110203_074623
> JIT  - r9_20101028_17488ifx3
> GC   - 20101027_AA)
> JCL  - 20110203_01
>            Reporter: Mamta A. Satoor
>         Attachments: 5471-performance.html
>
>
> I have been trying to run org.apache.derbyTesting.perf.clients.Runner (which provides ways to stress test sequence generator and identity columns) on trunk and 10.8.2.2 RC3 to compare the performance and I find that it takes almost double the time for the tests to finish on trunk. Additionally, the identity column test consistently ran into lock timeouts on trunk. I am running with insane jars on trunk and 10.8.2.2 RC3. The test in question is not in official jars for the release candidate so I manually copied them to 10.8.2.2 RC3 environment during my test(basically copied the entire org.apache.derbyTesting.perf.clients.Runner directory from trunk to 10.8.2.2 RC3 environment).
> Command to do sequence stress testing is as follows
> java org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=1,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=0 -gen b2b -threads 10
> Command to do identity column stress testing is as follows
> time java org.apache.derbyTesting.perf.clients.Runner -driver org.apache.derby.jdbc.EmbeddedDriver -init -load seq_gen -load_opts debugging=1,numberOfGenerators=5,tablesPerGenerator=10,insertsPerTransaction=100,identityTest=1 -gen b2b -threads 10
> An average run on 10.8.2.2 RC3 for sequence stress test is about a minute and 46 secs. On trunk, on an average it takes 2 and half minutes
> An average run on 10.8.2.2 RC3 for identity stress test is about a minute and 50 secs. On trunk, on an average it takes 3minsutes and 30 secs. Also, on trunk, this test runs into lock timeouts.
> I was wondering if this is the right behavior. The performance should be better in trunk because of pre-allocation of range for sequences and identity columns(which defaults to 20) but unless I have missed something in my tests, the results don't show the performance improvement.
",Blocker,Mike Matrigali,,2012-05-23T21:26:04.000+0000,identity column performance has degredated,Closed,bug,Bug
2012-11-19T13:17:19.000+0000,DERBY-5998,Fixed,"The replication code uses the javax.net.ServerSocketFactory class, which is not part of the core API defined by Foundation Profile 1.1. It is however part of an optional security package (JSSE) defined by the same specification, so it may or may not be available on the CDC platforms that Derby runs on.

Running the replication tests on phoneME without said optional package, results in NoClassDefFoundError:

Caused by: java.lang.NoClassDefFoundError: javax.net.SocketFactory
	at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Unknown Source)
	at java.security.AccessController.doPrivileged(Unknown Source)
	at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source)
	at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source)
	at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source)
	at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source)
	at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source)
	at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source)

We might fix this by rewriting the replication code so that it's not dependent on optional packages on CDC. However, there have not been any user requests for this functionality on platforms without that package, as far as I'm aware, so I suggest we just skip the replication tests for now if that package is missing.

The tests I've run on Oracle Java Micro Edition Embedded Client 1.1 (OJEC) have not revealed this problem, as OJEC comes with the optional JSSE package (it's version output lists ""JSSE JSR219"" under the components section). And since the reports from the weme 6.2 test runs don't show this failure, I think it's included there as well.",Minor,Knut Anders Hatlen,,2012-11-15T09:28:03.000+0000,Replication tests fail on CDC platforms without optional JSSE package,Closed,bug,Bug
2012-03-13T17:29:24.000+0000,DERBY-5647,Fixed,"The DBO's password cannot expire. Still, NATIVE warns that the password is about to expire.

ij> connect 'jdbc:derby:authdb;create=true;user=admin';
ij> call syscs_util.syscs_set_database_property('derby.authentication.native.passwordLifetimeMillis', '100');
0 rows inserted/updated/deleted
ij> call syscs_util.syscs_create_user('ADMIN', '%*$');
0 rows inserted/updated/deleted
ij> call syscs_util.syscs_set_database_property('derby.authentication.provider', 'NATIVE::LOCAL');
0 rows inserted/updated/deleted
ij> connect 'jdbc:derby:authdb;shutdown=true';
ERROR 08006: Database 'authdb' shutdown.
ij> connect 'jdbc:derby:authdb;user=admin;password=%*$';
WARNING 01J15: Your password will expire in 0 day(s). Please use the SYSCS_UTIL.SYSCS_MODIFY_PASSWORD  procedure to change your password.",Minor,Richard N. Hillegas,,2012-03-12T14:23:06.000+0000,NATIVE warns about password expiry for DBO,Closed,bug,Bug
2013-04-15T16:53:29.000+0000,DERBY-6178,Fixed,"IBM lab nightly regression testing is seeing numerious intermittent errors while running the
AutoloadTest.   This regression testing often runs multiple runs of Suites.all on the same machine at
the same time and uses the -Dderby.tests.basePort=3500 option to the tests to insure network
server is created on different ports and don't intefere.

I think the following code in this test that spawn a process is not going pass that port info onto the network
server startup and then lead to problems:

    /**
     * Run {@code AutoloadTest} in a separate JVM.
     */
    public void spawnProcess() throws Exception {
        String[] cmd = {
            ""junit.textui.TestRunner"", spawnedTestClass.getName()
        };

        SpawnedProcess proc =
            new SpawnedProcess(execJavaCmd(cmd), spawnedTestClass.getName());

        if (proc.complete() != 0) {
            fail(proc.getFailMessage(""Test process failed""));
        }
    }
",Critical,Mike Matrigali,,2013-04-12T20:48:06.000+0000,"AutoloadTest does not proprogate original jvm -D flags to spawned JVM, leading to LAB regression test failures",Closed,bug,Bug
2012-04-02T17:23:23.000+0000,DERBY-5677,Fixed,"There is some logic in the test harness to allow test runs without derbynet.jar on the classpath (to test the embedded engine only). When I tried this on head of trunk, it failed with java.lang.ClassNotFoundException: org.apache.derby.drda.NetworkServerControl when setting up the test suites, so no tests started.",Major,Knut Anders Hatlen,,2012-03-29T08:06:48.000+0000,ClassNotFoundException when running suites.All without derbynet.jar,Closed,bug,Bug
2012-04-03T05:18:57.000+0000,DERBY-5682,Fixed,"I saw two failures in ProtocolTest when running them on a JVM where support for encodings not mandated by the Java platform specification had been removed.

There were 2 failures:
1) protocol.tests_1150_1212(org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest)junit.framework.AssertionFailedError: Unsupported encoding MacGreek
	at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:879)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.writeEncodedLDString(ProtocolTest.java:781)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.processCommand(ProtocolTest.java:324)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.processCommands(ProtocolTest.java:230)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.testProtocolSequence(ProtocolTest.java:148)
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
Caused by: java.io.UnsupportedEncodingException: MacGreek
	at java.lang.StringCoding.encode(StringCoding.java:340)
	at java.lang.String.getBytes(String.java:955)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.writeEncodedLDString(ProtocolTest.java:774)
	... 41 more

2) protocol.tests_1213_1243(org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest)junit.framework.AssertionFailedError: Unsupported encoding MacGreek
	at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:879)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.writeEncodedLDString(ProtocolTest.java:781)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.processCommand(ProtocolTest.java:324)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.processCommands(ProtocolTest.java:230)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.testProtocolSequence(ProtocolTest.java:148)
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
Caused by: java.io.UnsupportedEncodingException: MacGreek
	at java.lang.StringCoding.encode(StringCoding.java:340)
	at java.lang.String.getBytes(String.java:955)
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.writeEncodedLDString(ProtocolTest.java:774)
	... 41 more",Minor,Kristian Waagan,,2012-04-01T22:07:57.000+0000,ProtocolTest failures: Unsupported encoding MacGreek,Closed,bug,Bug
2012-04-02T17:24:30.000+0000,DERBY-5678,Fixed,"I tried to run LocalizedDisplayScriptTest on a JVM on which support for extra encodings had been removed, and then it failed like this:

1) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.io.UnsupportedEncodingException: EUC_JP
	at sun.nio.cs.StreamDecoder.forInputStreamReader(StreamDecoder.java:71)
	at java.io.InputStreamReader.<init>(InputStreamReader.java:100)
	at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:86)
	at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:204)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.extensions.TestSetup.run(TestSetup.java:27)

According to the javadoc for java.nio.charset.Charset, JVM implementations are only required to support these encodings: US-ASCII, ISO-8859-1, UTF-8, UTF-16BE, UTF-16LE, UTF-16.

On platforms that don't support EUC_JP, we should skip this test. Or, alternatively, we could change the encoding used in the test to one of the encodings that are supported on all platforms.",Major,Knut Anders Hatlen,,2012-03-29T09:37:23.000+0000,LocalizedDisplayScriptTest fails on JVMs that don't support EUC_JP encoding,Closed,bug,Bug
2013-06-25T13:02:34.000+0000,DERBY-6272,Fixed,"When I run LoginTimeoutTest without derbynet.jar on the classpath, I see this failure:

There was 1 error:
1) client/server LoginTimeoutTestjava.lang.NoClassDefFoundError: org/apache/derby/drda/NetworkServerControl
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.getNetworkServerControl(NetworkServerTestSetup.java:506)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:195)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
Caused by: java.lang.ClassNotFoundException: org.apache.derby.drda.NetworkServerControl
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 11 more

Other tests skip client/server testing if the client or the server is missing. LoginTimeoutTest should do the same.",Minor,Knut Anders Hatlen,,2013-06-24T09:24:03.000+0000,LoginTimeoutTest fails if server is missing,Closed,bug,Bug
2014-08-29T08:24:51.000+0000,DERBY-6717,Fixed,"Rick noted in DERBY-6648 that if you wanted to grant both SystemPermission(""engine"", ""monitor"") and SystemPermission(""engine"", ""usederbyinternals"") to a code base, the following would work:

permission org.apache.derby.security.SystemPermission ""engine"", ""monitor,usederbyinternals"";

However, the following does not work:

permission org.apache.derby.security.SystemPermission ""engine"", ""usederbyinternals"";
permission org.apache.derby.security.SystemPermission ""engine"", ""monitor"";",Major,Knut Anders Hatlen,,2014-08-27T11:36:34.000+0000,Policies with multiple SystemPermissions are not handled well,Closed,bug,Bug
2011-12-22T10:24:15.000+0000,DERBY-5547,Fixed,"There's an intermittent failure in NSSecurityMechanismTest fixture testNetworkServerSecurityMechanism, which I couldn't find was logged separately.

This is the stack trace:
1) testNetworkServerSecurityMechanism(org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest)junit.framework.AssertionFailedError: Timed out waiting for network server to start
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:577)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

The test output printed out this in the console:
(net)derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:197)
	at java.net.SocketInputStream.read(SocketInputStream.java:116)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:625)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:694)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:576)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:618)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.textui.TestRunner.doRun(TestRunner.java:121)
	at junit.textui.TestRunner.start(TestRunner.java:185)
	at junit.textui.TestRunner.main(TestRunner.java:143)
java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:197)
	at java.net.SocketInputStream.read(SocketInputStream.java:116)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:625)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:694)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:576)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:618)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.textui.TestRunner.doRun(TestRunner.java:121)
	at junit.textui.TestRunner.start(TestRunner.java:185)
	at junit.textui.TestRunner.main(TestRunner.java:143)


I've looked through my nightly test records for earlier occurrences on trunk/linux (this apparently has not happened on windows) , and found the following occurrences:
2011-12-02 (ibm15)

Slightly different stack traces were seen in other runs:
2011-09-22 (ibm15)
2011-10-09 (ibm15)
2011-10-21 (ibm15)
2011-10-31 (ibm16)
2011-11-10 (ibm15)
2011-12-12 (ibm16)
2011-12-14 (ibm15)",Major,Knut Anders Hatlen,,2011-12-19T20:16:54.000+0000,NSSecurityMechanismTest fixture testNetworkServerSecurityMechanism fails intermittentlyt,Closed,bug,Bug
2014-10-10T19:25:23.000+0000,DERBY-6755,Fixed,"The following error was seen in the nightly tests. It seems to affect all branches and it appears to be a regression in the latest promoted build of JDK 9 (https://bugs.openjdk.java.net/browse/JDK-8059674). See http://sthjavadb01.se.oracle.com/javadb-testing/request_5597089/

{noformat}
    junit.framework.AssertionFailedError: expected:<3.88335758568738E-309> but was:<3.883357585687384E-309>
	at org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testRadians(MathTrigFunctionsTest.java:585)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
{noformat}",Major,Richard N. Hillegas,,2014-10-03T13:59:36.000+0000,Error in MathTrigFunctionsTest.testRadians ,Closed,bug,Bug
2014-10-07T16:44:41.000+0000,DERBY-6756,Fixed,"After the workaround of DERBY-6739, it seems there is now an intermittent test failure happening wih the 10.10 compatibility suite.

See: 
http://download.java.net/javadesktop/derby/request_5597173
which shows failures with Linux_ia32_jdk6, Linux_jdk8-compact2, and Solaris_amd64_jdk6, but no others. However on this run:
http://download.java.net/javadesktop/derby/request_5597153
shows failures with Linux_amd64_jdk7, Solaris_amd64_jdk6 and Solaris_amd64_jdk7. 
I did not see this failure with the IBM test runs, but those run on fewer platforms.

There's typically 2 failures, and one error.
The error has no information.
Not every failure  has the 2nd failure.
In each case where we have the 2nd failure, it's with the combination client 10.10.2.1 <> server 10.9.1.0) 

The stack trace for the two failures is (from: http://download.java.net/javadesktop/derby/request_5597153/javadb-task-3946133.html, Solaris_amd64_jdk7):

1) org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.unknown 
  junit.framework.AssertionFailedError: server failed to come up:Spawned NetworkServerControl exitCode=1
STDERR:
Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:190)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1031)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:731)
	at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2279)
	at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:351)
Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.util is sealed
	at java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:388)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:417)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:71)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2570)
	at java.lang.Class.getMethod0(Class.java:2813)
	at java.lang.Class.getMethod0(Class.java:2822)
	at java.lang.Class.getMethod(Class.java:1663)
	at org.apache.derby.impl.services.monitor.BaseMonitor.getImplementations(BaseMonitor.java:1177)
	at org.apache.derby.impl.services.monitor.BaseMonitor.getDefaultImplementations(BaseMonitor.java:1239)
	at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:295)
	at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58)
	at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285)
	at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67)
	at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:196)
	at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:92)

	at org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.setUp(VersionedNetworkServerTestSetup.java:109)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
---------------
2) org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.combination(client 10.10.2.1 <> server 10.9.1.0) 
junit.framework.AssertionFailedError: client VM failed: :Spawned combination(client 10.10.2.1 <> server 10.9.1.0) exitCode=1
STDOUT:
E
Time: 0.18
There was 1 error:
1) JDBCDriverTest suitejava.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ040, SQLERRMC: Failed to start database 'wombat' with class loader sun.misc.Launcher$AppClassLoader@67f797, see the next exception for details.::SQLSTATE: XSLANDatabase at /localhome/tendril4.2/work/run/27875377/junit/wombat has an incompatible format with the current version of the software.  The database was created by or upgraded by version 10.10.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:112)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:176)
	at java.sql.DriverManager.getConnection(DriverManager.java:571)
	at java.sql.DriverManager.getConnection(DriverManager.java:187)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1718)
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)
	at org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest$1.setUp(JDBCDriverTest.java:1360)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ040, SQLERRMC: Failed to start database 'wombat' with class loader sun.misc.Launcher$AppClassLoader@67f797, see the next exception for details.::SQLSTATE: XSLANDatabase at /localhome/tendril4.2/work/run/27875377/junit/wombat has an incompatible format with the current version of the software.  The database was created by or upgraded by version 10.10.
	at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2184)
	at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:497)
	at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:390)
	at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:253)
	at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:80)
	at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:849)
	at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:785)
	at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:614)
	at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:409)
	at org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:223)
	at org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:74)
	at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:259)
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:168)

FAILURES!!!
Tests run: 0,  Failures: 0,  Errors: 1


	at org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.testClient(ClientCompatibilityRunControl.java:112)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)


",Major,Richard N. Hillegas,,2014-10-05T18:28:49.000+0000,intermittent test failure with 10.10 in tests.compatibility.VersionedNetworkServerTestSetup and ClientCompatibilityRunControl,Closed,bug,Bug
2014-10-11T16:02:11.000+0000,DERBY-6760,Fixed,"test_01_planCost has failed on trunk and 10.11 for last couple nightly runs. Output from 10.11(revision 1629345) test run is as follows

http://people.apache.org/~myrnavl/derby_test_results/v10_11/linux/testlog/ibm16/1629345-suites.All_diff.txt
1) test_01_planCost(org.apache.derbyTesting.functionTests.tests.lang.XMLOptimizerTraceTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:<XIE0S> but was:<null>
Caused by: java.sql.SQLException: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.
Caused by: java.security.PrivilegedActionException: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.
Caused by: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.
Caused by: ERROR XIE0S: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.
2) test_01_planCost(org.apache.derbyTesting.functionTests.tests.lang.XMLOptimizerTraceTest)junit.framework.AssertionFailedError: The exception's SQL state must be five characters long
Caused by: java.sql.SQLNonTransientConnectionException: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.
Caused by: ERROR null: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.

The failures from trunk are at
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1629352-suites.All_diff.txt
http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm16/1629345-suites.All_diff.txt",Major,Myrna van Lunteren,,2014-10-06T21:45:34.000+0000,test_01_planCost has been failing for last couple nights on trunk and 10.11 with Unexpected SQL state. expected:<XIE0S> but was:<null>,Closed,bug,Bug
2013-04-25T14:36:33.000+0000,DERBY-6201,Fixed,Similar to DERBY-6177.,Minor,Richard N. Hillegas,,2013-04-24T18:07:18.000+0000,Cleanup suspect coding practices in the org.apache.derby.impl.sql.execute.rts package,Closed,bug,Bug
2012-11-05T16:38:28.000+0000,DERBY-5982,Fixed,"Sysinfo can report   JRE - JDBC: ?-?  on java 8 at least on the 10.8 branch, e.g. 
JRE - JDBC: ?-?
.../db-derby-10.8.2.3.1326460/derby.jar] 10.8.2.3 - (1326460)

This method derbyVMLevel() in org.apache.derby.tools.sysinfo.Main has code:

   else if (javaVersion.equals(""1.7"")) {
                // We don't have full JDBC 4.1 support yet, so still print JDBC
                // 4.0
            return ""Java SE 7 - JDBC 4.0"";
            }
            else
                return ""?-?"";

In trunk that code and the output  has been removed completely I think.
",Major,Katherine Marsden,,2012-11-05T06:25:18.000+0000,sysinfo can report  JRE - JDBC: ?-? for java 8 ,Closed,bug,Bug
2012-11-07T00:04:28.000+0000,DERBY-5983,Fixed,"On 10.8 at revision 1406028 the following tests fail with java 8. 
1) testAttributeDriverLevel(org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest)junit.framework.Compari
sonFailure: expected:<Java SE [8] - JDBC 4.0> but was:<Java SE [6] - JDBC 4.0>
        at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.assertStringAttribute(MBeanTest.java:417)
        at org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testAttributeDriverLevel(JDBCMBeanTest.j
ava:112)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:110)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
2) testAttributeDriverLevel(org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest)junit.framework.Compari
sonFailure: expected:<Java SE [8] - JDBC 4.0> but was:<Java SE [6] - JDBC 4.0>
        at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.assertStringAttribute(MBeanTest.java:417)
        at org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testAttributeDriverLevel(JDBCMBeanTest.j
ava:112)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:110)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)

FAILURES!!!
Tests run: 15283,  Failures: 2,  Errors: 0

",Major,Katherine Marsden,,2012-11-06T02:10:43.000+0000,testAttributeDriverLevel(org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest) Failure: expected:<Java SE [8] - JDBC 4.0> but was:<Java SE [6] - JDBC 4.0>,Closed,bug,Bug
2014-08-11T18:10:32.000+0000,DERBY-6697,Fixed,"Some test cases have been failing in the code coverage tests at https://builds.apache.org/job/Derby-JaCoCo/ since Jul 28. The failing tests are:

org.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest.test_6616
org.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest$NoAuthorization.test_6616
org.apache.derbyTesting.unitTests.junit.MissingPermissionsTest.testMissingFilePermission

The first two fail with the following message: SQLJ.INSTALL_JAR should have succeeded: 46001 Exception while accessing jar file using URL 'foo'.

The last one fails with this stack trace:

{noformat}
subprocess run failed: :Spawned MPT exitCode=134
STDERR:
java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/x1/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140806_1917"" ""read"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
	at java.security.AccessController.checkPermission(AccessController.java:559)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.SecurityManager.checkRead(SecurityManager.java:888)
	at java.io.File.exists(File.java:770)
	at java.io.File.mkdirs(File.java:1263)
	at org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.startup(FileOutput.java:46)
	at org.jacoco.agent.rt.internal_9dd1198.Agent.startup(Agent.java:126)
	at org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:56)
	at org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)
	at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)
	at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""shutdownHooks"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
	at java.security.AccessController.checkPermission(AccessController.java:559)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.Runtime.addShutdownHook(Runtime.java:209)
	at org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:57)
	at org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)
	... 6 more

STDOUT:
FATAL ERROR in native method: processing of -javaagent failed
{noformat}",Major,Knut Anders Hatlen,,2014-08-08T09:23:08.000+0000,Failures when running tests with JaCoCo,Closed,bug,Bug
2013-03-07T09:42:35.000+0000,DERBY-6098,Fixed,"I ran suites.All on Java 8 EA compact2 profile and saw that the compatibility tests failed many times with errors like this:

1) JDBCDriverTest suitejava.sql.SQLFeatureNotSupportedException: The DDM object 0x1232 is not supported.  The connection has been terminated.
        at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:92)
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)
        at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:176)
        at java.sql.DriverManager.getConnection(DriverManager.java:591)
        at java.sql.DriverManager.getConnection(DriverManager.java:191)
        at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)
        at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)
        at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)
        at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1687)
        at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)
        at org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest$1.setUp(JDBCDriverTest.java:1360)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: org.apache.derby.client.am.DisconnectException: The DDM object 0x1232 is not supported.  The connection has been terminated.
        at org.apache.derby.client.net.NetConnectionReply.doObjnsprmSemantics(NetConnectionReply.java:2781)
        at org.apache.derby.client.net.NetConnectionReply.parseCommonError(NetConnectionReply.java:420)
        at org.apache.derby.client.net.NetConnectionReply.parseSecurityCheckError(NetConnectionReply.java:376)
        at org.apache.derby.client.net.NetConnectionReply.parseSECCHKreply(NetConnectionReply.java:227)
        at org.apache.derby.client.net.NetConnectionReply.readSecurityCheck(NetConnectionReply.java:72)
        at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:828)
        at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:765)
        at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:594)
        at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:409)
        at org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:223)
        at org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:74)
        at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:259)
        at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:167)
        ... 21 more

It turns out that network servers that lack the fixes for DERBY-5955 cannot load the EmbeddedDriver. More precisely, they cannot load the full JDBC driver, and they end up using the JSR-169 driver, which is not good enough for the network server.

On compact2, we should skip the compatibility test combinations that use servers older than 10.10.",Minor,Knut Anders Hatlen,,2013-03-05T11:11:57.000+0000,Skip compatibility testing of old servers on compact profile 2,Closed,bug,Bug
2013-03-07T13:26:17.000+0000,DERBY-6100,Fixed,"The upgrade tests fail on the compact2 profile because they use data sources to create databases with old Derby versions, and to shut down the old engines after the test. The data sources in Derby versions before 10.10 require JNDI to be present. Since JNDI is not present on compact2, the attempts to obtain data sources fail:

1) 10.0.2.1 Upgrade Phase: CREATE java.lang.NoClassDefFoundError: javax/naming/Referenceable
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.access$100(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.access$100(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Unknown Source)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:162)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:108)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:93)
	at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:47)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp(PhaseChanger.java:93)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.lang.ClassNotFoundException: javax.naming.Referenceable
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	... 107 more",Major,Knut Anders Hatlen,,2013-03-06T14:40:09.000+0000,Upgrade tests fail on compact2,Closed,bug,Bug
2011-11-18T15:57:27.000+0000,DERBY-5502,Fixed,"On my machine, RestrictiveFilePermissionsTest fails on Java 7. The test does not run any test cases on Java 6. In addition, RecoveryTest fails on Java 7 although it passes cleanly on Java 6. The tests fail both when run standalone and when run in the full regression test suite. These are the errors I see:

1) doTestCliServerIsRestrictive(org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest)java.security.AccessControlException: access denied (""java.io.FilePermission"" ""<<ALL FILES>>"" ""execute"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:366)
	at java.security.AccessController.checkPermission(AccessController.java:555)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.SecurityManager.checkExec(SecurityManager.java:799)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1016)
	at java.lang.Runtime.exec(Runtime.java:615)
	at java.lang.Runtime.exec(Runtime.java:483)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup$3.run(NetworkServerTestSetup.java:342)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.startSeparateProcess(NetworkServerTestSetup.java:335)
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:188)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

FAILURES!!!
Tests run: 14,  Failures: 0,  Errors: 1

There was 1 error:
1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryTest)java.security.AccessControlException: access denied (""java.io.FilePermission"" ""<<ALL FILES>>"" ""execute"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:366)
	at java.security.AccessController.checkPermission(AccessController.java:555)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.SecurityManager.checkExec(SecurityManager.java:799)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1016)
	at java.lang.Runtime.exec(Runtime.java:615)
	at java.lang.Runtime.exec(Runtime.java:483)
	at org.apache.derbyTesting.junit.BaseTestCase$8.run(BaseTestCase.java:564)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derbyTesting.junit.BaseTestCase.execJavaCmd(BaseTestCase.java:560)
	at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(BaseTestCase.java:510)
	at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(BaseTestCase.java:864)
	at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBasicRecovery(RecoveryTest.java:89)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)

FAILURES!!!
Tests run: 1,  Failures: 0,  Errors: 1


",Major,None,,2011-11-14T18:25:54.000+0000,RestrictiveFilePermissionsTest and RecoveryTest fail with file permission errors on the OpenJDK 7 preview for Mac OS X,Closed,bug,Bug
2011-11-18T11:25:13.000+0000,DERBY-5504,Fixed,"SecureServerTest, Driver40UnbootedTest and the replication tests fork JVMs by calling Runtime.exec() methods that take the command as a String parameter, not a String[]. This causes problems like the ones seen in DERBY-5490 when there's a space in ${java.home}.

The tests should be rewritten to use the helper method BaseTestCase.execJavaCmd(), which handles this case correctly.",Major,Knut Anders Hatlen,,2011-11-16T13:06:26.000+0000,"SecureServerTest, Driver40UnbootedTest and replication tests not prepared for space in java.home",Closed,bug,Bug
2014-02-19T13:39:34.000+0000,DERBY-6485,Fixed,"We're seeing the following error in the SimpleApp test in the nightly runs:

********* Diff file derbyall/simpledemo/SimpleApp.diff
*** Start: SimpleApp jdk1.7.0_51 derbyall:simpledemo 2014-02-18 22:39:11 ***
2d1
< Loaded the appropriate driver
Test Failed.
*** End:   SimpleApp jdk1.7.0_51 derbyall:simpledemo 2014-02-18 22:39:13 ***
-

We're seeing this in the nightly run for 2014-02-18: http://download.java.net/javadesktop/derby/request_5587731/",Major,Knut Anders Hatlen,,2014-02-19T13:19:29.000+0000,Failure in SimpleApp test,Closed,bug,Bug
2014-08-27T08:11:00.000+0000,DERBY-6715,Fixed,"MissingPermissionsTest has started failing in the [code coverage tests|https://builds.apache.org/job/Derby-JaCoCo/] lately.

{noformat}
subprocess run failed: :Spawned MPT exitCode=134
STDERR:
java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/home/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140825_1759"" ""read"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
	at java.security.AccessController.checkPermission(AccessController.java:559)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.SecurityManager.checkRead(SecurityManager.java:888)
	at java.io.File.exists(File.java:770)
	at java.io.File.mkdirs(File.java:1263)
	at org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.startup(FileOutput.java:46)
	at org.jacoco.agent.rt.internal_9dd1198.Agent.startup(Agent.java:126)
	at org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:56)
	at org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)
	at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)
	at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""shutdownHooks"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
	at java.security.AccessController.checkPermission(AccessController.java:559)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.Runtime.addShutdownHook(Runtime.java:209)
	at org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:57)
	at org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)
	... 6 more

STDOUT:
FATAL ERROR in native method: processing of -javaagent failed
{noformat}",Major,Knut Anders Hatlen,,2014-08-26T10:58:21.000+0000,MissingPermissionsTest fails under JaCoCo,Closed,bug,Bug
2014-08-27T09:16:12.000+0000,DERBY-6716,Fixed,"I noticed two typos in SystemPrivilegesPermissionTest that reduces the test coverage ever so slightly.

1) assertEquivalentPermissions() checks if two permissions, p1 and p2, are equal. One of the checks is supposed to be that p1 implies p2 and p2 implies p1. Instead of checking that both holds, it checks that p1 implies p2 twice.

2) testSystemPermission() does some work to reorder expected actions to match the canonical action order before calling assertEquals(). However, assertEquals() is only called if the actions didn't have to be reordered. The assert could have been called unconditionally.",Trivial,Knut Anders Hatlen,,2014-08-27T09:04:03.000+0000,Minor fixes in SystemPrivilegesPermissionTest,Closed,bug,Bug
2014-07-15T21:34:29.000+0000,DERBY-6661,Fixed,"If you create a table with a deferrable primary key constraint and then run dblook, the recreation ddl does not flag the primary key as deferrable. I suspect that this applies to other kinds of constraints as well.",Major,Richard N. Hillegas,,2014-07-14T18:16:45.000+0000,dblook does not recognize the deferrability of deferrable constraints,Closed,bug,Bug
2014-07-15T20:25:25.000+0000,DERBY-6664,Fixed,"If you modify the repro attached to DERBY-6663 so that the foreign key constraint TREF is INITIALLY DEFERRED, the final insert statement will fail like this:

{noformat}
ij> insert into othertable values 1;
ERROR 42Y07: Schema 'null' does not exist
{noformat}

I think the fix will be similar to DERBY-6663. FKInfo needs to store its schemaName field.",Major,Knut Anders Hatlen,,2014-07-15T14:20:50.000+0000,Schema 'null' does not exist when trigger inserts into table with deferred foreign key,Closed,bug,Bug
2014-07-15T14:25:56.000+0000,DERBY-6663,Fixed,"The following script shows this problem. This is a regression. It does not occur on 10.10.1.1 or 10.10.2.0:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

create table tprim1
(
    keyCol  int not null,
    constraint tprim1 primary key( keyCol )
);

create table tref
(
    refCol  int,
    constraint tref foreign key( refCol ) references tprim1( keyCol )
);

create table othertable( a int );

create trigger inserttrig after insert on othertable
referencing new as new
for each row
  insert into tref values ( new.a );

-- causes an NPE
insert into othertable values ( 1 );
{noformat}

Here is the stack trace:

{noformat}
Mon Jul 14 12:12:34 PDT 2014 Thread[main,5,main] (XID = 197), (SESSIONID = 1), (DATABASE = memory:db), (DRDAID = null), Failed Statement is: insert into ""APP"".""TREF"" values ( CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(1) AS INTEGER)  )
java.lang.NullPointerException
	at org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)
	at org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
Cleanup action completed
Mon Jul 14 12:12:34 PDT 2014 Thread[main,5,main] 
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
Caused by: ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 18 more
Caused by: java.lang.NullPointerException
	at org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)
	at org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 10 more
============= begin nested exception, level (1) ===========
ERROR XJ001: Java exception: ': java.lang.NullPointerException'.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
Caused by: java.lang.NullPointerException
	at org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)
	at org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 10 more
============= end nested exception, level (1) ===========
============= begin nested exception, level (2) ===========
java.lang.NullPointerException
	at org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)
	at org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
{noformat}



",Major,Knut Anders Hatlen,,2014-07-14T19:14:30.000+0000,NPE when a trigger tries to insert into a table with a foreign key,Closed,bug,Bug
2012-05-22T23:47:30.000+0000,DERBY-5776,Fixed,"Since last week the windows nightly tests on trunk show a consistent new failure in derbyall with weme6.2:
------------------------------
*** Start: iepnegativetests_ES jdkWECE J2ME Foundation Specification v1.1 derbyall:i18nTest 2012-05-17 03:09:49 ***
112 del
< ij> --more than one character passed to the delimiters get truncated to one
113 del
< --following one should give error because eventually '\' delimiter 
113a112
> ij> --following one should give error because eventually '\' delimiter 
116 del
<                                  '\a', '\', null) ;
116a115
>                                  '\', '\', null) ;
Test Failed.
------------------------------

See e.g.: 
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1339441-derbyall_diff.txt
This test did not fail the day before:
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-1338969.html

Looks like a forgotten master update resulting from the commit for DERBY-5749
http://svn.apache.org/viewvc?view=revision&revision=1339281

I'll take care of updating the j9 canon.",Major,Myrna van Lunteren,,2012-05-22T17:43:46.000+0000,test failure in iepnegativetests_ES with weme 6.2 (J2ME/CDC) with trunk (10.9 alpha) as of revision 1339441,Closed,bug,Bug
2011-12-17T00:27:14.000+0000,DERBY-5533,Fixed,"stm.executeUpdate(""create table t(i smallint)"");
stm.executeUpdate(""insert into t values 1,2,3,4"");

ResultSet rs = stm.executeQuery(""select i from t"");

rs.next();

try {
    rs.updateInt(1, 100000);
} catch (SQLException e) {
    // client: 22015 vs embedded 22003
}

According to the standard, 22015 should be used for INTERVALs (""interval field overflow""). 22003 seems more correct, the standard uses that for ""numeric value out of range"".
",Minor,Dag H. Wanvik,,2011-12-12T19:04:18.000+0000,Client differs from embedded when rs.updateInt overflows: 22015 vs 22003,Closed,bug,Bug
2012-07-19T20:01:56.000+0000,DERBY-5864,Fixed,"As in:
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-1362330.html

All J2ME tests fail to start with the exception below loading the .derbynet._Suite.
The root cause  java.lang.UnsupportedClassVersionError: JVMCFRE003 bad major version for class=org/apache/derby/drda/NetworkServerControl, offset=6

The derbynet tests do not need to run with J2ME but I think the tests need to be changed to not load derbynet._Suite at all now that network server compiles with the higher version.


Failed to invoke class org.apache.derbyTesting.functionTests.tests.derbynet._Suite
java.lang.reflect.InvocationTargetException
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:205)
	at java.lang.reflect.Method.invoke(Method.java:252)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.invokeSuite(AllPackages.java:176)
	at org.apache.derbyTesting.functionTests.suites.AllPackages.suite(AllPackages.java:63)
	at org.apache.derbyTesting.functionTests.suites.All.suite(All.java:51)
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203)
	at java.lang.reflect.Method.invoke(Method.java:252)
	at junit.runner.BaseTestRunner.getTest(BaseTestRunner.java:126)
	at junit.textui.TestRunner.start(TestRunner.java:184)
	at junit.textui.TestRunner.main(TestRunner.java:143)
Caused by: java.lang.UnsupportedClassVersionError: JVMCFRE003 bad major version; class=org/apache/derby/drda/NetworkServerControl, offset=6
	at java.lang.ClassLoader.defineClassImpl(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:239)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:109)
	at java.net.URLClassLoader.findClassImpl(URLClassLoader.java:1073)
	at java.net.URLClassLoader.findClassImpl(URLClassLoader.java:1078)
	at java.net.URLClassLoader$LoadContext.run(URLClassLoader.java:570)
	at java.security.AccessController.doPrivileged(AccessController.java:227)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:586)
	at com.ibm.oti.vm.URLSystemClassLoader.findClass(URLSystemClassLoader.java:26)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:641)
	at com.ibm.oti.vm.URLAppClassLoader.loadClass(URLAppClassLoader.java:146)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:607)
	at java.lang.Class.forNameImpl(Native Method)
	at java.lang.Class.forName(Class.java:127)
	at org.apache.derbyTesting.junit.SecurityManagerSetup.getURL(SecurityManagerSetup.java:427)
	at org.apache.derbyTesting.junit.Derby.hasCorrectJar(Derby.java:97)
	at org.apache.derbyTesting.junit.Derby.hasServer(Derby.java:60)
	at org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.suite(NetworkServerControlApiTest.java:315)
	at org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite(_Suite.java:49)
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203)
	... 9 more
Failed to invoke suite():java.lang.reflect.InvocationTargetException

I marked critical as it blocks all J2ME tests
",Critical,Knut Anders Hatlen,,2012-07-19T12:56:10.000+0000,weme 6.2 (J2ME) runs fail to start with Failed to invoke class org.apache.derbyTesting.functionTests.tests.derbynet._Suite java.lang.reflect.InvocationTargetException,Closed,bug,Bug
2012-10-25T12:35:16.000+0000,DERBY-5960,Fixed,"If VirtualRandomAccessFile.close() is called more than once, which might happen in code that cleans up after errors, it will throw a NullPointerException. We should make close() idempotent so that it is more robust.",Minor,Knut Anders Hatlen,,2012-10-24T07:29:18.000+0000,VirtualRandomAccessFile.close() is not idempotent,Closed,bug,Bug
2014-01-22T10:50:49.000+0000,DERBY-6457,Fixed,"If you pass a non-ascii username/password combination to a NetworkServerControl API command, such as

  java -jar derbynet.jar shutdown -user Bjørn -password Dæhlie

it will hang forever.

The reason is that NetworkServerControlImpl.writeLDString() writes the length of the string in characters, whereas NetworkServerControlImpl.readLDString() expects the length to be in number of bytes.",Major,Knut Anders Hatlen,,2014-01-20T16:29:28.000+0000,NetworkServerControl API breaks when username or password contains non-ascii characters,Closed,bug,Bug
2013-02-27T13:07:25.000+0000,DERBY-6088,Fixed,"Ca line 233, this construct lacks a ""fail()"":

    // verify that certain SQLTypes are illegal
    for ( int i = 0; i < ILLEGAL_JDBC_TYPES.length; i++ )
    {
        try {
            insert.setObject( 1, null, ILLEGAL_JDBC_TYPES[ i ] );
        }
        catch (SQLException se)
        {
            assertSQLState( UNIMPLEMENTED_FEATURE, se );
        }
    }
",Major,Richard N. Hillegas,,2013-02-22T03:35:27.000+0000,"PreparedStatementTest42 lacks ""fail"" call when operation unexpectedly succeeds",Closed,bug,Bug
2012-01-09T09:19:19.000+0000,DERBY-5568,Fixed,"Saw this failure when running the 10.8.2.2 regression tests on Java 7u4-b06:

1) testBug4810(org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest)junit.framework.AssertionFailedError: Should not hold locks after commit
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.checkLocksForAutoCommitSelect(ResultSetMiscTest.java:695)
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testBug4810(ResultSetMiscTest.java:478)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
        at junit.extensions.TestSetup.run(TestSetup.java:25)
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",Major,Knut Anders Hatlen,,2012-01-05T16:12:45.000+0000,AssertionFailedError: Should not hold locks after commit in ResultSetMiscTest,Closed,bug,Bug
2013-03-06T07:37:58.000+0000,DERBY-6097,Fixed,"If the management test suite is run separately on a platform where JMX is not supported (in this case, a compact profile build of Java 8 EA), the suite() method fails:

java.lang.NoClassDefFoundError: javax/management/ObjectName
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Unknown Source)
	at java.lang.Class.getDeclaredMethods(Unknown Source)
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.suite(MBeanTest.java:72)
	at org.apache.derbyTesting.functionTests.tests.management.JMXTest.suite(JMXTest.java:51)
	at org.apache.derbyTesting.functionTests.tests.management._Suite.suite(_Suite.java:54)
Caused by: java.lang.ClassNotFoundException: javax.management.ObjectName
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)

Instead of failing, it should return an empty test suite if the platform doesn't support JMX.

This is not a problem when running suites.All, as it contains logic to ignore NoClassDefFoundErrors for certain suites.",Minor,Knut Anders Hatlen,,2013-03-05T10:11:52.000+0000,Management test suite fails when JMX is not supported,Closed,bug,Bug
2014-12-11T20:07:54.000+0000,DERBY-6778,Fixed,DERBY-6764(analyze impact of poodle security alert on Derby client - server ssl support) was fixed in 10.12 codeline. The backport of the fix to 10.8(other codelines do not have this issue) has caused SSL related tests to fail on 10.8 codeline with IBM jdk 1.4.2. This jira is created to provide a fix on 10.8 codeline for IBM jdk 1.4.2,Major,Mamta A. Satoor,,2014-12-10T07:35:36.000+0000,SSL tests are failing on 10.8 codeline with IBM jdk 1.4.2 after poodle security backport,Closed,bug,Bug
2014-02-12T11:50:16.000+0000,DERBY-6477,Fixed,"The following query raises an OutOfMemoryError:

if> select a.alias, a.aliastype
from sys.sysaliases a
where a.javaclassname like 'org.apache.derby.catalog.SystemProcedures%';
ERROR XJ001: Java exception: 'Requested array size exceeds VM limit: java.lang.OutOfMemoryError'.",Major,Knut Anders Hatlen,,2014-02-11T02:43:10.000+0000,OutOfMemoryError selecting from SYS.SYSALIASES,Closed,bug,Bug
2013-04-02T04:43:34.000+0000,DERBY-6133,Fixed,"code does 

if (! (columns[0] instanceof Storable))

instead of 

if (! (columns[i] instanceof Storable))",Trivial,David Brosius,,2013-04-01T01:37:39.000+0000,simple array index typo,Closed,bug,Bug
2014-06-12T08:16:20.000+0000,DERBY-6613,Fixed,"{noformat}
1) testPoolingEnabledByCheckingImplementationDetails(org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest)junit.framework.ComparisonFailure: expected:<...calPreparedStatement[]> but was:<...calPreparedStatement[42]>
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.assertClassName(StatementPoolingTest.java:195)
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails(StatementPoolingTest.java:132)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
{noformat}",Major,Knut Anders Hatlen,,2014-06-12T07:54:00.000+0000,StatementPoolingTest fails on JDK 9,Closed,bug,Bug
2014-06-12T19:00:28.000+0000,DERBY-6612,Fixed,"The harness tests fail when attempted run with a VM that identifies itself as 1.9.*.
",Minor,Dag H. Wanvik,,2014-06-11T21:30:40.000+0000,Add code to harness tests to allow running under JDK9 VMs.,Closed,bug,Bug
2014-09-25T08:57:48.000+0000,DERBY-6747,Fixed,"https://db.apache.org/derby/papers/DerbyTut/ij_intro.html has many broken links to manual pages.

Originally reported here: http://mail-archives.apache.org/mod_mbox/db-derby-user/201409.mbox/%3C98B4B199A59C8941B271A86377583AA289D12244@wybcvl-s-53405.europe.shell.com%3E",Major,Knut Anders Hatlen,,2014-09-24T20:45:39.000+0000,Broken links in the ij tutorial,Closed,bug,Bug
2014-06-27T14:10:53.000+0000,DERBY-6640,Fixed,"I can no longer build the Derby javadoc when I am on my company vpn. The following command works fine when I am not on my company vpn:

{noformat}
ant javadoc
{noformat}

However, I see the following error when I run that command while on my company vpn:

{noformat}
/Users/rh161140/derby/mainline/trunk/build.xml:1051: The following error occurred while executing this line:
/Users/rh161140/derby/mainline/trunk/build.xml:1079: java.net.ConnectException: Operation timed out
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:180)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:432)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:527)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:211)
	at sun.net.www.http.HttpClient.New(HttpClient.java:308)
	at sun.net.www.http.HttpClient.New(HttpClient.java:326)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1167)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1103)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:997)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:931)
	at org.apache.tools.ant.taskdefs.Get$GetThread.openConnection(Get.java:660)
	at org.apache.tools.ant.taskdefs.Get$GetThread.get(Get.java:579)
	at org.apache.tools.ant.taskdefs.Get$GetThread.run(Get.java:569)
{noformat}

",Major,None,,2014-06-26T17:12:15.000+0000,Can't build javadoc when on my company vpn,Closed,bug,Bug
2014-06-06T20:04:26.000+0000,DERBY-6606,Fixed,"With ibm jdk 1.6, test_errorcode failed with following exception on trunk on Windows machine. The test failed both for embedded and network server.
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1600553-suites.All_diff.txt

1) test_errorcode(org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest)junit.framework.AssertionFailedError: Unexpected row count, expected: 174, actual: 175
	 expected rows: 
		[[08000, Connection closed by unknown interrupt., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Connection refused : {0}, 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, Database '{0}' shutdown., 45000], [08006, Database '{0}' dropped., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]
ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000]]
	 actual result: 
		[[08000, Connection closed by unknown interrupt., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused : {0}, 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, Database '{0}' dropped., 45000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, Database '{0}' shutdown., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]
ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG4, Unrecoverable internal error encountered while attempting to read low level metadata about the table or index. Please provide your support organization with the following exception information: Failed: arraycopy of embryonic page byte[{0}] to container information byte[{1}]. Values of variables and constants: MAX_BORROWED_SPACE: {2}, BORROWED_SPACE_OFFSET({3}) + BORROWED_SPACE_LENG({4}) = {5}; arraycopylength: {6}; embryonic page {7}., 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000]]
 expected:<174> but was:<175>
	at org.apache.derbyTesting.junit.JDBC.assertRSContains(JDBC.java:1481)
	at org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1395)
	at org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1375)
	at org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode(ErrorCodeTest.java:274)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) test_errorcode(org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest)junit.framework.AssertionFailedError: Unexpected row count, expected: 174, actual: 175
	 expected rows: 
		[[08000, Connection closed by unknown interrupt., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Connection refused : {0}, 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, Database '{0}' shutdown., 45000], [08006, Database '{0}' dropped., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]
ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000]]
	 actual result: 
		[[08000, Connection closed by unknown interrupt., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Connection refused : {0}, 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08006, Database '{0}' dropped., 45000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, Database '{0}' shutdown., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]
ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG4, Unrecoverable internal error encountered while attempting to read low level metadata about the table or index. Please provide your support organization with the following exception information: Failed: arraycopy of embryonic page byte[{0}] to container information byte[{1}]. Values of variables and constants: MAX_BORROWED_SPACE: {2}, BORROWED_SPACE_OFFSET({3}) + BORROWED_SPACE_LENG({4}) = {5}; arraycopylength: {6}; embryonic page {7}., 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000]]
 expected:<174> but was:<175>
	at org.apache.derbyTesting.junit.JDBC.assertRSContains(JDBC.java:1481)
	at org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1395)
	at org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1375)
	at org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode(ErrorCodeTest.java:274)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

",Major,Myrna van Lunteren,,2014-06-06T19:22:04.000+0000,"ErrorCodeTest AssertionFailedError: Unexpected row count, expected: 174, actual: 175",Closed,bug,Bug
2013-01-11T09:55:10.000+0000,DERBY-6039,Fixed,"Seen in the nightly testing: http://download.java.net/javadesktop/derby/javadb-5570895-report/javadb-5570895-3573406-details.html

testDynamicResultSets() needs the table T1, which is created by testSqlProcedures(). If testDynamicResultSets() happens to run before testSqlProcedures(), it will fail because T1 does not exist.",Major,Knut Anders Hatlen,,2013-01-10T12:51:22.000+0000,Intermittent failure in LangProcedureTest.testDynamicResultSets: Table/View 'T1' does not exist.,Closed,bug,Bug
2012-11-14T16:01:59.000+0000,DERBY-5993,Fixed,"The Reference Manual correctly says ""This attribute is meaningful only if used with the network driver."" Then the retrieveMessageText section goes on to show an example using an embedded url: ""jdbc:derby:salesDB;retrieveMessageText=false"". Instead, the example should show a network url, just like the examples for the other attributes which only make sense for network urls: traceDirectory, traceFile, traceFileAppend, traceLevel.",Minor,Camilla Haase,,2012-11-13T15:16:57.000+0000,The Reference Manual shows an embedded url in its example for the client-side-only retrieveMessageText attribute.,Closed,bug,Bug
2014-11-18T22:27:55.000+0000,DERBY-6769,Fixed,"I did a SANE build against a newly created client on trunk and go no errors.
I then did an ant refreshjardriftcheck, and it generated a change to 
sane.derbyTesting.jar.lastcontents to be checked in, it is included at end of description.

There seems to be 2 problems here:
1) sane.derbyTesting.jar.lastcontents checked in version is likely out of date and needs to be updated.
2) The build should notice it is out of date and fail.

I was led to this as I am working on a change that did add files to derby.jar
but was confused that it was generating changes for derbyTesting.jar in my own development client.  This is why I tried it on a clean client and ran refresh even though build was clean.",Minor,Myrna van Lunteren,,2014-11-13T00:10:35.000+0000,"sane.derbyTesting.jar.lastcontents can be ""out of date"" but no build error results",Closed,bug,Bug
2013-09-23T18:36:52.000+0000,DERBY-6349,Fixed,"Seeing this test failure because of an intentional security change in TimeZone.setDefault().  Therefore need to wrap Timezone.setDefault in a priv block in the test.

1) DaylightSavingTestjava.security.AccessControlException: 
Access denied (""java.util.PropertyPermission"" ""user.timezone"" 
""write"")
        at 
java.security.AccessController.throwACE(AccessController.java:10
0)
        at <unknown class>.<unknown method>(Unknown 
Source)
        at 
java.lang.SecurityManager.checkPermission(SecurityManager.java:5
49)
        at java.util.TimeZone.hasPermission(TimeZone.java:756)
        at java.util.TimeZone.setDefault(TimeZone.java:778)
        at 
org.apache.derbyTesting.junit.TimeZoneTestSetup.setUp(TimeZoneTe
stSetup.java:59)
        at 
junit.extensions.TestSetup$1.protect(TestSetup.java:22)
        at junit.extensions.TestSetup.run(TestSetup.java:27)
        at 
org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.ja
va:57)
",Major,Katherine Marsden,,2013-09-18T18:07:58.000+0000,DaylightSavingTest - java.security.AccessControlException,Closed,bug,Bug
2012-05-10T08:15:13.000+0000,DERBY-5753,Fixed,"Failed for ibm15 jvm, windows against trunk build 1335883

http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1335883-suites.All_diff.txt

There was 1 failure:
1) testLeak(org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test)junit.framework.AssertionFailedError: Process failed:Spawned DERBY-5730 exitCode=1
STDERR:
Exception in thread ""main"" java.sql.SQLException: No suitable driver
	at java.sql.DriverManager.getConnection(DriverManager.java:592)
	at java.sql.DriverManager.getConnection(DriverManager.java:218)
	at org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test.main(Derby5730Test.java:112)

	at org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test.testLeak(Derby5730Test.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)

FAILURES!!!
Tests run: 13645,  Failures: 1,  Errors: 0",Major,Knut Anders Hatlen,,2012-05-09T16:40:51.000+0000,nighly regression test failure in testLeak(org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test) process failed,Closed,bug,Bug
2013-02-24T03:51:16.000+0000,DERBY-6087,Fixed,We set these library properties to get better compile time checking of old level source using too new  library contents. We should be able to build the Javadoc without unsetting them. It works with a JDK 1.7.,Minor,Dag H. Wanvik,,2013-02-22T03:17:23.000+0000,"Can't build Javadoc with JDK 1.8 if explicit j15lib, j16lib and j17lib paths are set",Closed,bug,Bug
2014-07-16T14:58:20.000+0000,DERBY-6667,Fixed,"There is an extra ""referencing"" in the error message when committing a violated deferred foreign key.

{noformat}
ij version 10.11
ij> connect 'jdbc:derby:memory:db;create=true';
ij> create table tprim
(
  a int primary key
);
0 rows inserted/updated/deleted
ij> create table tref
(
  a int,
  constraint tref foreign key( a ) references tprim( a ) initially deferred
);
0 rows inserted/updated/deleted
ij> insert into tprim values ( 1 );
1 row inserted/updated/deleted
ij> autocommit off;
ij> insert into tref values ( 1 );
1 row inserted/updated/deleted
ij> delete from tprim;
1 row inserted/updated/deleted
ij> commit;
ERROR 23516: The transaction was aborted because of a deferred constraint violation: Foreign key 'TREF' defined on ""APP"".""TPRIM"" referencing referencing constraint 'SQL140716063201410' defined on ""APP"".""TPRIM"", key '(1)'.
{noformat}
",Trivial,Dimuthu Wickramanayake,,2014-07-16T13:37:19.000+0000,"Redundant word ""referencing"" in error message for deferred constraints.",Closed,bug,Bug
2014-07-17T12:42:10.000+0000,DERBY-6668,Fixed,"If you truncate a table which is referenced by a deferred foreign key, orphaned tuples are left in the foreign table. That is, the foreign key is violated but no exception is raised.

Since table truncation involves changing conglomerate ids, this may be another case of derby-6665. Or this may be a new bug.

The following script shows this behavior:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

create table tunique
(
  a int not null unique
);

create table tref
(
  a int references tunique( a ) initially deferred
);

insert into tunique values ( 1 );
insert into tref values ( 1 );

truncate table tunique;

-- the unique table is empty
select * from tunique;

-- but the table which references it has a row
select * from tref;
{noformat}
",Major,Richard N. Hillegas,,2014-07-16T19:27:42.000+0000,Truncating a table may silently violate a deferred foreign key.,Closed,bug,Bug
2013-10-19T03:15:16.000+0000,DERBY-6382,Fixed,".The reproduction attached to DERBY-5234, DbCompressErrorTester  shows the error below.  1335570 and 1335677 were committed to trunk and ported to 10.8 branch at subversion revision 1337258 and fix this issue. Unfortunately it did not fix the issue the reporting user was experiencing, so DERBY-5234 was closed CannotReproduce. Creating this issue to make sure the fixed issue is tracked separately as fixed.

java DbCompressErrorTester
Loading database driver
iterations=333300

inserted: 33330/333300
inserted: 66660/333300
inserted: 99990/333300
inserted: 133320/333300
inserted: 166650/333300
inserted: 199980/333300
inserted: 233310/333300
inserted: 266640/333300
inserted: 299970/333300
Delete  - done
333300 rows deleted
Compress inplace  - done
inserted: 33330/333300
inserted: 66660/333300
inserted: 99990/333300
inserted: 133320/333300
inserted: 166650/333300
inserted: 199980/333300
inserted: 233310/333300
inserted: 266640/333300
inserted: 299970/333300
Inserted data:  326943
Deleted data:  0
java.sql.SQLException: Page Page(10219,Container(0, 1136)) could not be read from disk.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2284)
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1333)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1692)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
        at DbCompressErrorTester.insertData(DbCompressErrorTester.java:162)
        at DbCompressErrorTester.test(DbCompressErrorTester.java:116)
        at DbCompressErrorTester.main(DbCompressErrorTester.java:38)
Caused by: java.sql.SQLException: Page Page(10219,Container(0, 1136)) could not be read from disk.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:11
9)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)
        ... 12 more
Caused by: java.sql.SQLException: Java exception: 'Reached end of file while attempting to read a whole page.: java.io.E
OFException'.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:11
9)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:408)
        ... 10 more
Caused by: java.io.EOFException: Reached end of file while attempting to read a whole page.
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readFull(RAFContainer4.java:484)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage0(RAFContainer4.java:244)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(RAFContainer4.java:214)
        at org.apache.derby.impl.store.raw.data.CachedPage.readPage(CachedPage.java:671)
        at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:190)
        at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
        at org.apache.derby.impl.store.raw.data.FileContainer.initPage(FileContainer.java:2342)
        at org.apache.derby.impl.store.raw.data.FileContainer.newPage(FileContainer.java:1825)
        at org.apache.derby.impl.store.raw.data.BaseContainer.addPage(BaseContainer.java:314)
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage(BaseContainerHandle.java:183)
        at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:302)
        at org.apache.derby.impl.store.access.heap.HeapController.insert(HeapController.java:575)
        at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:457)
        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1028)
        at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:505)
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1241)
        ... 5 more
~/repro/derby-5234 $
























































































































",Major,Richard N. Hillegas,,2013-10-17T23:32:19.000+0000,"After Inplace compress: java.sql.SQLException: Page Page(10219,Container(0, 1136)) could not be read from disk caused by Caused by: java.io.EOFException: Reached end of file while attempting to read a whole page.",Closed,bug,Bug
2014-07-14T14:00:52.000+0000,DERBY-6660,Fixed,"If a ResultSet assertion method (such as JDBC.assertFullResultSet()) fails, it now attempts to add the entire ResultSet to the error message. This code uses the ResultSet.isClosed() method, which was added in JDBC 4.0. If this code runs on an older version of Derby that doesn't support JDBC 4.0, it fails with an AbstractMethodError because the isClosed() method doesn't exist. This could happen in the upgrade tests.

See for example this stack trace from a failing test run ([http://download.java.net/javadesktop/derby/request_5593747/javadb-task-3900531.html]):

{noformat}
java.lang.AbstractMethodError: org.apache.derby.impl.jdbc.EmbedResultSet20.isClosed()Z
	at org.apache.derbyTesting.junit.JDBC.addRsToReport(JDBC.java:1832)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1151)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1048)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1005)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:963)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testTriggerInternalVTI(Changes10_2.java:157)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
(...)
{noformat}

The AbstractMethodError shadows the original error.",Major,Knut Anders Hatlen,,2014-07-14T12:26:47.000+0000,ResultSet assertion methods fail in upgrade tests,Closed,bug,Bug
2016-12-03T03:55:59.000+0000,DERBY-6918,Fixed,"It seems that there is a problem with schema names that start with a number followed by a dot.
Please take a look at the following script. Everything works fine but the last line which is a delete statement. Note that having the foreign key constraints was necessary to make it reproduce the problem.

create schema ""1.a"";

create table ""1.a"".""role""
(
""id"" integer generated always as identity,
""name"" varchar(255) not null
);

alter table ""1.a"".""role"" add constraint ""role_pk""
primary key (""id"");

create table ""1.a"".""user""
(
""id"" integer generated always as identity,
""name"" varchar(255) not null
);

alter table ""1.a"".""user"" add constraint ""user_pk""
primary key (""id"");

create table ""1.a"".""user_role""
(
""role"" integer not null,
""user"" integer not null
);

alter table ""1.a"".""user_role"" add constraint ""user_role_fk1""
foreign key (""role"")
references ""1.a"".""role"" (""id"")
on delete cascade;

alter table ""1.a"".""user_role"" add constraint ""user_role_fk2""
foreign key (""user"")
references ""1.a"".""user"" (""id"")
on delete cascade;

alter table ""1.a"".""user_role"" add constraint ""user_role_u1""
unique (""user"", ""role"");

insert into ""1.a"".""role"" (""name"") values ('r1');
insert into ""1.a"".""user"" (""name"") values ('u1');
insert into ""1.a"".""user_role"" (""role"",""user"") values (1,1);

select * from ""1.a"".""user"";

delete from ""1.a"".""user"";

Last delete statement fails. The error is:
Schema '1' does not exist [SQL State=42Y07, DB Errorcode=20000] ",Major,Bryan Pendleton,,2016-11-27T16:38:32.000+0000,Problem with schema name starting with number followed by a dot,Resolved,bug,Bug
2020-01-13T15:54:07.000+0000,DERBY-7007,Cannot Reproduce,"Our customer is migrating to a new server platform. We have running several applications on their old server platform right now, which are running well so far. But on the new platform some random Derby errors occur reproducably which we and customer are analysing since several months now. However, the deeper we get the more clueless we are and it looks more and more like a DERBY bug.

We would be pleased if somebody could look into this and give us some idea if this is either a bug in derby or if you have some other ideas what could cause derby to behave like this.
h2. Situation

We have one Application which includes several embedded DERBY databases. After the server is starting, the application behaves normal for a few minutes. But after some minutes, one of the Derby DBs (accessed by JAVA Hibernate using DERBY embedded mode) shows first an error like this on a random derby file (the files vary each time):
{code:java}
Local derby log (/home/tomcat_i36/derby.log):
 
------------  Begin Shutdown Error Stack -------------

ERROR XSDG3: Meta-data for Container(0, 33904) could not be accessed to clean /opt/apps/tomcat/i36/webapps/XXXXX/database/XX/seg0/c8470.dat
        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer.clean(Unknown Source)
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Unknown Source)
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanEntry(Unknown Source)
        at org.apache.derby.impl.services.cache.BackgroundCleaner.performWork(Unknown Source)
        at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(Unknown Source)
        at org.apache.derby.impl.services.daemon.BasicDaemon.work(Unknown Source)
        at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:809)

Caused by: java.io.IOException: Bad file descriptor
        at sun.nio.ch.FileDispatcherImpl.pread0(Native Method)
        at sun.nio.ch.FileDispatcherImpl.pread(FileDispatcherImpl.java:65)
        at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:233)
        at sun.nio.ch.IOUtil.read(IOUtil.java:210)
        at sun.nio.ch.FileChannelImpl.readInternal(FileChannelImpl.java:754)
        at sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:739)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readFull(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage0(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.getEmbryonicPage(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(Unknown Source)
        ... 8 more

============= begin nested exception, level (1) ===========

java.io.IOException: Bad file descriptor
        at sun.nio.ch.FileDispatcherImpl.pread0(Native Method)
        at sun.nio.ch.FileDispatcherImpl.pread(FileDispatcherImpl.java:65)
        at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:233)
        at sun.nio.ch.IOUtil.read(IOUtil.java:210)
        at sun.nio.ch.FileChannelImpl.readInternal(FileChannelImpl.java:754)
        at sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:739)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readFull(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage0(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer4.getEmbryonicPage(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(Unknown Source)
        at org.apache.derby.impl.store.raw.data.RAFContainer.clean(Unknown Source)
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Unknown Source)
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanEntry(Unknown Source)
        at org.apache.derby.impl.services.cache.BackgroundCleaner.performWork(Unknown Source)
        at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(Unknown Source)
        at org.apache.derby.impl.services.daemon.BasicDaemon.work(Unknown Source)
        at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:809)

============= end nested exception, level (1) ===========

------------  End Shutdown Error Stack ------------{code}
After this happens, the DB behaves weird, throwing random errors (e.g. telling a column is missing in a table although it is there, or telling the DB is corrupt).

Hint: We do only have READ access on those databases within the application. We do not write any data to it.

It only happens to one single DB, but this is the most complex one in the application. Restarting the server will make it WORK for some minutes again!

We deploy the exact same WAR file to Old and new platform for testing.
h2. Already analysed

We already tried several things and did several analysis steps:
 # Turning off antivirus solution (Trend Micro Deep Security Agent) did not help
 # Exchanging the servers of the new server platform with another set of servers with same setup  does not help
 # Comparing a SHA1 hash of the ""corrupt"" files with the original files turned out the files are IDENTICAL.
 # Copying the ""corrupt"" DB to another system, testing it there works as expected without issues.
 # Running an integrity check on the DB shows no problems
 # Checking the file permissions on the problematic servers shows no problems
{code:java}
# ls -l /opt/apps/tomcat/i36/webapps/XXXX/database/XX/seg0/c8470.dat

-rw-r--r-- 1 tomcat_i36 tomcat 16384 Aug 21 09:32 /opt/apps/tomcat/i36/webapps/XXXXX/database/XX/seg0/c8470.dat
 

# file /opt/apps/tomcat/i36/webapps/XXXXX/database/XX/seg0/c8470.dat

/opt/apps/tomcat/i36/webapps/XXXXX/database/XX/seg0/c8470.dat: data{code}
 # Checking if any linux limits (e.g. open files limit) was reached: nothing found
 # Checking for corrupt file system: Ext3 is used on old and new platform, no hint about corrupt files found
# Upgrading DERBY from 10.11.1.1 to 10.12.1.1 did not fix the issue.

h2. The server environments
h3. OLD environment (working well)
{code:java}
Linux: SUSE Linux Enterprise Server 11 SP4  (s390x)

Kernel: 3.0.101-91-default #1 SMP Mon Dec 12 13:06:13 UTC 2016 (544b9d1) s390x s390x s390x GNU/Linux

Filesystem: /dev/mapper/appsvg-lvapps on /opt/apps type ext3 (rw,acl,user_xattr)

Java: IBM 7.1-4.1
Tomcat: 7.0.70{code}
h3. NEW environment (not working)
{code:java}
Linux: SUSE Linux Enterprise Server for SAP Applications 12 SP3  (x86_64)

Kernel: 4.4.126-94.22-default #1 SMP Wed Apr 11 07:45:03 UTC 2018 (9649989) x86_64 x86_64 x86_64 GNU/Linux

Filesystem: /dev/mapper/appsvg-lvapps on /opt/apps type ext3 (rw,relatime,data=ordered)

Java: IBM 7.1-4.15
Tomcat: 7.0.85{code}
Our customer has to migrate the server platforms very soon so we would be very glad if someone could assist us in checking and resolving this.

Thanks!",Blocker,None,,2018-08-21T08:58:35.000+0000,Random IOException: Bad file descriptor on new server platform,Closed,bug,Bug
2020-01-12T18:32:05.000+0000,DERBY-7046,Fixed,"{{derbynet.jar}} seems to be runnable jar - it has 

{code}
Main-Class: org.apache.derby.drda.NetworkServerControl
{code}

but

{code}
Class-Path: derby.jar derbyshared.jar
{code}

does not include {{derbytools.jar}}.

So on running {code:sh}java -jar derbynet.jar{code} following is presented:

{code}
Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/derby/iapi/tools/i18n/LocalizedOutput
    at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:319)
Caused by: java.lang.ClassNotFoundException: org.apache.derby.iapi.tools.i18n.LocalizedOutput
    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583)
    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
    ... 1 more
{code}

It works fine with previous version (10.14.2.0).",Major,Richard N. Hillegas,,2019-06-24T21:26:44.000+0000,NoClassDefFoundError on 'java -jar derbynet.jar',Closed,bug,Bug
2020-01-12T18:44:41.000+0000,DERBY-7039,Won't Fix,"Between versions 10.14.X and 10.15.X the DataSource implementation classes under the org.apache.derby.jdbc package were removed from the derby.jar. It looks like the DataSource classes were moved to derbytools.jar, which has a dependency on the derbynetwork.jar: [https://db.apache.org/derby/docs/10.15/publishedapi/org.apache.derby.tools/module-summary.html]

This makes it impossible to use just a Derby Embedded DataSource, without pulling in all of the Derby Network Client code too.

It appears this change was made for the sake of modularity, since split packages are not allowed in JPMS modules, and the org.apache.derby.jdbc package contains DataSource classes for both Embedded and Network usage. I am not sure what the best way to untangle this dependency issue is, but ideally it can be done in a way that doesn't require dependencies on Derby Embedded and Network clients in order to use DataSource at all.

One possible suggestion is to introduce new DataSource classes in new packages, such as:

org.apache.derby.jdbc.embedded // for Embedded DataSource classes
org.apache.derby.jdbc.network // for Network Client DataSources

Then, gut out the DataSource classes in org.apache.derby.jdbc and have them extend from their respective embedded/network implementations. This will allow existing users to add more dependencies and leave their code unchanged, or it will allow users who just want to depend on Embedded or Network clients to update the DataSource class name.

 ",Major,None,,2019-03-26T16:30:18.000+0000,DataSource classes removed from derby.jar,Resolved,bug,Bug
2020-01-12T20:15:07.000+0000,DERBY-7049,Won't Fix,"After a few days of working with an embedded Derby database (currently version 10.13.1.1 on Oracle Java 1.8.0_201-b09), the following error occurs:

*java.lang.OutOfMemoryError: Compressed class space*
{code:java}
java.lang.OutOfMemoryError: Compressed class space
    at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_201]
    at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_201]
    at java.lang.ClassLoader.defineClass(ClassLoader.java:642) ~[na:1.8.0_201]
    at org.apache.derby.impl.services.reflect.ReflectLoaderJava2.loadGeneratedClass(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.services.reflect.ReflectClassesJava2.loadGeneratedClassFromData(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.services.bytecode.GClass.getGeneratedClass(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getGeneratedClass(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.<init>(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) ~[derby-10.13.1.1.jar:na]
    at org.datanucleus.store.rdbms.datasource.dbcp.DelegatingConnection.prepareStatement(DelegatingConnection.java:259) ~[datanucleus-rdbms-4.0.12.jar:na]{code}
I tried to solve the problem by periodically shutting down the database, because I read that the generated classes as well as all other allocated resources should be released when the DB is shut-down.

I thus perform the following code once per roughly 20 minutes:
{code:java}
String shutdownConnectionURL = connectionURL + "";shutdown=true"";
try {
    DriverManager.getConnection(shutdownConnectionURL);
} catch (SQLException e) {
    int errorCode = e.getErrorCode();
    if (DERBY_ERROR_CODE_SHUTDOWN_DATABASE_SUCCESSFULLY != errorCode &&
            DERBY_ERROR_CODE_SHUTDOWN_DATABASE_WAS_NOT_RUNNING != errorCode) {
        throw new RuntimeException(e);
    }
}
{code}
Unfortunately, this has no effect :( The OutOfMemoryError still occurs after about 2 days. Do I assume correctly that the above code _should_ properly shut-down the database? And do I assume correctly that this shut-down should release the generated classes?

IMHO, it is already a bug in Derby that I need to shut-down the database at all in order to prevent it from piling up generated classes. Shouldn't it already release the generated classes at the end of each transaction? But even if I really have to shut-down the DB, it is certainly a bug that the classes are still kept in ""compressed class space"" even after the shut-down.

I searched the release notes and the existing bugs (here in JIRA) and did not find anything related to this {{OutOfMemoryError}}. Hence, I open this bug-report, now.

This issue was originally reported in [subshare#74|https://github.com/subshare/subshare/issues/74], but it is IMHO clearly a Derby bug.",Major,None,,2019-07-23T04:15:35.000+0000,OutOfMemoryError: Compressed class space,Closed,bug,Bug
2019-04-06T15:37:49.000+0000,DERBY-7041,Fixed,"I can execute a SELECT query that works but when I try to create a view on that select query, I simply get a java null pointer exception with no details.  I have tested the same statements on a postgres database and they worked without error.

Below, the PW_DIFF_WITHIN_REP_VIEW create does work, but the PW_DIFF_AR_REP_VIEW does not.  Again, the SELECT clause of PW_DIFF_AR_REP_VIEW will work, but when used within the create clause the error occurs.

I have attached the entire database creation script and an embedded instance that can be used for testing. It has data.

 

-- WITHIN_REP_VIEW combines the WITHIN_REP_COUNTER_VIEW and WITHIN_REP_RESPONSE_VIEW into one table from which across
-- replication or other statistical summaries by replication can be produced
CREATE VIEW JSL_DB.WITHIN_REP_VIEW (SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, VALUE) AS
 (SELECT JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, AVERAGE AS VALUE
FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.WITHIN_REP_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK)
 JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.WITHIN_REP_STAT.ELEMENT_ID_FK
UNION
SELECT JSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, LAST_VALUE as VALUE
FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.WITHIN_REP_COUNTER_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK)
 JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.WITHIN_REP_COUNTER_STAT.ELEMENT_ID_FK); 
 
-- PW_DIFF_WITHIN_REP_VIEW computes the pairwise differences across difference simulation experiments
-- doesn't work for derby, 3-28-2019, works for postgres
-- 
-- create view JSL_DB.PW_DIFF_WITHIN_REP_VIEW
-- as (select SIMULATION_RUN.SIM_NAME, A.SIM_RUN_ID_FK AS A_SIM_NUM, A.STAT_NAME, A.EXP_NAME as A_EXP_NAME, A.REP_NUM, A.VALUE as A_VALUE,
-- B.SIM_RUN_ID_FK as B_SIM_NUM, B.EXP_NAME as B_EXP_NAME, B.VALUE as B_VALUE,
-- '(' || A.EXP_NAME || ' - ' || B.EXP_NAME || ')' as DIFF_NAME, (A.VALUE - B.VALUE) as A_MINUS_B
-- from JSL_DB.WITHIN_REP_VIEW as A, JSL_DB.WITHIN_REP_VIEW as B, JSL_DB.SIMULATION_RUN
-- where A.SIM_RUN_ID_FK = JSL_DB.SIMULATION_RUN.ID
-- and A.STAT_NAME = B.STAT_NAME
-- and A.REP_NUM = B.REP_NUM
-- and A.SIM_RUN_ID_FK > B.SIM_RUN_ID_FK
-- and A.ELEMENT_NAME = B.ELEMENT_NAME);
--
-- create view JSL_DB.PW_DIFF_AR_REP_VIEW (SIM_NAME, STAT_NAME, A_EXP_NAME, B_EXP_NAME, DIFF_NAME, AVG_A, STD_DEV_A,
-- AVG_B, STD_DEV_B, AVG_DIFF_A_MINUS_B, STD_DEV_DIFF_A_MINUS_B, STAT_COUNT)
-- as (select SIM_NAME, STAT_NAME, A_EXP_NAME, B_EXP_NAME, DIFF_NAME, AVG(A_VALUE) as AVG_A, STDDEV_SAMP(A_VALUE) as STD_DEV_A,
-- AVG(B_VALUE) as AVG_B, STDDEV_SAMP(B_VALUE) as STD_DEV_B,
-- AVG(A_MINUS_B) as AVG_DIFF_A_MINUS_B, STDDEV_SAMP(A_MINUS_B) as STD_DEV_DIFF_A_MINUS_B,
-- COUNT(A_MINUS_B) as STAT_COUNT
-- from JSL_DB.PW_DIFF_WITHIN_REP_VIEW
-- group by SIM_NAME, STAT_NAME, A_EXP_NAME, B_EXP_NAME, DIFF_NAME);",Major,Richard N. Hillegas,,2019-03-28T22:49:21.000+0000,null pointer exception when creating view based on other views,Closed,bug,Bug
2019-01-31T03:31:15.000+0000,DERBY-7031,Fixed,"I saw the following errors on the 10.16 trunk when running the upgrade tests starting from 10.15.1.0:

{noformat}
There were 6 failures:
1) 10.15.1.0 Upgrade Phase: POST UPGRADE junit.framework.AssertionFailedError: Unexpected result from driver unloading expected:<false> but was:<true>
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.deregisterDriver(PhaseChanger.java:196)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.tearDown(PhaseChanger.java:147)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) Upgrade Tests from 10.15.1.0junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XJ004]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:879)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:277)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.shutdownDatabase(DropDatabaseSetup.java:89)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:54)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Database 'singleUse/oneuse0' not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:115)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:225)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:220)
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3215)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:772)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:442)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:660)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:656)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.iapi.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:654)
	at org.apache.derby.iapi.jdbc.InternalDriver.connect(InternalDriver.java:300)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:778)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:708)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:274)
	... 77 more
Caused by: ERROR XJ004: Database 'singleUse/oneuse0' not found.
	at org.apache.derby.shared.common.error.StandardException.newException(StandardException.java:300)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:170)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:75)
	... 91 more
3) Upgrade Tests from 10.15.1.0junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XJ004]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:879)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:277)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.shutdownDatabase(DropDatabaseSetup.java:89)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:54)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Database 'singleUse/oneuse1' not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:115)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:225)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:220)
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3215)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:772)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:442)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:660)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:656)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.iapi.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:654)
	at org.apache.derby.iapi.jdbc.InternalDriver.connect(InternalDriver.java:300)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:778)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:708)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:274)
	... 68 more
Caused by: ERROR XJ004: Database 'singleUse/oneuse1' not found.
	at org.apache.derby.shared.common.error.StandardException.newException(StandardException.java:300)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:170)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:75)
	... 82 more
4) Upgrade Tests from 10.15.1.0junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XJ004]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:879)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:277)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.shutdownDatabase(DropDatabaseSetup.java:89)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:54)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Database 'singleUse/oneuse2' not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:115)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:225)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:220)
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3215)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:772)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:442)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:660)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:656)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.iapi.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:654)
	at org.apache.derby.iapi.jdbc.InternalDriver.connect(InternalDriver.java:300)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:778)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:708)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:274)
	... 59 more
Caused by: ERROR XJ004: Database 'singleUse/oneuse2' not found.
	at org.apache.derby.shared.common.error.StandardException.newException(StandardException.java:300)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:170)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:75)
	... 73 more
5) Upgrade Tests from 10.15.1.0junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XJ004]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:879)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:277)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.shutdownDatabase(DropDatabaseSetup.java:89)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:54)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Database 'singleUse/oneuse3' not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:115)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:225)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:220)
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3215)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:772)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:442)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:660)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:656)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.iapi.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:654)
	at org.apache.derby.iapi.jdbc.InternalDriver.connect(InternalDriver.java:300)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:778)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:708)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:274)
	... 50 more
Caused by: ERROR XJ004: Database 'singleUse/oneuse3' not found.
	at org.apache.derby.shared.common.error.StandardException.newException(StandardException.java:300)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:170)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:75)
	... 64 more
6) Upgrade Tests from 10.15.1.0junit.framework.ComparisonFailure: Database shutdown expected:<[08006]> but was:<[XJ004]>
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:879)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:277)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.shutdownDatabase(DropDatabaseSetup.java:89)
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:54)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: java.sql.SQLException: Database 'singleUse/oneuse6' not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:115)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:225)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:220)
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3215)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:772)
	at org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:442)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:660)
	at org.apache.derby.iapi.jdbc.InternalDriver$1.run(InternalDriver.java:656)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.apache.derby.iapi.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:654)
	at org.apache.derby.iapi.jdbc.InternalDriver.connect(InternalDriver.java:300)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:778)
	at org.apache.derby.jdbc.BasicEmbeddedDataSource40.getConnection(BasicEmbeddedDataSource40.java:708)
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:274)
	... 23 more
Caused by: ERROR XJ004: Database 'singleUse/oneuse6' not found.
	at org.apache.derby.shared.common.error.StandardException.newException(StandardException.java:300)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:170)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:75)
	... 37 more

FAILURES!!!
Tests run: 145,  Failures: 6,  Errors: 0
{noformat}
",Major,None,,2019-01-24T04:08:16.000+0000,Errors running upgrade tests from 10.15.1.0 release candidate to 10.16 trunk,Closed,bug,Bug
2019-01-22T01:40:41.000+0000,DERBY-7028,Fixed,This must be fixed for the release.,Major,Richard N. Hillegas,,2019-01-12T15:42:24.000+0000,Module diagrams missing from javadoc for 15.1.0.0 release candidate,Closed,bug,Bug
2018-11-30T15:45:19.000+0000,DERBY-6973,Fixed,"Releases have md5 sum for signatures, and nothing modern.  How is this even possible?",Major,Richard N. Hillegas,,2017-10-23T19:44:56.000+0000,Provide SHA-512 checksums on future releases,Closed,bug,Bug
2018-11-29T22:33:27.000+0000,DERBY-7016,Fixed,The classpath-setting scripts need to include derbyshared.jar in the classpath and set MODULEPATH as well.,Major,Richard N. Hillegas,,2018-11-09T17:43:32.000+0000,Adjust the set*CP scripts to include derbyshared.jar and to set a MODULEPATH variable as well,Closed,bug,Bug
2018-11-29T01:51:20.000+0000,DERBY-7020,Fixed,Modularization has introduced a new jar file (derbyshared.jar) and some new template policies. We should make sure that all of these assets end up in the release distributions. The maven publishing logic will need to be adjusted to handle derbyshared.jar.,Major,Richard N. Hillegas,,2018-11-26T15:32:42.000+0000,Fix release targets to account for modularization changes,Closed,bug,Bug
2018-11-18T18:16:25.000+0000,DERBY-7019,Invalid,"All of a sudden I have started to see a failure in XMLBindingTest on my machine. Via binary search, I have determined that the failure does NOT appear as of revision 1826416, but it does appear in revision 1826417. The checkin at that revision does not seem related:

{noformat}
------------------------------------------------------------------------
r1826417 | rhillegas | 2018-03-10 08:24:00 -0800 (Sat, 10 Mar 2018) | 1 line

DERBY-6945: Split generated class directory into separate subdirectories for generated shared, engine, and tools classes; commit derby-6945-22-af-isolateClassesByArtifact.diff.
{noformat}

I am confused. Why did this failure suddenly appear? Why does it correspond to that checkin? But that is the evidence I have.",Major,Richard N. Hillegas,,2018-11-17T15:32:56.000+0000,Failure in XMLBindingTest,Closed,bug,Bug
2018-02-08T02:50:05.000+0000,DERBY-6981,Fixed,"Original error mesage:

 
{code:java}
java.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.ClientResultSet.next(Unknown Source) at org.ziptie.provider.credentials.internal.test1.main(test1.java:43) Caused by: ERROR XJ001: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.ClientResultSet.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetResultSetReply.parseFetchError(Unknown Source) at org.apache.derby.client.net.NetResultSetReply.parseCNTQRYreply(Unknown Source) at org.apache.derby.client.net.NetResultSetReply.readFetch(Unknown Source) at org.apache.derby.client.net.ResultSetReply.readFetch(Unknown Source) at org.apache.derby.client.net.NetResultSet.readFetch_(Unknown Source) at org.apache.derby.client.net.NetResultSet.flowFetch(Unknown Source) at org.apache.derby.client.net.NetCursor.getMoreData_(Unknown Source) at org.apache.derby.client.am.Cursor.stepNext(Unknown Source) at org.apache.derby.client.am.Cursor.next(Unknown Source) at org.apache.derby.client.am.ClientResultSet.nextX(Unknown Source)
{code}
DERBY-6735 is very similar bug.

DDL

 
{code:java}
CREATE TABLE TEST1
(
ID int PRIMARY KEY NOT NULL,
LASTUPDATE timestamp
){code}
 

I have attached test Code:[^derby-test.java]

test Code with embeded derby : [^Main.java]

^Full code on my intellij : [^Test1.zip]:^

Another database (PostgreSQL) has no problem.

I also put a workaround in the code.",Major,Bryan Pendleton,,2018-01-31T02:07:01.000+0000,"SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U",Resolved,bug,Bug
2017-09-18T01:31:31.000+0000,DERBY-6961,Fixed,"If a NO CYCLE identity column exhausts its range, then...

  ALTER TABLE ALTER COLUMN $columnName SET CYCLE

...will not revive the identity column. No more rows can be inserted into the table. This violates the SQL Standard and is very surprising behavior after the ALTER TABLE command completed successfully.

The problem is that the exhausted sequence generator has a next value of NULL, signifying that it is done. After the ALTER TABLE command, the next value of the sequence generator should be the minimum value (for an ascending sequence generator) or the maximum value (for a descending sequence generator) according to the 2016 SQL Standard, section 4.27.2 (Operations involving sequence generators), quoted here in full:

""When a <next value expression> is applied to a sequence generator SG, SG issues a value V taken from SG's current cycle such that V is expressible as the current base value of SG plus N multiplied by the increment of SG, where N is a non-negative number.

Thus a sequence generator will normally issue all of the values in its cycle and these will normally be in increasing or decreasing order (depending on the sign of the increment) but within that general ordering separate subgroups of ordered values may occur.

If the sequence generator's cycle is exhausted (i.e., it cannot issue a value that meets the criteria), then a new cycle is created with the current base value set to the minimum value of SG (if SG is an ascending sequence generator) or the maximum value of SG (if SG is a descending sequence generator).

If a new cycle is created and the descriptor of SG includes NOCYCLE, then an exception condition is raised.

If there are multiple instances of <next value expression>s specifying the same sequence generator within a single SQL-statement, all those instances return the same value for a given row processed by that SQL-statement.""


The following script shows this problem:

{noformat}
connect 'jdbc:derby:memory:db;create=true';

------------------------------------------------
--
-- Exhaust a NO CYCLE identity column.
-- SET CYCLE does not allow the sequence generator
-- to continue processing.
--
------------------------------------------------

create table t_noCycleExhaust(a int generated always as identity (start with 2147483646 no cycle), b int);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEEXHAUST');

insert into t_noCycleExhaust(b) values (1);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEEXHAUST');
insert into t_noCycleExhaust(b) values (2);
-- the sequence generator has NULL as its next value
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEEXHAUST');

-- should fail
insert into t_noCycleExhaust(b) values (3);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEEXHAUST');
select * from t_noCycleExhaust order by b;

alter table t_noCycleExhaust alter column a set cycle;
-- the sequence generator still has NULL as its next value. this is the bug.
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEEXHAUST');

-- incorrectly fails
insert into t_noCycleExhaust(b) values (3);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEEXHAUST');
select * from t_noCycleExhaust order by b;


------------------------------------------------
--
-- Do NOT exhaust a NO CYCLE identity column.
-- Then SET CYCLE. The sequence generator will
-- wrap around.
--
------------------------------------------------

create table t_noCycleDoNotExhaust(a int generated always as identity (start with 2147483646 no cycle), b int);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEDONOTEXHAUST');

insert into t_noCycleDoNotExhaust(b) values (1);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEDONOTEXHAUST');

alter table t_noCycleDoNotExhaust alter column a set cycle;
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEDONOTEXHAUST');

insert into t_noCycleDoNotExhaust(b) values (2);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEDONOTEXHAUST');
insert into t_noCycleDoNotExhaust(b) values (3);
values syscs_util.syscs_peek_at_identity('APP', 'T_NOCYCLEDONOTEXHAUST');
select * from t_noCycleDoNotExhaust order by b;
{noformat}
",Major,Richard N. Hillegas,,2017-09-13T02:15:13.000+0000,SET CYCLE fails to let an identity column cycle if the range is already exhausted,Resolved,bug,Bug
2017-09-17T15:31:44.000+0000,DERBY-6962,Fixed,"The

  ALTER TABLE ALTER COLUMN $columnName SET CYCLE

command does not raise an error even on identity columns in pre-10.12 databases. Those identity columns are not backed by sequence generators. Afterwards, the columns do not cycle, even though the ALTER TABLE command appeared to run successfully. This should be easy to fix. The parser just needs to forbid the ALTER TABLE...SET CYCLE command in pre-10.12 databases. The following scripts show this behavior:

{noformat}
-- run the following script with version 10.10.1.1:
connect 'jdbc:derby:db;create=true';

create table t1(a int generated always as identity (start with 2147483646), b int);
insert into t1(b) values (1);
insert into t1(b) values (2);
-- fails as expected
insert into t1(b) values (3);

select * from t1 order by b;

create table t2(a int generated always as identity (start with 2147483646), b int);

-- now run the following script with 10.14
connect 'jdbc:derby:db';

-- succeeds but should not
alter table t2 alter column a set cycle;

insert into t2(b) values (1);
insert into t2(b) values (2);
-- fails because the cycling behavior did not change
insert into t2(b) values (3);

select * from t2 order by b;
{noformat}
",Major,Richard N. Hillegas,,2017-09-16T15:51:12.000+0000,Forbid ALTER TABLE ... SET CYCLE on identity columns in pre-10.11 databases,Closed,bug,Bug
2017-09-14T01:05:48.000+0000,DERBY-6959,Fixed,"The correct syntax for changing the cycling behavior of an auto-increment column is...

  ALTER TABLE ALTER COLUMN $columnName SET [NO] CYCLE

...according to the 2016 SQL Standard, part 2, sections 11.20 (<alter identity column specification) and 11.72 (<sequence generator definition>). This is also the syntax used by DB2 (see https://www.ibm.com/support/knowledgecenter/en/SSEPEK_10.0.0/sqlref/src/tpc/db2z_sql_altertable.html). Right now Derby does not accept the required SET keyword. We should bring Derby into compliance with the Standard. I will attach a patch to do this.
",Major,Richard N. Hillegas,,2017-09-10T19:51:04.000+0000,Require the Standard SET keyword in the syntax for changing the cycle behavior of identity columns,Closed,bug,Bug
2017-08-20T14:24:59.000+0000,DERBY-6956,Fixed,"I create a test table with the following query:

CREATE TABLE ""DERBYTEST"" (""STRINGCOLUMN"" varchar(255), ""INTEGERCOLUMN"" integer, ""SHORTCOLUMN"" varchar(255), ""LONGCOLUMN"" bigint, ""DOUBLECOLUMN"" double, ""FLOATCOLUMN"" double, ""DECIMALCOLUMN"" decimal(31, 6), ""BOOLEANCOLUMN"" smallint, ""DATECOLUMN"" timestamp, ""DATETIMECOLUMN"" timestamp, ""ID"" integer, ""LASTMODTIME"" timestamp, PRIMARY KEY (""ID""))

this query completes successfully

I later try to copy the table with the following query:

CREATE TABLE ""DERBYTEST_TEMP"" AS SELECT * FROM DERBYTEST WITH NO DATA

This throws the following exception:

[42X71][30000] Invalid data type 'DECIMAL(31, 6)' for column 'DECIMALCOLUMN'

Everything works perfectly fine if I remove the decimal column.",Major,None,,2017-08-14T14:52:17.000+0000,Create table as Select cannot copy Decimal columns,Resolved,bug,Bug
